<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Excursions into Biostatistics | Erik Kusch</title>
    <link>https://www.erikkusch.com/courses/excursions-into-biostatistics/</link>
      <atom:link href="https://www.erikkusch.com/courses/excursions-into-biostatistics/index.xml" rel="self" type="application/rss+xml" />
    <description>Excursions into Biostatistics</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-gb</language><copyright>Â© 2024</copyright><lastBuildDate>Fri, 01 Jan 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.erikkusch.com/img/%C3%A5motdalshytta.jpg</url>
      <title>Excursions into Biostatistics</title>
      <link>https://www.erikkusch.com/courses/excursions-into-biostatistics/</link>
    </image>
    
    <item>
      <title>Biostatistics - Wait... What?!</title>
      <link>https://www.erikkusch.com/courses/excursions-into-biostatistics/1_biostatistics-wait.-what/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/excursions-into-biostatistics/1_biostatistics-wait.-what/</guid>
      <description>&lt;p&gt;I have prepared some &lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/ErikKusch/Homepage/blob/master/static/courses/Excursions-into-Biostatistics/Biostatistics---Wait.-What!.html&#34; target=&#34;_blank&#34;&gt; Lecture Slides &lt;/a&gt; for this session.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Statistical Terminology</title>
      <link>https://www.erikkusch.com/courses/excursions-into-biostatistics/2_statistical-terminology-the-basics-misconceptions-and-pedantics/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/excursions-into-biostatistics/2_statistical-terminology-the-basics-misconceptions-and-pedantics/</guid>
      <description>&lt;p&gt;I have prepared some &lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/ErikKusch/Homepage/blob/master/static/courses/Excursions-into-Biostatistics/Statistical-Terminology---The-Basics,-Misconceptions,-and-Pedantics.html&#34; target=&#34;_blank&#34;&gt; Lecture Slides &lt;/a&gt; for this session.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Coding Practices - Life with R</title>
      <link>https://www.erikkusch.com/courses/excursions-into-biostatistics/3_coding-practices-life-with-r/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/excursions-into-biostatistics/3_coding-practices-life-with-r/</guid>
      <description>&lt;p&gt;I have prepared some &lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/ErikKusch/Homepage/blob/master/static/courses/Excursions-into-Biostatistics/2021-07-08-Coding-Practices_Web.html&#34; target=&#34;_blank&#34;&gt; Lecture Slides &lt;/a&gt; for this session. I also provide the &lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/static/courses/Excursions-into-Biostatistics/CodinBackBone.R&#34; target=&#34;_blank&#34;&gt; code structure &lt;/a&gt; I propose during the talk with useful helper functions.&lt;/p&gt;
&lt;p&gt;An older version of the lecture slides from previous talks on the same subject can be found &lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/ErikKusch/Homepage/blob/master/static/courses/Excursions-into-Biostatistics/Coding-Practices---Life-With-R.html&#34; target=&#34;_blank&#34;&gt; here &lt;/a&gt; and are much text-heavier.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Research Project</title>
      <link>https://www.erikkusch.com/courses/excursions-into-biostatistics/research-project/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/excursions-into-biostatistics/research-project/</guid>
      <description>&lt;h2 id=&#34;our-resarch-project&#34;&gt;Our Resarch Project&lt;/h2&gt;
&lt;p&gt;Here (and over the next few exercises in this &amp;ldquo;course&amp;rdquo;), we are looking at a big (and entirely fictional) data base of the common house sparrow (&lt;em&gt;Passer domesticus&lt;/em&gt;). In particular, we are interested in the &lt;strong&gt;Evolution of &lt;em&gt;Passer domesticus&lt;/em&gt; in Response to Climate Change&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-data&#34;&gt;The Data&lt;/h3&gt;
&lt;p&gt;I have created a large data set for this exercise which is available in a cleaned and properly handled version &lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/excursions-into-biostatistics/Data.rar&#34; target=&#34;_blank&#34;&gt; here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;reading-the-data-into-r&#34;&gt;Reading the Data into &lt;code&gt;R&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s start by reading the data into &lt;code&gt;R&lt;/code&gt; and taking an initial look at it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Sparrows_df &amp;lt;- readRDS(file.path(&amp;quot;Data&amp;quot;, &amp;quot;SparrowData.rds&amp;quot;))
Sparrows_df &amp;lt;- Sparrows_df[!is.na(Sparrows_df$Weight), ]
head(Sparrows_df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Index Latitude Longitude     Climate Population.Status Weight Height Wing.Chord Colour    Sex Nesting.Site Nesting.Height Number.of.Eggs Egg.Weight Flock Home.Range Predator.Presence Predator.Type
## 1    SI       60       100 Continental            Native  34.05  12.87       6.67  Brown   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large               Yes         Avian
## 2    SI       60       100 Continental            Native  34.86  13.68       6.79   Grey   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large               Yes         Avian
## 3    SI       60       100 Continental            Native  32.34  12.66       6.64  Black Female        Shrub          35.60              1       3.21     C      Large               Yes         Avian
## 4    SI       60       100 Continental            Native  34.78  15.09       7.00  Brown Female        Shrub          47.75              0         NA     E      Large               Yes         Avian
## 5    SI       60       100 Continental            Native  35.01  13.82       6.81   Grey   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large               Yes         Avian
## 6    SI       60       100 Continental            Native  32.36  12.67       6.64  Brown Female        Shrub          32.47              1       3.17     E      Large               Yes         Avian
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;variables&#34;&gt;Variables&lt;/h4&gt;
&lt;p&gt;When building models or trying to explain anything about our data set, we need to consider all the different variables and the information contained therein. In this data set, we have access to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Index&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - an abbreviation of &lt;code&gt;Site&lt;/code&gt; records&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Latitude&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - an identifier of where specific sparrow measurements where taken&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Longitude&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - an identifier of where specific sparrow measurements where taken&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Climate&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - local climate types that sparrows are subjected to (e.g. coastal, continental, and semi-coastal)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Population.Status&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - population status (e.g. native or introduced)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Weight&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - sparrow weight [g]; Range: 13-40g&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Height&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - sparrow height/length [cm]; Range: 10-22cm&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Wing.Chord&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - wing length [cm]; Range: 6-10cm&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Colour&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - main plumage colour (e.g. brown, grey, and black)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sex&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - sparrow sex&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nesting.Site&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - nesting conditions, only recorded for females (e.g. tree or shrub)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nesting.Height&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - nest elevation above ground level, only recorded for females&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Number.of.Eggs&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - number of eggs per nest, only recorded for females&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Egg.Weight&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - mean weight of eggs per nest, only recorded for females&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Flock&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - which flock at each location each sparrow belongs to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Home.Range&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - size of home range of each flock (e.g. Small, Medium, and Large)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Predator.Presence&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - if a predator is present at a station (e.g. No or Yes)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Predator.Type&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - what kind of predator is present (e.g. Avian, Non-Avian, or None)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that the variables &lt;code&gt;Longitude&lt;/code&gt; and &lt;code&gt;Latitude&lt;/code&gt; may be used to retrieve climate data variables from a host of data sources.&lt;/p&gt;
&lt;h4 id=&#34;locations&#34;&gt;Locations&lt;/h4&gt;
&lt;p&gt;Looking at our data, we notice that it comes at distinct stations. Let&amp;rsquo;s visualise where they are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;leaflet&amp;quot;)
Plot_df &amp;lt;- Sparrows_df[, c(&amp;quot;Longitude&amp;quot;, &amp;quot;Latitude&amp;quot;, &amp;quot;Index&amp;quot;, &amp;quot;Climate&amp;quot;, &amp;quot;Population.Status&amp;quot;)]
Plot_df &amp;lt;- unique(Plot_df)
m &amp;lt;- leaflet()
m &amp;lt;- addTiles(m)
m &amp;lt;- addMarkers(m,
  lng = Plot_df$Longitude,
  lat = Plot_df$Latitude,
  label = Plot_df$Index,
  popup = paste(Plot_df$Population.Status, Plot_df$Climate, sep = &amp;quot;;&amp;quot;)
)
m
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-{=html}&#34;&gt;&amp;lt;div class=&amp;quot;leaflet html-widget html-fill-item-overflow-hidden html-fill-item&amp;quot; id=&amp;quot;htmlwidget-9aac1c390aadeb1fd4f9&amp;quot; style=&amp;quot;width:1440px;height:768px;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type=&amp;quot;application/json&amp;quot; data-for=&amp;quot;htmlwidget-9aac1c390aadeb1fd4f9&amp;quot;&amp;gt;{&amp;quot;x&amp;quot;:{&amp;quot;options&amp;quot;:{&amp;quot;crs&amp;quot;:{&amp;quot;crsClass&amp;quot;:&amp;quot;L.CRS.EPSG3857&amp;quot;,&amp;quot;code&amp;quot;:null,&amp;quot;proj4def&amp;quot;:null,&amp;quot;projectedBounds&amp;quot;:null,&amp;quot;options&amp;quot;:{}}},&amp;quot;calls&amp;quot;:[{&amp;quot;method&amp;quot;:&amp;quot;addTiles&amp;quot;,&amp;quot;args&amp;quot;:[&amp;quot;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&amp;quot;,null,null,{&amp;quot;minZoom&amp;quot;:0,&amp;quot;maxZoom&amp;quot;:18,&amp;quot;tileSize&amp;quot;:256,&amp;quot;subdomains&amp;quot;:&amp;quot;abc&amp;quot;,&amp;quot;errorTileUrl&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;tms&amp;quot;:false,&amp;quot;noWrap&amp;quot;:false,&amp;quot;zoomOffset&amp;quot;:0,&amp;quot;zoomReverse&amp;quot;:false,&amp;quot;opacity&amp;quot;:1,&amp;quot;zIndex&amp;quot;:1,&amp;quot;detectRetina&amp;quot;:false,&amp;quot;attribution&amp;quot;:&amp;quot;&amp;amp;copy; &amp;lt;a href=\&amp;quot;https://openstreetmap.org\&amp;quot;&amp;gt;OpenStreetMap&amp;lt;\/a&amp;gt; contributors, &amp;lt;a href=\&amp;quot;https://creativecommons.org/licenses/by-sa/2.0/\&amp;quot;&amp;gt;CC-BY-SA&amp;lt;\/a&amp;gt;&amp;quot;}]},{&amp;quot;method&amp;quot;:&amp;quot;addMarkers&amp;quot;,&amp;quot;args&amp;quot;:[[60,54,-25,-21.1,70,55,31,17.25,4,10.5,-51.75],[100,-2,135,55.6,-90,-97,-92,-88.75,-53,-67,-59.17],null,null,null,{&amp;quot;interactive&amp;quot;:true,&amp;quot;draggable&amp;quot;:false,&amp;quot;keyboard&amp;quot;:true,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;zIndexOffset&amp;quot;:0,&amp;quot;opacity&amp;quot;:1,&amp;quot;riseOnHover&amp;quot;:false,&amp;quot;riseOffset&amp;quot;:250},[&amp;quot;Native;Continental&amp;quot;,&amp;quot;Native;Coastal&amp;quot;,&amp;quot;Introduced;Continental&amp;quot;,&amp;quot;Introduced;Coastal&amp;quot;,&amp;quot;Introduced;Coastal&amp;quot;,&amp;quot;Introduced;Semi-Coastal&amp;quot;,&amp;quot;Introduced;Coastal&amp;quot;,&amp;quot;Introduced;Coastal&amp;quot;,&amp;quot;Introduced;Coastal&amp;quot;,&amp;quot;Introduced;Coastal&amp;quot;,&amp;quot;Introduced;Coastal&amp;quot;],null,null,null,[&amp;quot;SI&amp;quot;,&amp;quot;UK&amp;quot;,&amp;quot;AU&amp;quot;,&amp;quot;RE&amp;quot;,&amp;quot;NU&amp;quot;,&amp;quot;MA&amp;quot;,&amp;quot;LO&amp;quot;,&amp;quot;BE&amp;quot;,&amp;quot;FG&amp;quot;,&amp;quot;SA&amp;quot;,&amp;quot;FI&amp;quot;],{&amp;quot;interactive&amp;quot;:false,&amp;quot;permanent&amp;quot;:false,&amp;quot;direction&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;opacity&amp;quot;:1,&amp;quot;offset&amp;quot;:[0,0],&amp;quot;textsize&amp;quot;:&amp;quot;10px&amp;quot;,&amp;quot;textOnly&amp;quot;:false,&amp;quot;className&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;sticky&amp;quot;:true},null]}],&amp;quot;limits&amp;quot;:{&amp;quot;lat&amp;quot;:[-51.75,70],&amp;quot;lng&amp;quot;:[-97,135]}},&amp;quot;evals&amp;quot;:[],&amp;quot;jsHooks&amp;quot;:[]}&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you can zoom and drag the above map as well as click the station markers for some additional information.&lt;/p&gt;
&lt;h3 id=&#34;adding-information&#34;&gt;Adding Information&lt;/h3&gt;
&lt;p&gt;How do we get the data for this? Well, I wrote an &lt;code&gt;R&lt;/code&gt;-Package that does exactly that.&lt;/p&gt;
&lt;p&gt;First, said package needs to be installed from my GitHub repository for it. Subsequently, we need to set API Key and User number obtained at the 
&lt;a href=&#34;https://cds.climate.copernicus.eu/api-how-to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Climate Data Store&lt;/a&gt;. I have already baked these into my material, so I don&amp;rsquo;t set them here, but include lines of code that ask you for your credentials when copy &amp;amp; pasted over:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (&amp;quot;KrigR&amp;quot; %in% rownames(installed.packages()) == FALSE) { # KrigR check
  Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS = &amp;quot;true&amp;quot;)
  devtools::install_github(&amp;quot;https://github.com/ErikKusch/KrigR&amp;quot;)
}
library(KrigR)
#### CDS API (needed for ERA5-Land downloads)
if (!exists(&amp;quot;API_Key&amp;quot;) | !exists(&amp;quot;API_User&amp;quot;)) { # CS API check: if CDS API credentials have not been specified elsewhere
  API_User &amp;lt;- readline(prompt = &amp;quot;Please enter your Climate Data Store API user number and hit ENTER.&amp;quot;)
  API_Key &amp;lt;- readline(prompt = &amp;quot;Please enter your Climate Data Store API key number and hit ENTER.&amp;quot;)
} # end of CDS API check

#### NUMBER OF CORES
if (!exists(&amp;quot;numberOfCores&amp;quot;)) { # Core check: if number of cores for parallel processing has not been set yet
  numberOfCores &amp;lt;- readline(prompt = paste(&amp;quot;How many cores do you want to allocate to these processes? Your machine has&amp;quot;, parallel::detectCores()))
} # end of Core check
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the package, we can download some state-of-the-art climate data. I have already prepared all of this in the data directory you downloaded earlier so this step will automatically be skipped:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!file.exists(file.path(&amp;quot;Data&amp;quot;, &amp;quot;SparrowDataClimate.rds&amp;quot;))) {
  colnames(Plot_df)[1:3] &amp;lt;- c(&amp;quot;Lon&amp;quot;, &amp;quot;Lat&amp;quot;, &amp;quot;ID&amp;quot;) # set column names to be in line with what KrigR wants
  Points_Raw &amp;lt;- download_ERA(
    Variable = &amp;quot;2m_temperature&amp;quot;,
    DataSet = &amp;quot;era5&amp;quot;,
    DateStart = &amp;quot;1982-01-01&amp;quot;,
    DateStop = &amp;quot;2012-12-31&amp;quot;,
    TResolution = &amp;quot;month&amp;quot;,
    TStep = 1,
    Extent = Plot_df, # the point data with Lon and Lat columns
    Buffer = 0.5, # a 0.5 degree buffer should be drawn around each point
    ID = &amp;quot;ID&amp;quot;, # this is the column which holds point IDs
    API_User = API_User,
    API_Key = API_Key,
    Dir = file.path(getwd(), &amp;quot;Data&amp;quot;),
    FileName = &amp;quot;AT_Climatology.nc&amp;quot;
  )
  Points_mean &amp;lt;- calc(Points_Raw, fun = mean)
  Points_sd &amp;lt;- calc(Points_Raw, fun = sd)
  Sparrows_df$TAvg &amp;lt;- as.numeric(extract(x = Points_mean, y = Sparrows_df[, c(&amp;quot;Longitude&amp;quot;, &amp;quot;Latitude&amp;quot;)], buffer = 0.3))
  Sparrows_df$TSD &amp;lt;- as.numeric(extract(x = Points_sd, y = Sparrows_df[, c(&amp;quot;Longitude&amp;quot;, &amp;quot;Latitude&amp;quot;)], buffer = 0.3))
  saveRDS(Sparrows_df, file.path(&amp;quot;Data&amp;quot;, &amp;quot;SparrowDataClimate.rds&amp;quot;))
} else {
  Sparrows_df &amp;lt;- readRDS(file.path(&amp;quot;Data&amp;quot;, &amp;quot;SparrowDataClimate.rds&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have now effectively added two more variables to the data set:&lt;/p&gt;
&lt;ol start=&#34;19&#34;&gt;
&lt;li&gt;&lt;code&gt;TAvg&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - Average air temperature for a 30-year time-period&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TSD&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - Standard deviation of mean monthly air temperature for a 30-year time-period&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we have the data set we will look at for the rest of the exercises in this seminar series. But how did we get here? Find the answer 
&lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/data-handling-and-data-assumptions/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;hypotheses&#34;&gt;Hypotheses&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s consider the following two hypotheses for our exercises for this simulated research project:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Sparrow Morphology&lt;/strong&gt; is determined by:&lt;br&gt;
A. &lt;em&gt;Climate Conditions&lt;/em&gt; with sparrows in stable, warm environments fairing better than those in colder, less stable ones.&lt;br&gt;
B. &lt;em&gt;Competition&lt;/em&gt; with sparrows in small flocks doing better than those in big flocks.&lt;br&gt;
C. &lt;em&gt;Predation&lt;/em&gt; with sparrows under pressure of predation doing worse than those without.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sites&lt;/strong&gt;  accurately represent &lt;strong&gt;sparrow morphology&lt;/strong&gt;. This may mean:&lt;br&gt;
A. &lt;em&gt;Population status&lt;/em&gt; as inferred through morphology.&lt;br&gt;
B. &lt;em&gt;Site index&lt;/em&gt; as inferred through morphology.&lt;br&gt;
C. &lt;em&gt;Climate&lt;/em&gt; as inferred through morphology.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We try to answer these over the next few sessions.&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.2.3 (2023-03-15)
## Platform: x86_64-apple-darwin17.0 (64-bit)
## Running under: macOS Big Sur ... 10.16
## 
## Matrix products: default
## BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] parallel  stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] KrigR_0.1.2       terra_1.7-21      httr_1.4.5        stars_0.6-0       abind_1.4-5       fasterize_1.0.4   sf_1.0-12         lubridate_1.9.2   automap_1.1-9     doSNOW_1.0.20    
## [11] snow_0.4-4        doParallel_1.0.17 iterators_1.0.14  foreach_1.5.2     rgdal_1.6-5       raster_3.6-20     sp_1.6-0          stringr_1.5.0     keyring_1.3.1     ecmwfr_1.5.0     
## [21] ncdf4_1.21        leaflet_2.1.2    
## 
## loaded via a namespace (and not attached):
##  [1] xts_0.13.0         R.cache_0.16.0     tools_4.2.3        bslib_0.4.2        utf8_1.2.3         R6_2.5.1           KernSmooth_2.23-20 DBI_1.1.3          colorspace_2.1-0   tidyselect_1.2.0  
## [11] compiler_4.2.3     cli_3.6.0          gstat_2.1-0        bookdown_0.33      sass_0.4.5         scales_1.2.1       classInt_0.4-9     proxy_0.4-27       digest_0.6.31      rmarkdown_2.20    
## [21] R.utils_2.12.2     pkgconfig_2.0.3    htmltools_0.5.4    styler_1.9.1       fastmap_1.1.1      htmlwidgets_1.6.1  rlang_1.0.6        rstudioapi_0.14    FNN_1.1.3.2        jquerylib_0.1.4   
## [31] generics_0.1.3     zoo_1.8-11         jsonlite_1.8.4     crosstalk_1.2.0    dplyr_1.1.0        R.oo_1.25.0        magrittr_2.0.3     Rcpp_1.0.10        munsell_0.5.0      fansi_1.0.4       
## [41] lifecycle_1.0.3    R.methodsS3_1.8.2  stringi_1.7.12     yaml_2.3.7         plyr_1.8.8         grid_4.2.3         lattice_0.20-45    knitr_1.42         pillar_1.8.1       spacetime_1.2-8   
## [51] codetools_0.2-19   glue_1.6.2         evaluate_0.20      blogdown_1.16      vctrs_0.5.2        gtable_0.3.1       purrr_1.0.1        reshape_0.8.9      assertthat_0.2.1   cachem_1.0.7      
## [61] ggplot2_3.4.1      xfun_0.37          lwgeom_0.2-11      e1071_1.7-13       class_7.3-21       tibble_3.2.0       intervals_0.15.3   memoise_2.0.1      units_0.8-1        timechange_0.2.0  
## [71] ellipsis_0.3.2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Research Project</title>
      <link>https://www.erikkusch.com/courses/excursions-into-biostatistics/research-project/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/excursions-into-biostatistics/research-project/</guid>
      <description>&lt;h2 id=&#34;our-resarch-project&#34;&gt;Our Resarch Project&lt;/h2&gt;
&lt;p&gt;Here (and over the next few exercises in this &amp;ldquo;course&amp;rdquo;), we are looking at a big (and entirely fictional) data base of the common house sparrow (&lt;em&gt;Passer domesticus&lt;/em&gt;). In particular, we are interested in the &lt;strong&gt;Evolution of &lt;em&gt;Passer domesticus&lt;/em&gt; in Response to Climate Change&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-data&#34;&gt;The Data&lt;/h3&gt;
&lt;p&gt;I have created a large data set for this exercise which is available in a cleaned and properly handled version &lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/excursions-into-biostatistics/Data.rar&#34; target=&#34;_blank&#34;&gt; here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;reading-the-data-into-r&#34;&gt;Reading the Data into &lt;code&gt;R&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s start by reading the data into &lt;code&gt;R&lt;/code&gt; and taking an initial look at it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Sparrows_df &amp;lt;- readRDS(file.path(&amp;quot;Data&amp;quot;, &amp;quot;SparrowData.rds&amp;quot;))
Sparrows_df &amp;lt;- Sparrows_df[!is.na(Sparrows_df$Weight), ]
head(Sparrows_df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Index Latitude Longitude     Climate Population.Status Weight Height Wing.Chord Colour    Sex Nesting.Site Nesting.Height Number.of.Eggs Egg.Weight Flock Home.Range Predator.Presence Predator.Type
## 1    SI       60       100 Continental            Native  34.05  12.87       6.67  Brown   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large               Yes         Avian
## 2    SI       60       100 Continental            Native  34.86  13.68       6.79   Grey   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large               Yes         Avian
## 3    SI       60       100 Continental            Native  32.34  12.66       6.64  Black Female        Shrub          35.60              1       3.21     C      Large               Yes         Avian
## 4    SI       60       100 Continental            Native  34.78  15.09       7.00  Brown Female        Shrub          47.75              0         NA     E      Large               Yes         Avian
## 5    SI       60       100 Continental            Native  35.01  13.82       6.81   Grey   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large               Yes         Avian
## 6    SI       60       100 Continental            Native  32.36  12.67       6.64  Brown Female        Shrub          32.47              1       3.17     E      Large               Yes         Avian
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;variables&#34;&gt;Variables&lt;/h4&gt;
&lt;p&gt;When building models or trying to explain anything about our data set, we need to consider all the different variables and the information contained therein. In this data set, we have access to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Index&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - an abbreviation of &lt;code&gt;Site&lt;/code&gt; records&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Latitude&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - an identifier of where specific sparrow measurements where taken&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Longitude&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - an identifier of where specific sparrow measurements where taken&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Climate&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - local climate types that sparrows are subjected to (e.g. coastal, continental, and semi-coastal)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Population.Status&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - population status (e.g. native or introduced)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Weight&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - sparrow weight [g]; Range: 13-40g&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Height&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - sparrow height/length [cm]; Range: 10-22cm&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Wing.Chord&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - wing length [cm]; Range: 6-10cm&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Colour&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - main plumage colour (e.g. brown, grey, and black)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sex&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - sparrow sex&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nesting.Site&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - nesting conditions, only recorded for females (e.g. tree or shrub)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nesting.Height&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - nest elevation above ground level, only recorded for females&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Number.of.Eggs&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - number of eggs per nest, only recorded for females&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Egg.Weight&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - mean weight of eggs per nest, only recorded for females&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Flock&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - which flock at each location each sparrow belongs to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Home.Range&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - size of home range of each flock (e.g. Small, Medium, and Large)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Predator.Presence&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - if a predator is present at a station (e.g. No or Yes)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Predator.Type&lt;/code&gt; [&lt;em&gt;Factor&lt;/em&gt;] - what kind of predator is present (e.g. Avian, Non-Avian, or None)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that the variables &lt;code&gt;Longitude&lt;/code&gt; and &lt;code&gt;Latitude&lt;/code&gt; may be used to retrieve climate data variables from a host of data sources.&lt;/p&gt;
&lt;h4 id=&#34;locations&#34;&gt;Locations&lt;/h4&gt;
&lt;p&gt;Looking at our data, we notice that it comes at distinct stations. Let&amp;rsquo;s visualise where they are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;leaflet&amp;quot;)
Plot_df &amp;lt;- Sparrows_df[, c(&amp;quot;Longitude&amp;quot;, &amp;quot;Latitude&amp;quot;, &amp;quot;Index&amp;quot;, &amp;quot;Climate&amp;quot;, &amp;quot;Population.Status&amp;quot;)]
Plot_df &amp;lt;- unique(Plot_df)
m &amp;lt;- leaflet()
m &amp;lt;- addTiles(m)
m &amp;lt;- addMarkers(m,
  lng = Plot_df$Longitude,
  lat = Plot_df$Latitude,
  label = Plot_df$Index,
  popup = paste(Plot_df$Population.Status, Plot_df$Climate, sep = &amp;quot;;&amp;quot;)
)
m
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-{=html}&#34;&gt;&amp;lt;div class=&amp;quot;leaflet html-widget html-fill-item-overflow-hidden html-fill-item&amp;quot; id=&amp;quot;htmlwidget-198293ac646900c5a74e&amp;quot; style=&amp;quot;width:1440px;height:768px;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type=&amp;quot;application/json&amp;quot; data-for=&amp;quot;htmlwidget-198293ac646900c5a74e&amp;quot;&amp;gt;{&amp;quot;x&amp;quot;:{&amp;quot;options&amp;quot;:{&amp;quot;crs&amp;quot;:{&amp;quot;crsClass&amp;quot;:&amp;quot;L.CRS.EPSG3857&amp;quot;,&amp;quot;code&amp;quot;:null,&amp;quot;proj4def&amp;quot;:null,&amp;quot;projectedBounds&amp;quot;:null,&amp;quot;options&amp;quot;:{}}},&amp;quot;calls&amp;quot;:[{&amp;quot;method&amp;quot;:&amp;quot;addTiles&amp;quot;,&amp;quot;args&amp;quot;:[&amp;quot;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&amp;quot;,null,null,{&amp;quot;minZoom&amp;quot;:0,&amp;quot;maxZoom&amp;quot;:18,&amp;quot;tileSize&amp;quot;:256,&amp;quot;subdomains&amp;quot;:&amp;quot;abc&amp;quot;,&amp;quot;errorTileUrl&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;tms&amp;quot;:false,&amp;quot;noWrap&amp;quot;:false,&amp;quot;zoomOffset&amp;quot;:0,&amp;quot;zoomReverse&amp;quot;:false,&amp;quot;opacity&amp;quot;:1,&amp;quot;zIndex&amp;quot;:1,&amp;quot;detectRetina&amp;quot;:false,&amp;quot;attribution&amp;quot;:&amp;quot;&amp;amp;copy; &amp;lt;a href=\&amp;quot;https://openstreetmap.org\&amp;quot;&amp;gt;OpenStreetMap&amp;lt;\/a&amp;gt; contributors, &amp;lt;a href=\&amp;quot;https://creativecommons.org/licenses/by-sa/2.0/\&amp;quot;&amp;gt;CC-BY-SA&amp;lt;\/a&amp;gt;&amp;quot;}]},{&amp;quot;method&amp;quot;:&amp;quot;addMarkers&amp;quot;,&amp;quot;args&amp;quot;:[[60,54,-25,-21.1,70,55,31,17.25,4,10.5,-51.75],[100,-2,135,55.6,-90,-97,-92,-88.75,-53,-67,-59.17],null,null,null,{&amp;quot;interactive&amp;quot;:true,&amp;quot;draggable&amp;quot;:false,&amp;quot;keyboard&amp;quot;:true,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;zIndexOffset&amp;quot;:0,&amp;quot;opacity&amp;quot;:1,&amp;quot;riseOnHover&amp;quot;:false,&amp;quot;riseOffset&amp;quot;:250},[&amp;quot;Native;Continental&amp;quot;,&amp;quot;Native;Coastal&amp;quot;,&amp;quot;Introduced;Continental&amp;quot;,&amp;quot;Introduced;Coastal&amp;quot;,&amp;quot;Introduced;Coastal&amp;quot;,&amp;quot;Introduced;Semi-Coastal&amp;quot;,&amp;quot;Introduced;Coastal&amp;quot;,&amp;quot;Introduced;Coastal&amp;quot;,&amp;quot;Introduced;Coastal&amp;quot;,&amp;quot;Introduced;Coastal&amp;quot;,&amp;quot;Introduced;Coastal&amp;quot;],null,null,null,[&amp;quot;SI&amp;quot;,&amp;quot;UK&amp;quot;,&amp;quot;AU&amp;quot;,&amp;quot;RE&amp;quot;,&amp;quot;NU&amp;quot;,&amp;quot;MA&amp;quot;,&amp;quot;LO&amp;quot;,&amp;quot;BE&amp;quot;,&amp;quot;FG&amp;quot;,&amp;quot;SA&amp;quot;,&amp;quot;FI&amp;quot;],{&amp;quot;interactive&amp;quot;:false,&amp;quot;permanent&amp;quot;:false,&amp;quot;direction&amp;quot;:&amp;quot;auto&amp;quot;,&amp;quot;opacity&amp;quot;:1,&amp;quot;offset&amp;quot;:[0,0],&amp;quot;textsize&amp;quot;:&amp;quot;10px&amp;quot;,&amp;quot;textOnly&amp;quot;:false,&amp;quot;className&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;sticky&amp;quot;:true},null]}],&amp;quot;limits&amp;quot;:{&amp;quot;lat&amp;quot;:[-51.75,70],&amp;quot;lng&amp;quot;:[-97,135]}},&amp;quot;evals&amp;quot;:[],&amp;quot;jsHooks&amp;quot;:[]}&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you can zoom and drag the above map as well as click the station markers for some additional information.&lt;/p&gt;
&lt;h3 id=&#34;adding-information&#34;&gt;Adding Information&lt;/h3&gt;
&lt;p&gt;How do we get the data for this? Well, I wrote an &lt;code&gt;R&lt;/code&gt;-Package that does exactly that.&lt;/p&gt;
&lt;p&gt;First, said package needs to be installed from my GitHub repository for it. Subsequently, we need to set API Key and User number obtained at the 
&lt;a href=&#34;https://cds.climate.copernicus.eu/api-how-to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Climate Data Store&lt;/a&gt;. I have already baked these into my material, so I don&amp;rsquo;t set them here, but include lines of code that ask you for your credentials when copy &amp;amp; pasted over:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (&amp;quot;KrigR&amp;quot; %in% rownames(installed.packages()) == FALSE) { # KrigR check
  Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS = &amp;quot;true&amp;quot;)
  devtools::install_github(&amp;quot;https://github.com/ErikKusch/KrigR&amp;quot;)
}
library(KrigR)
#### CDS API (needed for ERA5-Land downloads)
if (!exists(&amp;quot;API_Key&amp;quot;) | !exists(&amp;quot;API_User&amp;quot;)) { # CS API check: if CDS API credentials have not been specified elsewhere
  API_User &amp;lt;- readline(prompt = &amp;quot;Please enter your Climate Data Store API user number and hit ENTER.&amp;quot;)
  API_Key &amp;lt;- readline(prompt = &amp;quot;Please enter your Climate Data Store API key number and hit ENTER.&amp;quot;)
} # end of CDS API check

#### NUMBER OF CORES
if (!exists(&amp;quot;numberOfCores&amp;quot;)) { # Core check: if number of cores for parallel processing has not been set yet
  numberOfCores &amp;lt;- readline(prompt = paste(&amp;quot;How many cores do you want to allocate to these processes? Your machine has&amp;quot;, parallel::detectCores()))
} # end of Core check
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the package, we can download some state-of-the-art climate data. I have already prepared all of this in the data directory you downloaded earlier so this step will automatically be skipped:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!file.exists(file.path(&amp;quot;Data&amp;quot;, &amp;quot;SparrowDataClimate.rds&amp;quot;))) {
  colnames(Plot_df)[1:3] &amp;lt;- c(&amp;quot;Lon&amp;quot;, &amp;quot;Lat&amp;quot;, &amp;quot;ID&amp;quot;) # set column names to be in line with what KrigR wants
  Points_Raw &amp;lt;- download_ERA(
    Variable = &amp;quot;2m_temperature&amp;quot;,
    DataSet = &amp;quot;era5&amp;quot;,
    DateStart = &amp;quot;1982-01-01&amp;quot;,
    DateStop = &amp;quot;2012-12-31&amp;quot;,
    TResolution = &amp;quot;month&amp;quot;,
    TStep = 1,
    Extent = Plot_df, # the point data with Lon and Lat columns
    Buffer = 0.5, # a 0.5 degree buffer should be drawn around each point
    ID = &amp;quot;ID&amp;quot;, # this is the column which holds point IDs
    API_User = API_User,
    API_Key = API_Key,
    Dir = file.path(getwd(), &amp;quot;Data&amp;quot;),
    FileName = &amp;quot;AT_Climatology.nc&amp;quot;
  )
  Points_mean &amp;lt;- calc(Points_Raw, fun = mean)
  Points_sd &amp;lt;- calc(Points_Raw, fun = sd)
  Sparrows_df$TAvg &amp;lt;- as.numeric(extract(x = Points_mean, y = Sparrows_df[, c(&amp;quot;Longitude&amp;quot;, &amp;quot;Latitude&amp;quot;)], buffer = 0.3))
  Sparrows_df$TSD &amp;lt;- as.numeric(extract(x = Points_sd, y = Sparrows_df[, c(&amp;quot;Longitude&amp;quot;, &amp;quot;Latitude&amp;quot;)], buffer = 0.3))
  saveRDS(Sparrows_df, file.path(&amp;quot;Data&amp;quot;, &amp;quot;SparrowDataClimate.rds&amp;quot;))
} else {
  Sparrows_df &amp;lt;- readRDS(file.path(&amp;quot;Data&amp;quot;, &amp;quot;SparrowDataClimate.rds&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have now effectively added two more variables to the data set:&lt;/p&gt;
&lt;ol start=&#34;19&#34;&gt;
&lt;li&gt;&lt;code&gt;TAvg&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - Average air temperature for a 30-year time-period&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TSD&lt;/code&gt; [&lt;em&gt;Numeric&lt;/em&gt;] - Standard deviation of mean monthly air temperature for a 30-year time-period&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we have the data set we will look at for the rest of the exercises in this seminar series. But how did we get here? Find the answer &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/data-handling-and-data-assumptions/&#34; target=&#34;_blank&#34;&gt; here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;hypotheses&#34;&gt;Hypotheses&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s consider the following two hypotheses for our exercises for this simulated research project:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Sparrow Morphology&lt;/strong&gt; is determined by:&lt;br&gt;
A. &lt;em&gt;Climate Conditions&lt;/em&gt; with sparrows in stable, warm environments fairing better than those in colder, less stable ones.&lt;br&gt;
B. &lt;em&gt;Competition&lt;/em&gt; with sparrows in small flocks doing better than those in big flocks.&lt;br&gt;
C. &lt;em&gt;Predation&lt;/em&gt; with sparrows under pressure of predation doing worse than those without.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sites&lt;/strong&gt;  accurately represent &lt;strong&gt;sparrow morphology&lt;/strong&gt;. This may mean:&lt;br&gt;
A. &lt;em&gt;Population status&lt;/em&gt; as inferred through morphology.&lt;br&gt;
B. &lt;em&gt;Site index&lt;/em&gt; as inferred through morphology.&lt;br&gt;
C. &lt;em&gt;Climate&lt;/em&gt; as inferred through morphology.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We try to answer these over the next few sessions.&lt;/p&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.2.3 (2023-03-15)
## Platform: x86_64-apple-darwin17.0 (64-bit)
## Running under: macOS Big Sur ... 10.16
## 
## Matrix products: default
## BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] parallel  stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] KrigR_0.1.2       terra_1.7-21      httr_1.4.5        stars_0.6-0       abind_1.4-5       fasterize_1.0.4   sf_1.0-12         lubridate_1.9.2   automap_1.1-9     doSNOW_1.0.20    
## [11] snow_0.4-4        doParallel_1.0.17 iterators_1.0.14  foreach_1.5.2     rgdal_1.6-5       raster_3.6-20     sp_1.6-0          stringr_1.5.0     keyring_1.3.1     ecmwfr_1.5.0     
## [21] ncdf4_1.21        leaflet_2.1.2    
## 
## loaded via a namespace (and not attached):
##  [1] xts_0.13.0         R.cache_0.16.0     tools_4.2.3        bslib_0.4.2        utf8_1.2.3         R6_2.5.1           KernSmooth_2.23-20 DBI_1.1.3          colorspace_2.1-0   tidyselect_1.2.0  
## [11] compiler_4.2.3     cli_3.6.0          gstat_2.1-0        bookdown_0.33      sass_0.4.5         scales_1.2.1       classInt_0.4-9     proxy_0.4-27       digest_0.6.31      rmarkdown_2.20    
## [21] R.utils_2.12.2     pkgconfig_2.0.3    htmltools_0.5.4    styler_1.9.1       fastmap_1.1.1      htmlwidgets_1.6.1  rlang_1.0.6        rstudioapi_0.14    FNN_1.1.3.2        jquerylib_0.1.4   
## [31] generics_0.1.3     zoo_1.8-11         jsonlite_1.8.4     crosstalk_1.2.0    dplyr_1.1.0        R.oo_1.25.0        magrittr_2.0.3     Rcpp_1.0.10        munsell_0.5.0      fansi_1.0.4       
## [41] lifecycle_1.0.3    R.methodsS3_1.8.2  stringi_1.7.12     yaml_2.3.7         plyr_1.8.8         grid_4.2.3         lattice_0.20-45    knitr_1.42         pillar_1.8.1       spacetime_1.2-8   
## [51] codetools_0.2-19   glue_1.6.2         evaluate_0.20      blogdown_1.16      vctrs_0.5.2        gtable_0.3.1       purrr_1.0.1        reshape_0.8.9      assertthat_0.2.1   cachem_1.0.7      
## [61] ggplot2_3.4.1      xfun_0.37          lwgeom_0.2-11      e1071_1.7-13       class_7.3-21       tibble_3.2.0       intervals_0.15.3   memoise_2.0.1      units_0.8-1        timechange_0.2.0  
## [71] ellipsis_0.3.2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Data Handling and Data Assumptions</title>
      <link>https://www.erikkusch.com/courses/excursions-into-biostatistics/data-handling-and-data-assumptions/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/excursions-into-biostatistics/data-handling-and-data-assumptions/</guid>
      <description>&lt;h2 id=&#34;theory&#34;&gt;Theory&lt;/h2&gt;
&lt;p&gt;These are exercises and solutions meant as a compendium to my talk on Model Selection and Model Building.&lt;/p&gt;
&lt;p&gt;I have prepared some &lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/ErikKusch/Homepage/blob/master/static/courses/Excursions-into-Biostatistics/Data-Handling-and-Assumptions---Making-the-Most-of-Your-Data.html&#34; target=&#34;_blank&#34;&gt; Lecture Slides &lt;/a&gt; for this session.&lt;/p&gt;
&lt;h2 id=&#34;exercise&#34;&gt;Exercise&lt;/h2&gt;
&lt;p&gt;First, imagine we have been out and about collecting samples for our sparrow populations. You can find the data came home with after our field work season &lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/excursions-into-biostatistics/Data.rar&#34; target=&#34;_blank&#34;&gt; here&lt;/a&gt;. This data set contains errors/mis-specified data entry and other slip-ups that can happen as a part of data collection exercises. We need to fix that.&lt;/p&gt;
&lt;h3 id=&#34;preparing-our-procedure&#34;&gt;Preparing Our Procedure&lt;/h3&gt;
&lt;p&gt;The following three sections are what I consider to be &lt;em&gt;essential&lt;/em&gt; parts of the preamble to any &lt;code&gt;R&lt;/code&gt;-based analysis. I highly recommend clearly indicating these bits in your code.&lt;/p&gt;
&lt;p&gt;More often than not, you will use variations of these code chunks whether you are working on data handling, data exploration or full-fledged statistical analyses.&lt;/p&gt;
&lt;h3 id=&#34;necessary-steps-for-reproducibility&#34;&gt;Necessary Steps For Reproducibility&lt;/h3&gt;
&lt;p&gt;Reproducibility is the be-all and end-all of any statistical analysis, particularly in light of the peer-review process in life sciences.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rm(list = ls()) # clearing environment
Dir.Base &amp;lt;- getwd() # soft-coding our working directory
Dir.Data &amp;lt;- paste(Dir.Base, &amp;quot;Data&amp;quot;, sep = &amp;quot;/&amp;quot;) # soft-coding our data directory
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you get into highly complex statistical analyses, you may wish to break up chunks of your analysis into separate documents. To ensure that remnants of an earlier analysis or analysis chunk do not influence the results of your current analysis, you may wish to &lt;em&gt;empty&lt;/em&gt; &lt;code&gt;R&lt;/code&gt;&amp;rsquo;s cache (&lt;em&gt;Environment&lt;/em&gt;) before attempting a new analysis. This is achieved via the command &lt;code&gt;rm(list=ls())&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, you &lt;em&gt;need&lt;/em&gt; to remember the importance of &lt;em&gt;soft-coding&lt;/em&gt; for the sake of reproducibility. One of the worst offences to the peer-review process in &lt;code&gt;R&lt;/code&gt;-based statistics is the erroneous hard-coding of the working directory. The &lt;code&gt;getwd()&lt;/code&gt; function shown above solves this exact problem. However, for this workaround to function properly you need to open the code document of interest by double-clicking it within its containing folder.&lt;/p&gt;
&lt;p&gt;When using the &lt;code&gt;xlsx&lt;/code&gt; package or any &lt;em&gt;Excel&lt;/em&gt;-reliant process via &lt;code&gt;R&lt;/code&gt;, your code will automatically run a Java process in the background. By default the Java engine is limited as far as RAM allocation goes and tends to fail when faced with enormous data sets. The workaround &lt;code&gt;options(java.parameters = &amp;quot;-Xmx8g&amp;quot;)&lt;/code&gt; gets rid of this issue by allocation 8 GBs of RAM to Java.&lt;/p&gt;
&lt;h3 id=&#34;packages&#34;&gt;Packages&lt;/h3&gt;
&lt;p&gt;Packages are &lt;code&gt;R&lt;/code&gt;&amp;rsquo;s way of giving you access to a seemingly infinite repository of functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# function to load packages and install them if they haven&#39;t been installed yet
install.load.package &amp;lt;- function(x) {
  if (!require(x, character.only = TRUE)) {
    install.packages(x)
  }
  require(x, character.only = TRUE)
}
package_vec &amp;lt;- c(
  &amp;quot;dplyr&amp;quot; # we need this package to fix the most common data errors
)
sapply(package_vec, install.load.package)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## dplyr 
##  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the above function is way more sophisticated than the usual &lt;code&gt;install.packages()&lt;/code&gt; + &lt;code&gt;library()&lt;/code&gt; approach since it automatically detects which packages require installing and only install these thus not overwriting already installed packages.&lt;/p&gt;
&lt;h3 id=&#34;loading-the-data&#34;&gt;Loading The Data&lt;/h3&gt;
&lt;p&gt;Loading data is crucial to any analysis in &lt;code&gt;R&lt;/code&gt;. Period.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;R&lt;/code&gt; offers a plethora of approaches to data loading and you will usually be taught the &lt;code&gt;read.table()&lt;/code&gt; command in basic biostatistics courses. However, I have found to prefer the functionality provided by the &lt;code&gt;xlsx&lt;/code&gt; package since most data recording is taking place in Excel. As this package is dependant on the installation of Java and &lt;code&gt;RJava&lt;/code&gt;, we will settle on the base &lt;code&gt;R&lt;/code&gt; function &lt;code&gt;read.csv()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Data_df_base &amp;lt;- read.csv(file = paste(Dir.Data, &amp;quot;/SparrowData.csv&amp;quot;, sep = &amp;quot;&amp;quot;), header = TRUE)
Data_df &amp;lt;- Data_df_base # duplicate and save initial data on a new object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another trick to have up your sleeve (if your RAM enables you to act on it) is to duplicate your initial data onto a new object once loaded into &lt;code&gt;R&lt;/code&gt;. This will enable you to easily remedy mistakes in data treatment without having to reload your initial data set from the data file.&lt;/p&gt;
&lt;h2 id=&#34;inspecting-the-data&#34;&gt;Inspecting The Data&lt;/h2&gt;
&lt;p&gt;Once the data is loaded into &lt;code&gt;R&lt;/code&gt;, you &lt;em&gt;need to inspect&lt;/em&gt; it to make sure it is ready for use.&lt;/p&gt;
&lt;h3 id=&#34;assessing-a-data-frame-in-r&#34;&gt;Assessing A Data Frame in &lt;code&gt;R&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Most, if not all, data you will ever load into &lt;code&gt;R&lt;/code&gt; will be stored as a &lt;code&gt;data.frame&lt;/code&gt; within &lt;code&gt;R&lt;/code&gt;. Some of the most important functions for inspecting data frames (&amp;ldquo;df&amp;rdquo; in the following) in base &lt;code&gt;R&lt;/code&gt; are the following four:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dim(df)&lt;/code&gt; returns the dimensions (Rows x Columns)of the data frame&lt;/li&gt;
&lt;li&gt;&lt;code&gt;head(df)&lt;/code&gt; returns the first 6 rows of the data frame by default (here changed to 4)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tail(df)&lt;/code&gt; returns the last 6 rows of the data frame by default (here changed to 4)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;View(df)&lt;/code&gt; opens nearly any &lt;code&gt;R&lt;/code&gt; object in a separate tab for further inspection. Since we are dealing with an enormous data set here, I will exclude this function for now to save you from printing unnecessary pages.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dim(Data_df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1068   21
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(Data_df, n = 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   X    Site Index Latitude Longitude     Climate Population.Status Weight Height Wing.Chord Colour    Sex Nesting.Site Nesting.Height Number.of.Eggs Egg.Weight Flock Home.Range Flock.Size
## 1 1 Siberia    SI       60       100 Continental            Native  34,05  12.87       6.67  Brown   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large         16
## 2 2 Siberia    SI       60       100 Continental            Native  34,86  13.68       6.79   Grey   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large         16
## 3 3 Siberia    SI       60       100 Continental            Native  32,34  12.66       6.64  Black Female        Shrub           35.6              1       3.21     C      Large         14
## 4 4 Siberia    SI       60       100 Continental            Native  34,78  15.09       7.00  Brown Female        Shrub          47.75              0         NA     E      Large         10
##   Predator.Presence Predator.Type
## 1               Yes         Avian
## 2               Yes         Avian
## 3               Yes         Avian
## 4               Yes         Avian
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tail(Data_df, n = 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         X           Site Index Latitude Longitude Climate Population.Status Weight Height Wing.Chord Colour  Sex Nesting.Site Nesting.Height Number.of.Eggs Egg.Weight Flock Home.Range Flock.Size
## 1065 1065 Falkland Isles    FI   -51.75    -59.17 Coastal        Introduced  34.25  15.26       7.04   Grey Male                                                           A      Large         19
## 1066 1066 Falkland Isles    FI   -51.75    -59.17 Coastal        Introduced  31.76  12.78       6.67   Grey Male                                                           A      Large         19
## 1067 1067 Falkland Isles    FI   -51.75    -59.17 Coastal        Introduced  31.48  12.49       6.63  Black Male                                                           C      Large         18
## 1068 1068 Falkland Isles    FI   -51.75    -59.17 Coastal        Introduced  31.94  12.96       6.70   Grey Male                                                           A      Large         19
##      Predator.Presence Predator.Type
## 1065               Yes         Avian
## 1066               Yes         Avian
## 1067               Yes         Avian
## 1068               Yes         Avian
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When having an initial look at the results of &lt;code&gt;head(Data_df)&lt;/code&gt; and &lt;code&gt;tail(Data_df)&lt;/code&gt; we can spot two important things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NA&lt;/code&gt;s in head and tail of our data set are stored differently. This is a common problem with biological data sets and we will deal with this issue extensively in the next few sections of this document.&lt;/li&gt;
&lt;li&gt;Due to our data loading procedure we ended up with a redundant first column that is simply showing the respective row numbers. However, this is unnecessary in &lt;code&gt;R&lt;/code&gt; and so we can delete this column as seen below.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Data_df &amp;lt;- Data_df[, -1] # eliminating the erroneous first column as it is redundant
dim(Data_df) # checking if the elimination went right
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1068   20
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;the-summary-function&#34;&gt;The &lt;code&gt;Summary()&lt;/code&gt; Function&lt;/h3&gt;
&lt;p&gt;As already stated in our seminar series, the &lt;code&gt;summary()&lt;/code&gt; function is &lt;em&gt;invaluable&lt;/em&gt; to data exploration and data inspection. However, it is only partially applicable as it will not work flawlessly on every class of data. Examples of this are shown below.&lt;/p&gt;
&lt;p&gt;The weight data contained within our data frame should be numeric and thus pose no issue to the &lt;code&gt;summary()&lt;/code&gt; function. However, as shown in the next section, it is currently of type character which leads the &lt;code&gt;summary()&lt;/code&gt; function to work improperly.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Weight)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1068 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The height data within our data set, on the other hand, is stored correctly as class numeric. Thus the &lt;code&gt;summary()&lt;/code&gt; function performs flawlessly.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Height)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##    1.35   13.52   14.52   15.39   16.22  135.40
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Making data inspection more easy, one may which to automate the use of the &lt;code&gt;summary()&lt;/code&gt; function. However, this only makes sense, when every data column is presenting data in the correct class type. Therefore, we will first fix the column classes and then use the &lt;code&gt;summary()&lt;/code&gt; command.&lt;/p&gt;
&lt;h2 id=&#34;data-cleaning-workflow&#34;&gt;Data Cleaning Workflow&lt;/h2&gt;
&lt;h3 id=&#34;identifying-problems&#34;&gt;Identifying Problems&lt;/h3&gt;
&lt;p&gt;Indentifying most problems in any data set you may ever encounter comes down to mostly two manifestations of inadequate data entry or handling:&lt;/p&gt;
&lt;p&gt;**1. Types/Classes  **&lt;br&gt;
Before even opening a data set, we should know what kind of data classes we expect for every variable (for example, height records as a &lt;code&gt;factor&lt;/code&gt; don&amp;rsquo;t make much sense). Problems with data/variable classes can have lasting influence on your analyses and so we need to test the class for each variable (column) individually. Before we alter any column classes, we will first need to identify columns whose classes need fixing. Doing so is as easy applying the &lt;code&gt;class()&lt;/code&gt; function to the data contained within every column of our data frame separately.&lt;br&gt;
&lt;code&gt;R&lt;/code&gt; offers multiple functions for this but I find the &lt;code&gt;lapply()&lt;/code&gt; function to perform flawlessly as shown below. Since &lt;code&gt;lapply()&lt;/code&gt; returns a &lt;code&gt;list&lt;/code&gt; of class identifiers and these don&amp;rsquo;t translate well to paper, I have opted to transform the list into a named character vector using the &lt;code&gt;unlist()&lt;/code&gt; command. One could also use the &lt;code&gt;str()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unlist(lapply(Data_df, class))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              Site             Index          Latitude         Longitude           Climate Population.Status            Weight            Height        Wing.Chord            Colour               Sex 
##       &amp;quot;character&amp;quot;       &amp;quot;character&amp;quot;         &amp;quot;numeric&amp;quot;         &amp;quot;numeric&amp;quot;       &amp;quot;character&amp;quot;       &amp;quot;character&amp;quot;       &amp;quot;character&amp;quot;         &amp;quot;numeric&amp;quot;         &amp;quot;numeric&amp;quot;       &amp;quot;character&amp;quot;       &amp;quot;character&amp;quot; 
##      Nesting.Site    Nesting.Height    Number.of.Eggs        Egg.Weight             Flock        Home.Range        Flock.Size Predator.Presence     Predator.Type 
##       &amp;quot;character&amp;quot;       &amp;quot;character&amp;quot;       &amp;quot;character&amp;quot;       &amp;quot;character&amp;quot;       &amp;quot;character&amp;quot;       &amp;quot;character&amp;quot;         &amp;quot;integer&amp;quot;       &amp;quot;character&amp;quot;       &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For further inspection, one may want to combine the information obtained by using the &lt;code&gt;class()&lt;/code&gt; function with either the &lt;code&gt;summary()&lt;/code&gt; function (for all non-numeric records) or the &lt;code&gt;hist&lt;/code&gt; function (particularly useful for numeric records).&lt;/p&gt;
&lt;p&gt;**2. Contents/Values  **&lt;br&gt;
Typos and the like will always lead to some data that simply doesn&amp;rsquo;t make sense given the context of your project. Sometimes, errors like these are salvageable but doing so can be a very difficult process. Before we alter any column contents, we will first need to identify columns whose contents need fixing, however. Doing so is as easy applying an automated version of &lt;code&gt;summary()&lt;/code&gt; to the data contained within every column of our data frame separately after having fixed possibly erroneous data classes.&lt;/p&gt;
&lt;h3 id=&#34;fixing-the-problems&#34;&gt;Fixing The Problems&lt;/h3&gt;
&lt;p&gt;Fixing the problems in our data sets always comes down to altering data classes, altering faulty values or removing them entirely.&lt;br&gt;
To make sure we fix all problems, we may often wish to enlist the &lt;code&gt;summary()&lt;/code&gt; function as well as the &lt;code&gt;hist()&lt;/code&gt; function for data inspection and visualisation.&lt;/p&gt;
&lt;p&gt;Before we alter any column contents, we will first need to identify columns whose contents need fixing.&lt;/p&gt;
&lt;!-- Doing so is as easy applying an automated version of `summary()` to the data contained within every column of our data frame separately which is now possible since we have fixed the column types.   --&gt;
&lt;!-- The code below does exactly that: --&gt;
&lt;!-- ```{r ColContProblems} --&gt;
&lt;!-- for(i in 1:dim(Data_df)[2]){ --&gt;
&lt;!--   print(colnames(Data_df)[i]) --&gt;
&lt;!--   print(summary(Data_df[,i])) --&gt;
&lt;!--   print(&#34;------------------------------------------------------&#34;) --&gt;
&lt;!-- } --&gt;
&lt;!-- ``` --&gt;
&lt;!-- There are some glaring issues her which we will address in the following sections. --&gt;
&lt;h2 id=&#34;our-data&#34;&gt;Our Data&lt;/h2&gt;
&lt;h3 id=&#34;site&#34;&gt;Site&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;factor&lt;/code&gt; (only 11 possible values)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-1&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Site records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Site)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Site)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1068 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, they do behave just like we&amp;rsquo;d expect them to.&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;We don&amp;rsquo;t need to fix anything here.&lt;/p&gt;
&lt;h3 id=&#34;index&#34;&gt;Index&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;factor&lt;/code&gt; (only 11 possible values)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-2&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Index records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Index)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Index)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1068 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, they do behave just like we&amp;rsquo;d expect them to. Pay attention that thes shortened index numbers lign up with the numbers of site records!&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-1&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;We don&amp;rsquo;t need to fix anything here.&lt;/p&gt;
&lt;p&gt;\newpage&lt;/p&gt;
&lt;h3 id=&#34;latitude&#34;&gt;Latitude&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;numeric&lt;/code&gt; (Latitude is inherently continuous)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-3&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Latitude records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Latitude)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;table(Data_df$Latitude) # use this instead of summary due to station-dependency here
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## -51.75    -25  -21.1      4   10.5  17.25     31     54     55     60     70 
##     69     88     95    250    114    105     81     68     68     66     64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, they do behave just like we&amp;rsquo;d expect them to.&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-2&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;We don&amp;rsquo;t need to fix anything here.&lt;/p&gt;
&lt;h3 id=&#34;longitude&#34;&gt;Longitude&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;numeric&lt;/code&gt; (Longitude is inherently continuous)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-4&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Longitude records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Longitude)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;table(Data_df$Longitude) # use this instead of summary due to station-dependency here
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##    -97    -92    -90 -88.75    -67 -59.17    -53     -2   55.6    100    135 
##     68     81     64    105    114     69    250     68     95     66     88
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, they do behave just like we&amp;rsquo;d expect them to.&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-3&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;We don&amp;rsquo;t need to fix anything here.&lt;/p&gt;
&lt;h3 id=&#34;climate&#34;&gt;Climate&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;factor&lt;/code&gt; (three levels: coastal, semi-coastal, continental)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-5&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Climate records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Climate)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Climate)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1068 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, they do behave just like we&amp;rsquo;d expect them to.&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-4&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;We don&amp;rsquo;t need to fix anything here.&lt;/p&gt;
&lt;h3 id=&#34;population-status&#34;&gt;Population Status&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;factor&lt;/code&gt; (two levels: native, introduced)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-6&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Population Status records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Population.Status)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Population.Status)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1068 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, they do behave just like we&amp;rsquo;d expect them to.&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-5&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;We don&amp;rsquo;t need to fix anything here.&lt;/p&gt;
&lt;h3 id=&#34;weight&#34;&gt;Weight&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;numeric&lt;/code&gt; (weight is a continuous metric)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-7&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Weight records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Weight)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Weight)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1068 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, something is wrong.&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-6&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;As seen above, weight records are currently stored as character which they shouldn&amp;rsquo;t. So how do we fix this?&lt;/p&gt;
&lt;p&gt;Firstly, let&amp;rsquo;s try an intuitive &lt;code&gt;as.numeric()&lt;/code&gt; approach which attempts to convert all values contained within a vector into numeric records.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Data_df$Weight &amp;lt;- as.numeric(Data_df_base$Weight)
summary(Data_df$Weight)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&#39;s 
##   19.38   26.34   30.38   29.40   31.87  420.00      66
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Apparently, this didn&amp;rsquo;t do the trick since weight data values (recorded in g) below 13 and above 40 are highly unlikely for &lt;em&gt;Passer domesticus&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Sometimes, the &lt;code&gt;as.numeric()&lt;/code&gt; can be made more powerful by handing it data of class &lt;code&gt;character&lt;/code&gt;. To do so, simply combine &lt;code&gt;as.numeric()&lt;/code&gt; with &lt;code&gt;as.character()&lt;/code&gt; as shown below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Data_df$Weight &amp;lt;- as.numeric(as.character(Data_df_base$Weight))
summary(Data_df$Weight)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&#39;s 
##   19.38   26.34   30.38   29.40   31.87  420.00      66
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That still didn&amp;rsquo;t resolve our problem. Weight measurements were taken for all study organisms and so there shouldn&amp;rsquo;t be any &lt;code&gt;NA&lt;/code&gt;s and yet we find 66.&lt;/p&gt;
&lt;p&gt;Interestingly enough this is the exact same number as observations available for Siberia. A closer look at the data frame shows us that weight data for Siberia has been recorded with commas as decimal delimiters whilst the rest of the data set utilises dots.&lt;/p&gt;
&lt;p&gt;Fixing this is not necessarily difficult but it is an erroneous issue for data handling which comes up often and is easy to avoid. Getting rid of the flaws is as simple as using the &lt;code&gt;gsub()&lt;/code&gt; function contained within the &lt;code&gt;dplyr&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Data_df$Weight &amp;lt;- as.numeric(gsub(pattern = &amp;quot;,&amp;quot;, replacement = &amp;quot;.&amp;quot;, x = Data_df_base$Weight))
summary(Data_df$Weight)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   19.38   27.90   30.63   29.69   32.24  420.00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is one data record left hat exceeds the biologically viable span for body weight records of &lt;em&gt;Passer domesticus&lt;/em&gt;. This data record holds the value 420. Since this is unlikely to be a simple mistake of placing the decimal delimiter in the wrong place (both 4.2 and 42 grams are also not feasible weight records for house sparrows), we have to delete the weight data record in question:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Data_df$Weight[which(Data_df_base$Weight == 420)] &amp;lt;- NA
summary(Data_df$Weight)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&#39;s 
##   19.38   27.89   30.63   29.33   32.23   36.66       1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hist(Data_df$Weight, breaks = 100)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;4_Data-Handling-and-Assumptions---Making-the-Most-of-Your-Data_files/figure-html/ColContWeight-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We finally fixed it!&lt;/p&gt;
&lt;h3 id=&#34;height&#34;&gt;Height&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;numeric&lt;/code&gt; (height is a continuous metric)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-8&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Height records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Height)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Height)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##    1.35   13.52   14.52   15.39   16.22  135.40
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, some of our data don&amp;rsquo;t behave the way the should (a 135.4 or  1.35 cm tall sparrow are just absurd).&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-7&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;Height (or &amp;ldquo;Length&amp;rdquo;) records of &lt;em&gt;Passer domesticus&lt;/em&gt; should fall roughly between 10cm and 22cm. Looking at the data which exceed these thresholds, it is apparent that these are generated simply through misplaced decimal delimiters. So we fix them as follows and use a histogram to check if it worked.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Data_df$Height[which(Data_df$Height &amp;lt; 10)] # decimal point placed wrong here
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.350 1.446
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Data_df$Height[which(Data_df$Height &amp;lt; 10)] &amp;lt;- Data_df$Height[which(Data_df$Height &amp;lt; 10)] * 10 # FIXED IT!
Data_df$Height[which(Data_df$Height &amp;gt; 22)] # decimal point placed wrong here
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 126.7 135.4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Data_df$Height[which(Data_df$Height &amp;gt; 22)] &amp;lt;- Data_df$Height[which(Data_df$Height &amp;gt; 22)] / 10 # FIXED IT!
summary(Data_df$Height)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   11.09   13.52   14.51   15.20   16.20   21.68
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hist(Data_df$Height, breaks = 100)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;4_Data-Handling-and-Assumptions---Making-the-Most-of-Your-Data_files/figure-html/ColContHeight-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We finally fixed it!&lt;/p&gt;
&lt;h3 id=&#34;wing-chord&#34;&gt;Wing Chord&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;numeric&lt;/code&gt; (wing chord is a continuous metric)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-9&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Wing Chord records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Wing.Chord)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Wing.Chord)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   6.410   6.840   7.050   7.337   7.400   9.000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, they do behave just like we&amp;rsquo;d expect them to.&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-8&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;We don&amp;rsquo;t need to fix anything here.&lt;/p&gt;
&lt;h3 id=&#34;colour&#34;&gt;Colour&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;factor&lt;/code&gt; (three levels: black, grey, brown)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-10&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Colour records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Colour)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Colour)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1068 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some of the colour records are very odd.&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-9&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;The colour records &amp;ldquo;Bright black&amp;rdquo; and &amp;ldquo;Grey with black spots&amp;rdquo; should be &amp;ldquo;Grey&amp;rdquo;. Someone clearly got too eager on the assignment of colours here. The fix is as easy as identifying the data records which are &amp;ldquo;too precise&amp;rdquo; and overwrite them with the correct assignment:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Data_df$Colour[which(Data_df$Colour == &amp;quot;Bright black&amp;quot;)] &amp;lt;- &amp;quot;Grey&amp;quot;
Data_df$Colour[which(Data_df$Colour == &amp;quot;Grey with black spots&amp;quot;)] &amp;lt;- &amp;quot;Grey&amp;quot;
Data_df$Colour &amp;lt;- droplevels(factor(Data_df$Colour)) # drop unused factor levels
summary(Data_df$Colour) # FIXED IT!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Black Brown  Grey 
##   356   298   414
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We finally fixed it!&lt;/p&gt;
&lt;h3 id=&#34;sex&#34;&gt;Sex&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;factor&lt;/code&gt; (two levels: male and female)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-11&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Climate records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Sex)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Sex)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1068 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, they do behave just like we&amp;rsquo;d expect them to.&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-10&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;We don&amp;rsquo;t need to fix anything here.&lt;/p&gt;
&lt;h3 id=&#34;nesting-site&#34;&gt;Nesting Site&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;factor&lt;/code&gt; (two levels: shrub and tree)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-12&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Nesting Site records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Nesting.Site)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Nesting.Site)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1068 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;fixing-problems-11&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;One individual is recording to be nesting on the ground. This is something house sparrows don&amp;rsquo;t do. Therefore, we have to assume that this individual is not even a &lt;em&gt;Passer domesticus&lt;/em&gt; to begin with.&lt;/p&gt;
&lt;p&gt;The only way to solve this is to remove all observations pertaining to this individual:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Data_df &amp;lt;- Data_df[-which(Data_df$Nesting.Site == &amp;quot;Ground&amp;quot;), ]
summary(Data_df$Nesting.Site)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1067 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We just deleted a data record. This affects the flock size of the flock it belongs to (basically, this column contains hard-coded values) which we are going to deal with later.&lt;br&gt;
Still, there are manually entered &lt;code&gt;NA&lt;/code&gt; records present which we have to get rid of. These can be fixed easily without altering column classes and simply making use of logic by indexing their dependencies on other column values. The nesting site for a data record where sex reads &amp;ldquo;Male&amp;rdquo; has to be &lt;code&gt;NA&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Data_df$Nesting.Site[which(Data_df$Sex == &amp;quot;Male&amp;quot;)] &amp;lt;- NA
Data_df$Nesting.Site &amp;lt;- droplevels(factor(Data_df$Nesting.Site)) # drop unused factor levels
summary(Data_df$Nesting.Site) # FIXED IT!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Shrub  Tree  NA&#39;s 
##   292   231   544
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;nesting-height&#34;&gt;Nesting Height&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;numeric&lt;/code&gt; (continuous records in two clusters corresponding to shrubs and trees)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-13&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Nesting Height records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Nesting.Height)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Nesting.Height)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1067 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are obviously some issues here.&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-12&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;Nesting height is a clear example of a variable that should be recorded as &lt;code&gt;numeric&lt;/code&gt; and yet our data frame currently stores them as character.&lt;/p&gt;
&lt;p&gt;Our first approach to fixing this, again, is using the &lt;code&gt;as.numeric()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(as.numeric(Data_df$Nesting.Height))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&#39;s 
##   11.78   42.34   64.85  480.59  951.38 1950.86     544
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Clearly, something went horribly wrong here. When taking a closer look, the number of 1s is artificially inflated. This is due to the &lt;code&gt;NA&lt;/code&gt;s contained within the data set. These are currently stored as characters since they have been entered into the Excel sheet itself. The &lt;code&gt;as.numeric()&lt;/code&gt; function transforms these into 1s.&lt;/p&gt;
&lt;p&gt;One way of circumventing this issue is to combine the &lt;code&gt;as.numeric()&lt;/code&gt; function with the &lt;code&gt;as.character()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Data_df$Nesting.Height &amp;lt;- as.numeric(as.character(Data_df$Nesting.Height))
summary(Data_df$Nesting.Height)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&#39;s 
##   11.78   42.34   64.85  480.59  951.38 1950.86     544
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This quite clearly fixed our problems.&lt;/p&gt;
&lt;!-- As can be seen in the histograms below there are now far less erroneously small values. --&gt;
&lt;!-- ```{r plottingpanesNestingHeight, fig.height=2.75} --&gt;
&lt;!-- par(mfrow=c(1,2)) # plotting panes as 1 by 2 --&gt;
&lt;!-- hist(as.numeric(Data_df_base$Nesting.Height), main = &#34;Numeric(Data)&#34;, breaks = 100) --&gt;
&lt;!-- hist(as.numeric(as.character(Data_df_base$Nesting.Height)), main = &#34;Numeric(Character(Data))&#34;, breaks = 100) --&gt;
&lt;!-- ``` --&gt;
&lt;h3 id=&#34;number-of-eggs&#34;&gt;Number of Eggs&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;numeric&lt;/code&gt; (no a priori knowledge of levels)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-14&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Number of Eggs records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Number.of.Eggs)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Number.of.Eggs)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1067 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One very out of the ordinary record is to be seen.&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-13&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;Number of eggs is another variable which should be recorded as &lt;code&gt;numeric&lt;/code&gt; and yet is currently stored as character.&lt;/p&gt;
&lt;p&gt;Our first approach to fixing this, again, is using the &lt;code&gt;as.numeric()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(as.numeric(Data_df$Number.of.Eggs))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&#39;s 
##   0.000   2.000   3.000   3.746   4.000  10.000     544
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, this didn&amp;rsquo;t do the trick. The number of 1s might be inflated and we expect exactly 544 (number of males) &lt;code&gt;NA&lt;/code&gt;s since number of eggs have only been recorded for female house sparrows.&lt;/p&gt;
&lt;p&gt;We already know that improperly stored &lt;code&gt;NA&lt;/code&gt; records are prone to causing an inflation of data records of value 1. We also remember that head and tail of our data frame hold different types of &lt;code&gt;NA&lt;/code&gt; records. Let&amp;rsquo;s find out who entered &lt;code&gt;NA&lt;/code&gt;s correctly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unique(Data_df$Site[which(is.na(Data_df$Egg.Weight))])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## character(0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code above identifies the sites at which proper &lt;code&gt;NA&lt;/code&gt; recording has been done. The Falkland Isle team did it right (&lt;code&gt;NA&lt;/code&gt; fields in Excel were left blank). Fixing this is actually a bit more challenging and so we do the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# make everything into characters
Data_df$Number.of.Eggs &amp;lt;- as.character(Data_df$Number.of.Eggs)
# writing character NA onto actual NAs
Data_df$Number.of.Eggs[which(is.na(Data_df$Number.of.Eggs))] &amp;lt;- &amp;quot;  NA&amp;quot;
# make all character NAs into proper NAs
Data_df$Number.of.Eggs[Data_df$Number.of.Eggs == &amp;quot;  NA&amp;quot;] &amp;lt;- NA
# make everything numeric
Data_df$Number.of.Eggs &amp;lt;- as.numeric(as.character(Data_df$Number.of.Eggs))
summary(Data_df$Number.of.Eggs)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&#39;s 
##   0.000   2.000   3.000   3.746   4.000  10.000     544
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We did it!&lt;/p&gt;
&lt;h3 id=&#34;egg-weight&#34;&gt;Egg Weight&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;numeric&lt;/code&gt; (another weight measurement that needs to be continuous)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-15&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Egg Weight records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Egg.Weight)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Egg.Weight)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1067 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;fixing-problems-14&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;Egg weight should be recorded as &lt;code&gt;numeric&lt;/code&gt; and yet is currently stored as character. Our first approach to fixing this, again, is using the &lt;code&gt;as.numeric()&lt;/code&gt; function again.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(as.numeric(Data_df$Egg.Weight))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&#39;s 
##   1.580   2.340   2.670   2.619   2.890   3.590     590
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Something is wrong here. Not enough &lt;code&gt;NA&lt;/code&gt;s are recorded. We expect exactly 590 &lt;code&gt;NA&lt;/code&gt;s (Number of males + Number of Females with zero eggs). Additionally, there are way too many 1s.
Our problem, again, lies with the way the &lt;code&gt;NA&lt;/code&gt;s have been entered into the data set from the beginning and so we use the following fix again.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# make everything into characters
Data_df$Egg.Weight &amp;lt;- as.character(Data_df$Egg.Weight)
# writing character NA onto actual NAs
Data_df$Egg.Weight[which(is.na(Data_df$Egg.Weight))] &amp;lt;- &amp;quot;  NA&amp;quot;
# make all character NAs into proper NAs
Data_df$Egg.Weight[Data_df$Egg.Weight == &amp;quot;  NA&amp;quot;] &amp;lt;- NA
# make everything numeric
Data_df$Egg.Weight &amp;lt;- as.numeric(as.character(Data_df$Egg.Weight))
summary(Data_df$Egg.Weight)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&#39;s 
##   1.580   2.340   2.670   2.619   2.890   3.590     590
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;flock&#34;&gt;Flock&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;factor&lt;/code&gt; (each sparrow was assigned to one particular flock)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-16&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Flock records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Flock)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Flock)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1067 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, they do behave just like we&amp;rsquo;d expect them to.&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-15&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;We don&amp;rsquo;t need to fix anything here.&lt;/p&gt;
&lt;h3 id=&#34;home-range&#34;&gt;Home Range&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;factor&lt;/code&gt; (three levels: small, medium, large)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-17&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Home Range records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Home.Range)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Home.Range)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1067 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, they do behave just like we&amp;rsquo;d expect them to.&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-16&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;We don&amp;rsquo;t need to fix anything here.&lt;/p&gt;
&lt;h3 id=&#34;flock-size&#34;&gt;Flock Size&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;numeric&lt;/code&gt; (continuous measurement of how many sparrows are in each flock - measured as integers)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-18&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Flock Size records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Flock.Size)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Flock.Size)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##    7.00   16.00   19.00   25.81   31.00   58.00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, they do behave just like we&amp;rsquo;d expect them to.&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-17&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;We don&amp;rsquo;t need to fix anything here.&lt;/p&gt;
&lt;h3 id=&#34;predator-presence&#34;&gt;Predator Presence&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;factor&lt;/code&gt; (two levels: yes and no)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-19&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Predator Presence records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Predator.Presence)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Predator.Presence)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1067 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indeed, they do behave just like we&amp;rsquo;d expect them to.&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-18&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;We don&amp;rsquo;t need to fix anything here.&lt;/p&gt;
&lt;h3 id=&#34;predator-type&#34;&gt;Predator Type&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable Class Expectation:&lt;/strong&gt; &lt;code&gt;factor&lt;/code&gt; (three levels: Avian, Non-Avian, and &lt;code&gt;NA&lt;/code&gt;)&lt;/p&gt;
&lt;h4 id=&#34;identifying-problems-20&#34;&gt;Identifying Problems&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s asses our Predator Type records for our &lt;em&gt;Passer domesticus&lt;/em&gt; individuals and check whether they behave as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(Data_df$Predator.Type)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(Data_df$Predator.Type)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1067 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Something doesn&amp;rsquo;t sit well here.&lt;/p&gt;
&lt;h4 id=&#34;fixing-problems-19&#34;&gt;Fixing Problems&lt;/h4&gt;
&lt;p&gt;Someone got overly eager when recording Predator Type and specified the presence of a hawk instead of taking down &amp;ldquo;Avian&amp;rdquo;. We fix this as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Data_df$Predator.Type[which(Data_df$Predator.Type == &amp;quot;Hawk&amp;quot;)] &amp;lt;- &amp;quot;Avian&amp;quot;
summary(Data_df$Predator.Type)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Length     Class      Mode 
##      1067 character character
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This fixed it  but there are still manually entered &lt;code&gt;NA&lt;/code&gt; records present which we have to get rid of. These can be fixed easily without altering column classes and simply making use of logic by indexing their dependencies on other column values. The predator type for a data record where predator presence reads &amp;ldquo;No&amp;rdquo; has to be &lt;code&gt;NA&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Data_df$Predator.Type[which(Data_df$Predator.Presence == &amp;quot;No&amp;quot;)] &amp;lt;- NA
Data_df$Predator.Type &amp;lt;- droplevels(factor(Data_df$Predator.Type)) # drop unused factor levels
summary(Data_df$Predator.Type) # FIXED IT!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Avian Non-Avian      NA&#39;s 
##       490       220       357
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;redundant-data&#34;&gt;Redundant Data&lt;/h3&gt;
&lt;p&gt;Our data contains redundant columns (i.e.: columns whose data is present in another column already). These are (1) Flock Size (data contained in Flock column) and (2) Site (data contained in Index column). The fix to this is as easy as removing the columns in question.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Data_df &amp;lt;- within(Data_df, rm(Flock.Size, Site))
dim(Data_df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1067   18
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fixed it!&lt;/p&gt;
&lt;p&gt;By doing so, we have gotten rid of our flock size problem stemming from the deletion of a data record. You could also argue that the columns &lt;code&gt;Site&lt;/code&gt; and &lt;code&gt;Index&lt;/code&gt; are redundant. We could arguably keep both for quality-of-life when interpreting our results (make use of &lt;code&gt;Sites&lt;/code&gt;) and coding (make use of &lt;code&gt;Index&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&#34;saving-the-fixed-data-set&#34;&gt;Saving The Fixed Data Set&lt;/h2&gt;
&lt;p&gt;We fixed out entire data set! The data set is now ready for use.&lt;/p&gt;
&lt;p&gt;Keep in mind that the data set I provided you with was relatively clean and real-world messy data sets can be far more difficult to clean up.&lt;/p&gt;
&lt;p&gt;Before going forth, we need to save it. &lt;strong&gt;Attention:&lt;/strong&gt; don&amp;rsquo;t overwrite your initial data file!&lt;/p&gt;
&lt;h3 id=&#34;final-check&#34;&gt;Final Check&lt;/h3&gt;
&lt;p&gt;Before exporting you may want to ensure that everything is in order and do a final round of data inspection. This can be achieved by running the automated &lt;code&gt;summary()&lt;/code&gt; command from earlier again as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;for (i in 1:dim(Data_df)[2]) {
  print(colnames(Data_df)[i])
  print(summary(Data_df[, i]))
  print(&amp;quot;------------------------------------------------------&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Index&amp;quot;
##    Length     Class      Mode 
##      1067 character character 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Latitude&amp;quot;
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##  -51.75    4.00   10.50   13.63   31.00   70.00 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Longitude&amp;quot;
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##  -97.00  -88.75  -53.00  -28.47   -2.00  135.00 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Climate&amp;quot;
##    Length     Class      Mode 
##      1067 character character 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Population.Status&amp;quot;
##    Length     Class      Mode 
##      1067 character character 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Weight&amp;quot;
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&#39;s 
##   19.38   27.87   30.61   29.32   32.24   36.66       1 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Height&amp;quot;
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   11.09   13.52   14.51   15.20   16.20   21.68 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Wing.Chord&amp;quot;
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   6.410   6.840   7.050   7.337   7.400   9.000 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Colour&amp;quot;
## Black Brown  Grey 
##   356   298   413 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Sex&amp;quot;
##    Length     Class      Mode 
##      1067 character character 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Nesting.Site&amp;quot;
## Shrub  Tree  NA&#39;s 
##   292   231   544 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Nesting.Height&amp;quot;
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&#39;s 
##   11.78   42.34   64.85  480.59  951.38 1950.86     544 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Number.of.Eggs&amp;quot;
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&#39;s 
##   0.000   2.000   3.000   3.746   4.000  10.000     544 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Egg.Weight&amp;quot;
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&#39;s 
##   1.580   2.340   2.670   2.619   2.890   3.590     590 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Flock&amp;quot;
##    Length     Class      Mode 
##      1067 character character 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Home.Range&amp;quot;
##    Length     Class      Mode 
##      1067 character character 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Predator.Presence&amp;quot;
##    Length     Class      Mode 
##      1067 character character 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
## [1] &amp;quot;Predator.Type&amp;quot;
##     Avian Non-Avian      NA&#39;s 
##       490       220       357 
## [1] &amp;quot;------------------------------------------------------&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Everything checks out. Let&amp;rsquo;s save our final data frame.&lt;/p&gt;
&lt;h3 id=&#34;exporting-the-altered-data&#34;&gt;Exporting The Altered Data&lt;/h3&gt;
&lt;p&gt;Since Excel is readily available for viewing data outside of R, I like to save my final data set in excel format as can be seen below. Additionally, I recommend saving your final data frame as an RDS file. These are &lt;code&gt;R&lt;/code&gt; specific data files which you will not be able to alter outside of &lt;code&gt;R&lt;/code&gt; thus saving yourself from accidentally changing records when only trying to view your data. On top of that, RDS files take up less space than either Excel or TXT files do.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# saving in excel sheet
write.csv(Data_df, file = paste(Dir.Data, &amp;quot;/SparrowData_FIXED.csv&amp;quot;, sep=&amp;quot;&amp;quot;))
# saving as R data frame object
saveRDS(Data_df, file = paste(Dir.Data, &amp;quot;/SparrowData.rds&amp;quot;, sep=&amp;quot;&amp;quot;)) 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.2.3 (2023-03-15)
## Platform: x86_64-apple-darwin17.0 (64-bit)
## Running under: macOS Big Sur ... 10.16
## 
## Matrix products: default
## BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] dplyr_1.1.0
## 
## loaded via a namespace (and not attached):
##  [1] bslib_0.4.2       compiler_4.2.3    pillar_1.8.1      jquerylib_0.1.4   highr_0.10        R.methodsS3_1.8.2 R.utils_2.12.2    tools_4.2.3       digest_0.6.31     jsonlite_1.8.4   
## [11] evaluate_0.20     lifecycle_1.0.3   tibble_3.2.0      R.cache_0.16.0    pkgconfig_2.0.3   rlang_1.0.6       cli_3.6.0         rstudioapi_0.14   yaml_2.3.7        blogdown_1.16    
## [21] xfun_0.37         fastmap_1.1.1     styler_1.9.1      knitr_1.42        generics_0.1.3    vctrs_0.5.2       sass_0.4.5        tidyselect_1.2.0  glue_1.6.2        R6_2.5.1         
## [31] fansi_1.0.4       rmarkdown_2.20    bookdown_0.33     purrr_1.0.1       magrittr_2.0.3    htmltools_0.5.4   utf8_1.2.3        cachem_1.0.7      R.oo_1.25.0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Classifications</title>
      <link>https://www.erikkusch.com/courses/excursions-into-biostatistics/classifications-order-from-chaos/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/excursions-into-biostatistics/classifications-order-from-chaos/</guid>
      <description>&lt;h2 id=&#34;theory&#34;&gt;Theory&lt;/h2&gt;
&lt;p&gt;These are exercises and solutions meant as a compendium to my talk on Model Selection and Model Building.&lt;/p&gt;
&lt;p&gt;I have prepared some &lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/ErikKusch/Homepage/blob/master/static/courses/Excursions-into-Biostatistics/Classifications---Order-from-Chaos.html&#34; target=&#34;_blank&#34;&gt; Lecture Slides &lt;/a&gt; for this session.&lt;/p&gt;
&lt;h2 id=&#34;our-resarch-project&#34;&gt;Our Resarch Project&lt;/h2&gt;
&lt;p&gt;Today, we are looking at a big (and entirely fictional) data base of the common house sparrow (&lt;em&gt;Passer domesticus&lt;/em&gt;). In particular, we are interested in the &lt;strong&gt;Evolution of &lt;em&gt;Passer domesticus&lt;/em&gt; in Response to Climate Change&lt;/strong&gt; which was previously explained &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/research-project/&#34; target=&#34;_blank&#34;&gt; here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-data&#34;&gt;The Data&lt;/h3&gt;
&lt;p&gt;I have created a large data set for this exercise which is available &lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/excursions-into-biostatistics/Data.rar&#34; target=&#34;_blank&#34;&gt; here&lt;/a&gt; and we previously cleaned up so that is now usable &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/data-handling-and-data-assumptions/&#34; target=&#34;_blank&#34;&gt; here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;reading-the-data-into-r&#34;&gt;Reading the Data into &lt;code&gt;R&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start by reading the data into &lt;code&gt;R&lt;/code&gt; and taking an initial look at it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Sparrows_df &amp;lt;- readRDS(file.path(&amp;quot;Data&amp;quot;, &amp;quot;SparrowDataClimate.rds&amp;quot;))
head(Sparrows_df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Index Latitude Longitude     Climate Population.Status Weight Height Wing.Chord Colour    Sex Nesting.Site Nesting.Height Number.of.Eggs Egg.Weight Flock Home.Range Predator.Presence Predator.Type
## 1    SI       60       100 Continental            Native  34.05  12.87       6.67  Brown   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large               Yes         Avian
## 2    SI       60       100 Continental            Native  34.86  13.68       6.79   Grey   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large               Yes         Avian
## 3    SI       60       100 Continental            Native  32.34  12.66       6.64  Black Female        Shrub          35.60              1       3.21     C      Large               Yes         Avian
## 4    SI       60       100 Continental            Native  34.78  15.09       7.00  Brown Female        Shrub          47.75              0         NA     E      Large               Yes         Avian
## 5    SI       60       100 Continental            Native  35.01  13.82       6.81   Grey   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large               Yes         Avian
## 6    SI       60       100 Continental            Native  32.36  12.67       6.64  Brown Female        Shrub          32.47              1       3.17     E      Large               Yes         Avian
##       TAvg      TSD
## 1 269.9596 15.71819
## 2 269.9596 15.71819
## 3 269.9596 15.71819
## 4 269.9596 15.71819
## 5 269.9596 15.71819
## 6 269.9596 15.71819
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;hypotheses&#34;&gt;Hypotheses&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s remember our hypotheses:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Sparrow Morphology&lt;/strong&gt; is determined by:&lt;br&gt;
A. &lt;em&gt;Climate Conditions&lt;/em&gt; with sparrows in stable, warm environments fairing better than those in colder, less stable ones.&lt;br&gt;
B. &lt;em&gt;Competition&lt;/em&gt; with sparrows in small flocks doing better than those in big flocks.&lt;br&gt;
C. &lt;em&gt;Predation&lt;/em&gt; with sparrows under pressure of predation doing worse than those without.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sites&lt;/strong&gt;  accurately represent &lt;strong&gt;sparrow morphology&lt;/strong&gt;. This may mean:&lt;br&gt;
A. &lt;em&gt;Population status&lt;/em&gt; as inferred through morphology.&lt;br&gt;
B. &lt;em&gt;Site index&lt;/em&gt; as inferred through morphology.&lt;br&gt;
C. &lt;em&gt;Climate&lt;/em&gt; as inferred through morphology.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Quite obviously, &lt;strong&gt;hypothesis 2&lt;/strong&gt; is the only one lending itself well to classification exercises. In fact, what we want to answer is the question: &lt;em&gt;&amp;ldquo;Can we successfully classify populations at different sites according to their morphological expressions?&amp;quot;&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;r-environment&#34;&gt;&lt;code&gt;R&lt;/code&gt; Environment&lt;/h2&gt;
&lt;p&gt;For this exercise, we will need the following packages:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.load.package &amp;lt;- function(x) {
  if (!require(x, character.only = TRUE)) {
    install.packages(x, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;)
  }
  require(x, character.only = TRUE)
}
package_vec &amp;lt;- c(
  &amp;quot;ggplot2&amp;quot;, # for visualisation
  &amp;quot;mclust&amp;quot;, # for k-means clustering,
  &amp;quot;vegan&amp;quot;, # for distance matrices in hierarchical clustering
  &amp;quot;rpart&amp;quot;, # for decision trees
  &amp;quot;rpart.plot&amp;quot;, # for plotting decision trees
  &amp;quot;randomForest&amp;quot;, # for randomForest classifier
  &amp;quot;car&amp;quot;, # check multicollinearity
  &amp;quot;MASS&amp;quot; # for ordinal logistic regression
)
sapply(package_vec, install.load.package)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      ggplot2       mclust        vegan        rpart   rpart.plot randomForest          car         MASS 
##         TRUE         TRUE         TRUE         TRUE         TRUE         TRUE         TRUE         TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the above function is way more sophisticated than the usual &lt;code&gt;install.packages()&lt;/code&gt; &amp;amp; &lt;code&gt;library()&lt;/code&gt; approach since it automatically detects which packages require installing and only install these thus not overwriting already installed packages.&lt;/p&gt;
&lt;h2 id=&#34;logistic-regression&#34;&gt;Logistic Regression&lt;/h2&gt;
&lt;p&gt;Remember the &lt;strong&gt;Assumptions of Logistic Regression&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Absence of influential outliers&lt;/li&gt;
&lt;li&gt;Absence of multi-collinearity&lt;/li&gt;
&lt;li&gt;Predictor Variables and log odds are related in a linear fashion&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;binary-logistic-regression&#34;&gt;Binary Logistic Regression&lt;/h3&gt;
&lt;p&gt;Binary Logistic regression only accommodates binary outcomes. This leaves only one of our hypotheses open for investigation - &lt;strong&gt;2.A.&lt;/strong&gt; &lt;em&gt;Population Status&lt;/em&gt; - since this is the only response variable boasting two levels.&lt;/p&gt;
&lt;p&gt;To reduce the effect of as many confounding variables as possible, I reduce the data set to just those observations belonging to our station in Siberia and Manitoba. Both are located at very similar latitudes. They really only differ in their climate condition and the population status:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;LogReg_df &amp;lt;- Sparrows_df[Sparrows_df$Index == &amp;quot;MA&amp;quot; | Sparrows_df$Index == &amp;quot;SI&amp;quot;, c(&amp;quot;Population.Status&amp;quot;, &amp;quot;Weight&amp;quot;, &amp;quot;Height&amp;quot;, &amp;quot;Wing.Chord&amp;quot;)]
LogReg_df$PS &amp;lt;- as.numeric(LogReg_df$Population.Status) - 1 # make climate numeric for model
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;initial-model--collinearity&#34;&gt;Initial Model &amp;amp; Collinearity&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s start with the biggest model we can build here and then assess if our assumptions are met:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H2_LogReg_mod &amp;lt;- glm(PS ~ Weight + Height + Wing.Chord,
  data = LogReg_df,
  family = binomial(link = &amp;quot;logit&amp;quot;),
)
summary(H2_LogReg_mod)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## glm(formula = PS ~ Weight + Height + Wing.Chord, family = binomial(link = &amp;quot;logit&amp;quot;), 
##     data = LogReg_df)
## 
## Deviance Residuals: 
##        Min          1Q      Median          3Q         Max  
## -2.657e-05  -2.110e-08  -2.110e-08   2.110e-08   2.855e-05  
## 
## Coefficients:
##               Estimate Std. Error z value Pr(&amp;gt;|z|)
## (Intercept)  1.557e+03  3.312e+07   0.000    1.000
## Weight       7.242e+01  3.735e+04   0.002    0.998
## Height       2.153e+01  1.061e+06   0.000    1.000
## Wing.Chord  -6.247e+02  6.928e+06   0.000    1.000
## 
## (Dispersion parameter for binomial family taken to be 1)
## 
##     Null deviance: 1.8437e+02  on 132  degrees of freedom
## Residual deviance: 6.8926e-09  on 129  degrees of freedom
## AIC: 8
## 
## Number of Fisher Scoring iterations: 25
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well&amp;hellip; nothing here is significant. Let&amp;rsquo;s see what the culprit might be. With morphological traits, you are often looking at a whole set of collinearity, so let&amp;rsquo;s start by investigating that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vif(H2_LogReg_mod)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Weight      Height  Wing.Chord 
##    9.409985 6550.394451 6342.683550
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A Variance Inflation Factor (VIF) value of $\geq5-10$ is seen as identifying problematic collinearity. Quite obviously, this is the case. We need to throw away some predictors. I only want to keep &lt;code&gt;Weight&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;weight-model-and-further-assumptions&#34;&gt;&lt;code&gt;Weight&lt;/code&gt; Model and Further Assumptions&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s run a simplified model that just used &lt;code&gt;Weight&lt;/code&gt; as a predictor:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H2_LogReg_mod &amp;lt;- glm(PS ~ Weight,
  data = LogReg_df,
  family = binomial(link = &amp;quot;logit&amp;quot;)
)
summary(H2_LogReg_mod)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## glm(formula = PS ~ Weight, family = binomial(link = &amp;quot;logit&amp;quot;), 
##     data = LogReg_df)
## 
## Deviance Residuals: 
##     Min       1Q   Median       3Q      Max  
## -2.1980  -0.5331  -0.1235   0.5419   1.9067  
## 
## Coefficients:
##             Estimate Std. Error z value Pr(&amp;gt;|z|)    
## (Intercept) -46.3244     7.8319  -5.915 3.32e-09 ***
## Weight        1.4052     0.2374   5.920 3.23e-09 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## (Dispersion parameter for binomial family taken to be 1)
## 
##     Null deviance: 184.37  on 132  degrees of freedom
## Residual deviance: 105.08  on 131  degrees of freedom
## AIC: 109.08
## 
## Number of Fisher Scoring iterations: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A significant effect, huzzah! We still need to test for our assumptions, however. Checking for &lt;strong&gt;multicollinearity&lt;/strong&gt; makes no sense since we only use one predictor, so we can skip that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linear Relationship&lt;/strong&gt; between predictor(s) and log-odds of the output can be assessed as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;probabilities &amp;lt;- predict(H2_LogReg_mod, type = &amp;quot;response&amp;quot;) # predict model response on original data
LogReg_df$Probs &amp;lt;- probabilities # safe probabilities to data frame
LogReg_df$LogOdds &amp;lt;- log(probabilities / (1 - probabilities)) # calculate log-odds
## Plot Log-Odds vs. Predictor
ggplot(data = LogReg_df, aes(x = Weight, y = LogOdds)) +
  geom_point() +
  geom_smooth(method = &amp;quot;lm&amp;quot;, se = TRUE) +
  theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;5_Classifications---Order-from-Chaos_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That is clearly linear relationship!&lt;/p&gt;
&lt;p&gt;Moving on to our final assumption, we want to assess whether there are influential &lt;strong&gt;Outliers&lt;/strong&gt;. For this, we want to look at the &lt;em&gt;Cook&amp;rsquo;s distance&lt;/em&gt; as well as the &lt;em&gt;standardised residuals&lt;/em&gt; per observation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Cook&#39;s distance
plot(H2_LogReg_mod, which = 4, id.n = 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;5_Classifications---Order-from-Chaos_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Standardises Residuals
Outlier_df &amp;lt;- data.frame(
  Residuals = resid(H2_LogReg_mod),
  Index = 1:nrow(LogReg_df),
  Outcome = factor(LogReg_df$PS)
)
Outlier_df$Std.Resid &amp;lt;- scale(Outlier_df$Residuals)
# Plot Residuals
ggplot(Outlier_df, aes(Outcome, Std.Resid)) +
  geom_boxplot() +
  theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;5_Classifications---Order-from-Chaos_files/figure-html/unnamed-chunk-8-2.png&#34; width=&#34;1440&#34; /&gt;
Both of these plots do not highlight any worrying influential outliers. An influential outliers would manifest with a prominent standardises residual ($|Std.Resid|\sim3$)/Cook&amp;rsquo;s distance.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s finally plot what the model predicts:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = LogReg_df, aes(x = Weight, y = LogReg_df$PS)) +
  geom_point() +
  theme_bw() +
  geom_smooth(
    data = LogReg_df, aes(x = Weight, y = Probs),
    method = &amp;quot;glm&amp;quot;,
    method.args = list(family = &amp;quot;binomial&amp;quot;),
    se = TRUE
  ) +
  labs(y = &amp;quot;Introduced Population&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;5_Classifications---Order-from-Chaos_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;ordinal-logistic-regression&#34;&gt;Ordinal Logistic Regression&lt;/h3&gt;
&lt;p&gt;Ordinal Logistic regression allows for multiple levels of the response variable so long as they are on an ordinal scale. Here, we could test all of our above hypotheses. However, I&amp;rsquo;d like to stick with &lt;strong&gt;2.C.&lt;/strong&gt; &lt;em&gt;Climate&lt;/em&gt; for this example.&lt;/p&gt;
&lt;p&gt;Again, to reduce the effect of as many confounding variables as possible, I reduce the data set to just those observations belonging to our station in Siberia, Manitoba, and also the United Kingdom this time. All three are located at very similar latitudes. They really only differ in their climate condition and the population status:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;LogReg_df &amp;lt;- Sparrows_df[Sparrows_df$Index == &amp;quot;UK&amp;quot; | Sparrows_df$Index == &amp;quot;MA&amp;quot; | Sparrows_df$Index == &amp;quot;SI&amp;quot;, c(&amp;quot;Climate&amp;quot;, &amp;quot;Weight&amp;quot;, &amp;quot;Height&amp;quot;, &amp;quot;Wing.Chord&amp;quot;)]
LogReg_df$CL &amp;lt;- factor(as.numeric(LogReg_df$Climate) - 1) # make climate factored numeric for model
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;initial-model--collinearity-1&#34;&gt;Initial Model &amp;amp; Collinearity&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s start with the biggest model we can build here and then assess if our assumptions are met:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H2_LogReg_mod &amp;lt;- polr(CL ~ Weight + Height + Wing.Chord,
  data = LogReg_df,
  Hess = TRUE
)
summary_table &amp;lt;- coef(summary(H2_LogReg_mod))
pval &amp;lt;- pnorm(abs(summary_table[, &amp;quot;t value&amp;quot;]), lower.tail = FALSE) * 2
summary_table &amp;lt;- cbind(summary_table, &amp;quot;p value&amp;quot; = round(pval, 6))
summary_table
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   Value Std. Error      t value p value
## Weight       -0.4595719 0.09750018    -4.713549   2e-06
## Height       25.0808034 0.19522606   128.470573   0e+00
## Wing.Chord -164.1103857 0.51246129  -320.239573   0e+00
## 0|1        -788.2133893 0.11008589 -7159.985419   0e+00
## 1|2        -786.8019284 0.18747890 -4196.749302   0e+00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well&amp;hellip; a lot here is significant. We identified &lt;strong&gt;multicollinearity&lt;/strong&gt; as a problem earlier. Let&amp;rsquo;s investigate that again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vif(H2_LogReg_mod)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Weight     Height Wing.Chord 
##   431.6796   294.6353   536.5452
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Horrible!. A Variance Inflation Factor (VIF) value of $\geq5-10$ is seen as identifying problematic collinearity. Quite obviously, this is the case. We need to throw away some predictors. I only want to keep &lt;code&gt;Weight&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;weight-model-and-further-assumptions-1&#34;&gt;&lt;code&gt;Weight&lt;/code&gt; Model and Further Assumptions&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s run a simplified model that just used &lt;code&gt;Weight&lt;/code&gt; as a predictor:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H2_LogReg_mod &amp;lt;- polr(CL ~ Weight,
  data = LogReg_df,
  Hess = TRUE
)
summary_table &amp;lt;- coef(summary(H2_LogReg_mod))
pval &amp;lt;- pnorm(abs(summary_table[, &amp;quot;t value&amp;quot;]), lower.tail = FALSE) * 2
summary_table &amp;lt;- cbind(summary_table, &amp;quot;p value&amp;quot; = round(pval, 6))
summary_table
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               Value Std. Error      t value  p value
## Weight -0.020768177  0.0761669 -0.272666718 0.785109
## 0|1    -1.354848455  2.5131706 -0.539099272 0.589818
## 1|2     0.009549511  2.5112093  0.003802754 0.996966
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well&amp;hellip; this model doesn&amp;rsquo;t help us at all in understanding climate through morphology of our sparrows. Let&amp;rsquo;s abandon this and move on to classification methods which are much better suited to this task.&lt;/p&gt;
&lt;h2 id=&#34;k-means-clustering&#34;&gt;K-Means Clustering&lt;/h2&gt;
&lt;p&gt;K-Means clustering is incredibly potent in identifying a number of appropriate clusters, their attributes, and sort observations into appropriate clusters.&lt;/p&gt;
&lt;h3 id=&#34;population-status-classifier&#34;&gt;Population Status Classifier&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start with understanding population status through morphological traits:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Morph_df &amp;lt;- Sparrows_df[, c(&amp;quot;Weight&amp;quot;, &amp;quot;Height&amp;quot;, &amp;quot;Wing.Chord&amp;quot;, &amp;quot;Population.Status&amp;quot;)]
H2_PS_mclust &amp;lt;- Mclust(Morph_df[-4], G = length(unique(Morph_df[, 4])))
plot(H2_PS_mclust, what = &amp;quot;uncertainty&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;5_Classifications---Order-from-Chaos_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As we can see, K-means clustering is able to really neatly identify two groups in our data. But do they actually belong do the right groups of &lt;code&gt;Population.Status&lt;/code&gt;? We&amp;rsquo;ll find out in &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/excursion-into-biostatistics/&#34; target=&#34;_blank&#34;&gt; Model Selection and Validation&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;site-classifier&#34;&gt;Site Classifier&lt;/h3&gt;
&lt;p&gt;On to our site index classification. Running the k-means clustering algorithm returns:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Morph_df &amp;lt;- Sparrows_df[, c(&amp;quot;Weight&amp;quot;, &amp;quot;Height&amp;quot;, &amp;quot;Wing.Chord&amp;quot;, &amp;quot;Index&amp;quot;)]
H2_Index_mclust &amp;lt;- Mclust(Morph_df[-4], G = length(unique(Morph_df[, 4])))
plot(H2_Index_mclust, what = &amp;quot;uncertainty&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;5_Classifications---Order-from-Chaos_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s a pretty bad classification. I would not place trust in these clusters seeing how much they overlap.&lt;/p&gt;
&lt;h3 id=&#34;climate-classifier&#34;&gt;Climate Classifier&lt;/h3&gt;
&lt;p&gt;Lastly, turning to our climate classification using k-means classification:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Morph_df &amp;lt;- Sparrows_df[, c(&amp;quot;Weight&amp;quot;, &amp;quot;Height&amp;quot;, &amp;quot;Wing.Chord&amp;quot;, &amp;quot;Climate&amp;quot;)]
H2_Climate_mclust &amp;lt;- Mclust(Morph_df[-4], G = length(unique(Morph_df[, 4])))
plot(H2_Climate_mclust, what = &amp;quot;uncertainty&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;5_Classifications---Order-from-Chaos_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;1440&#34; /&gt;
These clusters are decent although there is quite a bit of overlap between the blue and red cluster.&lt;/p&gt;
&lt;h3 id=&#34;optimal-model&#34;&gt;Optimal Model&lt;/h3&gt;
&lt;p&gt;K-means clustering is also able to identify the most &amp;ldquo;appropriate&amp;rdquo; number of clusters given the data and uncertainty of classification:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Morph_df &amp;lt;- Sparrows_df[, c(&amp;quot;Weight&amp;quot;, &amp;quot;Height&amp;quot;, &amp;quot;Wing.Chord&amp;quot;)]
dataBIC &amp;lt;- mclustBIC(Morph_df)
summary(dataBIC) # show summary of top-ranking models
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Best BIC values:
##             VVV,7     EVV,7     EVV,8
## BIC      63.39237 -304.1895 -336.0531
## BIC diff  0.00000 -367.5819 -399.4455
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(dataBIC)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;5_Classifications---Order-from-Chaos_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;G &amp;lt;- as.numeric(strsplit(names(summary(dataBIC))[1], &amp;quot;,&amp;quot;)[[1]][2])
H2_Opt_mclust &amp;lt;- Mclust(Morph_df, # data for the cluster model
  G = G # BIC index for model to be built
)
H2_Opt_mclust[[&amp;quot;parameters&amp;quot;]][[&amp;quot;mean&amp;quot;]] # mean values of clusters
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 [,1]      [,2]     [,3]      [,4]      [,5]      [,6]      [,7]
## Weight     34.830000 32.677280 33.63023 31.354892 30.146417 22.585240 22.796014
## Height     13.641765 13.570427 14.20721 14.317070 14.085826 18.847550 19.036621
## Wing.Chord  6.787059  6.780954  6.99186  7.044881  6.965047  8.576106  8.609035
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(H2_Opt_mclust, what = &amp;quot;uncertainty&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;5_Classifications---Order-from-Chaos_files/figure-html/unnamed-chunk-17-2.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here, K-means clustering would have us settle on 7 clusters. That does not coincide with anything we could really test for at this point. COnclusively, this model goes into the category of &amp;ldquo;Nice to have, but ultimately useless here&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;summary-of-k-means-clustering&#34;&gt;Summary of K-Means Clustering&lt;/h3&gt;
&lt;p&gt;So what do we take from this? Well&amp;hellip; Population status was well explained all morphological traits and so would in turn also do a good job of being a proxy for the other when doing mixed regression models, for example. Hence, we might want to include this variable in future &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/regressions-correlations-for-the-advanced/&#34; target=&#34;_blank&#34;&gt; Regression Models&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;hierarchical-clustering&#34;&gt;Hierarchical Clustering&lt;/h2&gt;
&lt;p&gt;Moving on to hierarchical clustering, we luckily only need to create a few trees to start with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Morph_df &amp;lt;- Sparrows_df[, c(&amp;quot;Weight&amp;quot;, &amp;quot;Height&amp;quot;, &amp;quot;Wing.Chord&amp;quot;)] # selecting morphology data
dist_mat &amp;lt;- dist(Morph_df) # distance matrix
## Hierarchical clustering using different linkages
H2_Hierachical_clas1 &amp;lt;- hclust(dist_mat, method = &amp;quot;complete&amp;quot;)
H2_Hierachical_clas2 &amp;lt;- hclust(dist_mat, method = &amp;quot;single&amp;quot;)
H2_Hierachical_clas3 &amp;lt;- hclust(dist_mat, method = &amp;quot;average&amp;quot;)
## Plotting Hierarchies
par(mfrow = c(1, 3))
plot(H2_Hierachical_clas1, main = &amp;quot;complete&amp;quot;)
plot(H2_Hierachical_clas2, main = &amp;quot;single&amp;quot;)
plot(H2_Hierachical_clas3, main = &amp;quot;average&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;5_Classifications---Order-from-Chaos_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here, you can see that the type of linkage employed by your hierarchical approach is very important as to how the hierarchy ends up looking like. For now, we run with all of them.&lt;/p&gt;
&lt;h3 id=&#34;population-status-classifier-1&#34;&gt;Population Status Classifier&lt;/h3&gt;
&lt;p&gt;For our population status classifier, let&amp;rsquo;s obtain our data and cluster number we are after:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Morph_df &amp;lt;- Sparrows_df[, c(&amp;quot;Weight&amp;quot;, &amp;quot;Height&amp;quot;, &amp;quot;Wing.Chord&amp;quot;, &amp;quot;Population.Status&amp;quot;)]
G &amp;lt;- length(unique(Morph_df[, 4]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can look at how well our different Hierarchies fair at explaining these categories when cut at the point where the same number of categories is present in the tree:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;clusterCut &amp;lt;- cutree(H2_Hierachical_clas1, k = G) # cut tree
table(clusterCut, Morph_df$Population.Status) # assess fit
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           
## clusterCut Introduced Native
##          1        682    134
##          2        250      0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;clusterCut &amp;lt;- cutree(H2_Hierachical_clas2, k = G) # cut tree
table(clusterCut, Morph_df$Population.Status) # assess fit
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           
## clusterCut Introduced Native
##          1        682    134
##          2        250      0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;clusterCut &amp;lt;- cutree(H2_Hierachical_clas3, k = G) # cut tree
table(clusterCut, Morph_df$Population.Status) # assess fit
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           
## clusterCut Introduced Native
##          1        682    134
##          2        250      0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Interestingly enough, no matter the linkage, all of these approaches get Introduced and Native populations confused in the first group, but not the second.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at the decisions that we could make when following a decision tree for this example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H2_PS_decision &amp;lt;- rpart(Population.Status ~ ., data = Morph_df)
rpart.plot(H2_PS_decision)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;5_Classifications---Order-from-Chaos_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Following this decision tree we first ask &lt;em&gt;&amp;ldquo;Is our sparrow lighter than 35g?&amp;quot;&lt;/em&gt;. If the answer is yes, we move to the left and ask the question &lt;em&gt;&amp;ldquo;Is the wing span of our sparrow greater/equal than 6.9cm?&amp;quot;&lt;/em&gt;. If the answer is yes, we move to the left and assign this sparrow to an introduced population status. 62% of all observations are in this node and to 2% we believe that this node might actually be a Native node. All other nodes are explained accordingly. More about their interpretation can be found in this 
&lt;a href=&#34;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;ved=2ahUKEwizk67jmJDvAhUnMuwKHbaiD90QFjAAegQIARAD&amp;amp;url=http%3A%2F%2Fwww.milbo.org%2Frpart-plot%2Fprp.pdf&amp;amp;usg=AOvVaw2DpMfeZC2yVdRaYZBXBA8K&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Manual&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;site-classifier-1&#34;&gt;Site Classifier&lt;/h3&gt;
&lt;p&gt;Moving on to the site index classifier, we need our data and number of clusters:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Morph_df &amp;lt;- Sparrows_df[, c(&amp;quot;Weight&amp;quot;, &amp;quot;Height&amp;quot;, &amp;quot;Wing.Chord&amp;quot;, &amp;quot;Index&amp;quot;)]
G &amp;lt;- length(unique(Morph_df[, 4]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at our different outputs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;clusterCut &amp;lt;- cutree(H2_Hierachical_clas1, k = G) # cut tree
table(clusterCut, Morph_df$Index) # assess fit
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           
## clusterCut  AU  BE  FG  FI  LO  MA  NU  RE  SA  SI  UK
##         1   24   0   0  21   0  15  17   0   0  22  13
##         2   17   0   0   5   3   7   6   0   0  31   5
##         3   19   0   0  29  12  22  21   0   0  13  25
##         4   24  26   0   2  33   5   7  32  16   0  12
##         5    3   0   0  12   4  18  13   0   0   0  13
##         6    0  60   0   0  20   0   0  49  77   0   0
##         7    0  19   0   0   9   0   0  14  21   0   0
##         8    0   0  80   0   0   0   0   0   0   0   0
##         9    0   0 138   0   0   0   0   0   0   0   0
##         10   0   0  16   0   0   0   0   0   0   0   0
##         11   0   0  16   0   0   0   0   0   0   0   0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;clusterCut &amp;lt;- cutree(H2_Hierachical_clas2, k = G) # cut tree
table(clusterCut, Morph_df$Index) # assess fit
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           
## clusterCut  AU  BE  FG  FI  LO  MA  NU  RE  SA  SI  UK
##         1    0   0   0   0   0   0   0   0   0  28   0
##         2   87 102   0  69  80  67  64  95 112  32  68
##         3    0   0   0   0   0   0   0   0   0   4   0
##         4    0   0   0   0   0   0   0   0   0   2   0
##         5    0   0   0   0   1   0   0   0   0   0   0
##         6    0   1   0   0   0   0   0   0   0   0   0
##         7    0   2   0   0   0   0   0   0   0   0   0
##         8    0   0 122   0   0   0   0   0   0   0   0
##         9    0   0 126   0   0   0   0   0   0   0   0
##         10   0   0   2   0   0   0   0   0   0   0   0
##         11   0   0   0   0   0   0   0   0   2   0   0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;clusterCut &amp;lt;- cutree(H2_Hierachical_clas3, k = G) # cut tree
table(clusterCut, Morph_df$Index) # assess fit
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           
## clusterCut  AU  BE  FG  FI  LO  MA  NU  RE  SA  SI  UK
##         1   44   0   0  15  14  15  22   0   0  45  19
##         2   42  31   0  50  50  49  40  27   0  12  44
##         3    1   0   0   0   0   0   0   0   0   5   0
##         4    0   0   0   0   0   0   0   0   0   4   0
##         5    0   6   0   4   9   3   2   1   0   0   5
##         6    0  34   0   0   0   0   0  35  81   0   0
##         7    0  21   0   0   8   0   0  27  23   0   0
##         8    0  13   0   0   0   0   0   5  10   0   0
##         9    0   0 106   0   0   0   0   0   0   0   0
##         10   0   0 134   0   0   0   0   0   0   0   0
##         11   0   0  10   0   0   0   0   0   0   0   0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now see clearly how different linkages have a major impact in determining how our hierarchy groups different observations. I won&amp;rsquo;t go into interpretations here to save time and energy since these outputs are so busy.&lt;/p&gt;
&lt;p&gt;Our decision tree is also excrutiatingly busy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H2_Index_decision &amp;lt;- rpart(Index ~ ., data = Morph_df)
rpart.plot(H2_Index_decision)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;5_Classifications---Order-from-Chaos_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;climate-classifier-1&#34;&gt;Climate Classifier&lt;/h3&gt;
&lt;p&gt;Back over to our climate classifier:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Morph_df &amp;lt;- Sparrows_df[, c(&amp;quot;Weight&amp;quot;, &amp;quot;Height&amp;quot;, &amp;quot;Wing.Chord&amp;quot;, &amp;quot;Climate&amp;quot;)]
G &amp;lt;- length(unique(Morph_df[, 4]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s look at how the different linkages impact our results:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;clusterCut &amp;lt;- cutree(H2_Hierachical_clas1, k = G) # cut tree
table(clusterCut, Morph_df$Climate) # assess fit
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           
## clusterCut Coastal Continental Semi-Coastal
##          1     577         105           60
##          2      19          48            7
##          3     250           0            0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;clusterCut &amp;lt;- cutree(H2_Hierachical_clas2, k = G) # cut tree
table(clusterCut, Morph_df$Climate) # assess fit
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           
## clusterCut Coastal Continental Semi-Coastal
##          1     595         153           67
##          2       1           0            0
##          3     250           0            0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;clusterCut &amp;lt;- cutree(H2_Hierachical_clas3, k = G) # cut tree
table(clusterCut, Morph_df$Climate) # assess fit
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           
## clusterCut Coastal Continental Semi-Coastal
##          1     596         153           67
##          2     240           0            0
##          3      10           0            0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All of our linkage types have problems discerning Coastal types. I wager that is because of a ton of confounding effects which drive morphological traits in addition to climate types.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s another look at a decision tree:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H2_Climate_decision &amp;lt;- rpart(Climate ~ ., data = Morph_df)
rpart.plot(H2_Climate_decision)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;5_Classifications---Order-from-Chaos_files/figure-html/unnamed-chunk-27-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;summary-of-hierarchical-clustering&#34;&gt;Summary of Hierarchical Clustering&lt;/h3&gt;
&lt;p&gt;We have seen that site indices may hold some explanatory power regarding sparrow morphology, but the picture is very complex. We may want to keep them in mind as random effects for future models (don&amp;rsquo;t worry if that doesn&amp;rsquo;t mean much to you yet).&lt;/p&gt;
&lt;h2 id=&#34;random-forest&#34;&gt;Random Forest&lt;/h2&gt;
&lt;p&gt;Random Forests are one of the most powerful classification methods and I love them. They are incredibly powerful, accurate, and easy to use. Unfortunately, they are black-box algorithms (you don&amp;rsquo;t know what&amp;rsquo;s happening in them exactly in numerical terms) and they require observed outcomes. That&amp;rsquo;s not a problem for us with this research project!&lt;/p&gt;
&lt;h3 id=&#34;population-status-classifier-2&#34;&gt;Population Status Classifier&lt;/h3&gt;
&lt;p&gt;Running our random for model for population statuses:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(42) # set seed because the process is random
H2_PS_RF &amp;lt;- tuneRF(
  x = Sparrows_df[, c(&amp;quot;Weight&amp;quot;, &amp;quot;Height&amp;quot;, &amp;quot;Wing.Chord&amp;quot;)], # variables which to use for clustering
  y = Sparrows_df$Population.Status, # correct cluster assignment
  strata = Sparrows_df$Population.Status, # stratified sampling
  doBest = TRUE, # run the best overall tree
  ntreeTry = 20000, # consider this number of trees
  improve = 0.0000001, # improvement if this is exceeded
  trace = FALSE, plot = FALSE
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -0.08235294 1e-07
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Works perfectly.&lt;/p&gt;
&lt;p&gt;Random forests give us access to &lt;em&gt;confusion matrices&lt;/em&gt; which tell us about classification accuracy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H2_PS_RF[[&amp;quot;confusion&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            Introduced Native class.error
## Introduced        902     30  0.03218884
## Native             55     79  0.41044776
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Evidently, we are good at predicting Introduced population status, but Native population status is almost as random as a coin toss.&lt;/p&gt;
&lt;p&gt;Which variables give us the most information when establishing these groups?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;varImpPlot(H2_PS_RF)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;5_Classifications---Order-from-Chaos_files/figure-html/unnamed-chunk-30-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Well look who it is. &lt;code&gt;Weight&lt;/code&gt; comes out as the most important variable once again!&lt;/p&gt;
&lt;h3 id=&#34;site-classifier-2&#34;&gt;Site Classifier&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s run a random forest analysis for our site indices:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(42) # set seed because the process is random
H2_Index_RF &amp;lt;- tuneRF(
  x = Sparrows_df[, c(&amp;quot;Weight&amp;quot;, &amp;quot;Height&amp;quot;, &amp;quot;Wing.Chord&amp;quot;)], # variables which to use for clustering
  y = Sparrows_df$Index, # correct cluster assignment
  strata = Sparrows_df$Index, # stratified sampling
  doBest = TRUE, # run the best overall tree
  ntreeTry = 20000, # consider this number of trees
  improve = 0.0000001, # improvement if this is exceeded
  trace = FALSE, plot = FALSE
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0.01630435 1e-07 
## 0 1e-07
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H2_Index_RF[[&amp;quot;confusion&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    AU  BE  FG FI LO MA NU RE  SA SI UK class.error
## AU 77   0   0  2  8  0  0  0   0  0  0  0.11494253
## BE  0 102   0  0  0  0  0  0   3  0  0  0.02857143
## FG  0   0 250  0  0  0  0  0   0  0  0  0.00000000
## FI  0   0   0 33  0 21  0  0   0  0 15  0.52173913
## LO  9   0   0  0 69  0  0  2   0  0  1  0.14814815
## MA  0   0   0 17  0 26  2  0   0  0 22  0.61194030
## NU  0   0   0  0  0  7 44  0   0  7  6  0.31250000
## RE  0   4   0  0  3  0  0 87   1  0  0  0.08421053
## SA  0   5   0  0  0  0  0  0 109  0  0  0.04385965
## SI  0   0   0  0  0  1  7  0   0 58  0  0.12121212
## UK  0   0   0 14  0 25  1  0   0  0 28  0.58823529
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;varImpPlot(H2_Index_RF)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;5_Classifications---Order-from-Chaos_files/figure-html/unnamed-chunk-31-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Except for Manitoba and the UK (which are often mistaken for each other), morphology (and mostly &lt;code&gt;Weight&lt;/code&gt;) explains station indices quite adequately.&lt;/p&gt;
&lt;h3 id=&#34;climate-classifier-2&#34;&gt;Climate Classifier&lt;/h3&gt;
&lt;p&gt;Lastly, we turn to our climate classifier again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(42) # set seed because the process is random
H2_Climate_RF &amp;lt;- tuneRF(
  x = Sparrows_df[, c(&amp;quot;Weight&amp;quot;, &amp;quot;Height&amp;quot;, &amp;quot;Wing.Chord&amp;quot;)], # variables which to use for clustering
  y = Sparrows_df$Climate, # correct cluster assignment
  strata = Sparrows_df$Climate, # stratified sampling
  doBest = TRUE, # run the best overall tree
  ntreeTry = 20000, # consider this number of trees
  improve = 0.0000001, # improvement if this is exceeded
  trace = FALSE, plot = FALSE
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0.05172414 1e-07 
## -0.02727273 1e-07
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H2_Climate_RF[[&amp;quot;confusion&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              Coastal Continental Semi-Coastal class.error
## Coastal          797          16           33  0.05791962
## Continental       15         137            1  0.10457516
## Semi-Coastal      47           0           20  0.70149254
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;varImpPlot(H2_Climate_RF)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;5_Classifications---Order-from-Chaos_files/figure-html/unnamed-chunk-32-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Oof. We get semi-coastal habitats almost completely wrong. The other climate conditions are explained well through morphology, though.&lt;/p&gt;
&lt;h2 id=&#34;final-models&#34;&gt;Final Models&lt;/h2&gt;
&lt;p&gt;In our upcoming &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/excursion-into-biostatistics/&#34; target=&#34;_blank&#34;&gt; Model Selection and Validation&lt;/a&gt; Session, we will look into how to compare and validate models. We now need to select some models we have created here today and want to carry forward to said session.&lt;/p&gt;
&lt;p&gt;Personally, I am quite enamoured with our models &lt;code&gt;H2_PS_mclust&lt;/code&gt; (k-means clustering of population status), &lt;code&gt;H2_PS_RF&lt;/code&gt; (random forest of population status), and &lt;code&gt;H2_Index_RF&lt;/code&gt; (random forest of site indices). Let&amp;rsquo;s save these as a separate object ready to be loaded into our &lt;code&gt;R&lt;/code&gt; environment in the coming session:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;save(H2_PS_mclust, H2_PS_RF, H2_Index_RF, file = file.path(&amp;quot;Data&amp;quot;, &amp;quot;H2_Models.RData&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.2.3 (2023-03-15)
## Platform: x86_64-apple-darwin17.0 (64-bit)
## Running under: macOS Big Sur ... 10.16
## 
## Matrix products: default
## BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] MASS_7.3-58.2        car_3.1-1            carData_3.0-5        randomForest_4.7-1.1 rpart.plot_3.1.1     rpart_4.1.19         vegan_2.6-4          lattice_0.20-45      permute_0.9-7       
## [10] mclust_6.0.0         ggplot2_3.4.1       
## 
## loaded via a namespace (and not attached):
##  [1] styler_1.9.1      tidyselect_1.2.0  xfun_0.37         bslib_0.4.2       purrr_1.0.1       splines_4.2.3     colorspace_2.1-0  vctrs_0.5.2       generics_0.1.3    htmltools_0.5.4  
## [11] yaml_2.3.7        mgcv_1.8-42       utf8_1.2.3        rlang_1.0.6       R.oo_1.25.0       jquerylib_0.1.4   pillar_1.8.1      glue_1.6.2        withr_2.5.0       R.utils_2.12.2   
## [21] R.cache_0.16.0    lifecycle_1.0.3   munsell_0.5.0     blogdown_1.16     gtable_0.3.1      R.methodsS3_1.8.2 evaluate_0.20     labeling_0.4.2    knitr_1.42        fastmap_1.1.1    
## [31] parallel_4.2.3    fansi_1.0.4       highr_0.10        scales_1.2.1      cachem_1.0.7      jsonlite_1.8.4    abind_1.4-5       farver_2.1.1      digest_0.6.31     bookdown_0.33    
## [41] dplyr_1.1.0       grid_4.2.3        cli_3.6.0         tools_4.2.3       magrittr_2.0.3    sass_0.4.5        tibble_3.2.0      cluster_2.1.4     pkgconfig_2.0.3   Matrix_1.5-3     
## [51] rmarkdown_2.20    rstudioapi_0.14   R6_2.5.1          nlme_3.1-162      compiler_4.2.3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Regressions</title>
      <link>https://www.erikkusch.com/courses/excursions-into-biostatistics/regressions-correlations-for-the-advanced/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/excursions-into-biostatistics/regressions-correlations-for-the-advanced/</guid>
      <description>&lt;h2 id=&#34;theory&#34;&gt;Theory&lt;/h2&gt;
&lt;p&gt;These are exercises and solutions meant as a compendium to my talk on Model Selection and Model Building.&lt;/p&gt;
&lt;p&gt;I have prepared some &lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/ErikKusch/Homepage/blob/master/static/courses/Excursions-into-Biostatistics/Regressions---Correlations-for-the-Advanced.html&#34; target=&#34;_blank&#34;&gt; Lecture Slides &lt;/a&gt; for this session.&lt;/p&gt;
&lt;h2 id=&#34;our-resarch-project&#34;&gt;Our Resarch Project&lt;/h2&gt;
&lt;p&gt;Today, we are looking at a big (and entirely fictional) data base of the common house sparrow (&lt;em&gt;Passer domesticus&lt;/em&gt;). In particular, we are interested in the &lt;strong&gt;Evolution of &lt;em&gt;Passer domesticus&lt;/em&gt; in Response to Climate Change&lt;/strong&gt; which was previously explained &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/research-project/&#34; target=&#34;_blank&#34;&gt; here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-data&#34;&gt;The Data&lt;/h3&gt;
&lt;p&gt;I have created a large data set for this exercise which is available &lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/excursions-into-biostatistics/Data.rar&#34; target=&#34;_blank&#34;&gt; here&lt;/a&gt; and we previously cleaned up so that is now usable &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/data-handling-and-data-assumptions/&#34; target=&#34;_blank&#34;&gt; here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;reading-the-data-into-r&#34;&gt;Reading the Data into &lt;code&gt;R&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start by reading the data into &lt;code&gt;R&lt;/code&gt; and taking an initial look at it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Sparrows_df &amp;lt;- readRDS(file.path(&amp;quot;Data&amp;quot;, &amp;quot;SparrowDataClimate.rds&amp;quot;))
head(Sparrows_df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Index Latitude Longitude     Climate Population.Status Weight Height Wing.Chord Colour    Sex Nesting.Site Nesting.Height Number.of.Eggs Egg.Weight Flock Home.Range Predator.Presence Predator.Type
## 1    SI       60       100 Continental            Native  34.05  12.87       6.67  Brown   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large               Yes         Avian
## 2    SI       60       100 Continental            Native  34.86  13.68       6.79   Grey   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large               Yes         Avian
## 3    SI       60       100 Continental            Native  32.34  12.66       6.64  Black Female        Shrub          35.60              1       3.21     C      Large               Yes         Avian
## 4    SI       60       100 Continental            Native  34.78  15.09       7.00  Brown Female        Shrub          47.75              0         NA     E      Large               Yes         Avian
## 5    SI       60       100 Continental            Native  35.01  13.82       6.81   Grey   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large               Yes         Avian
## 6    SI       60       100 Continental            Native  32.36  12.67       6.64  Brown Female        Shrub          32.47              1       3.17     E      Large               Yes         Avian
##       TAvg      TSD
## 1 269.9596 15.71819
## 2 269.9596 15.71819
## 3 269.9596 15.71819
## 4 269.9596 15.71819
## 5 269.9596 15.71819
## 6 269.9596 15.71819
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;hypotheses&#34;&gt;Hypotheses&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s remember our hypotheses:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Sparrow Morphology&lt;/strong&gt; is determined by:&lt;br&gt;
A. &lt;em&gt;Climate Conditions&lt;/em&gt; with sparrows in stable, warm environments fairing better than those in colder, less stable ones.&lt;br&gt;
B. &lt;em&gt;Competition&lt;/em&gt; with sparrows in small flocks doing better than those in big flocks.&lt;br&gt;
C. &lt;em&gt;Predation&lt;/em&gt; with sparrows under pressure of predation doing worse than those without.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sites&lt;/strong&gt;  accurately represent &lt;strong&gt;sparrow morphology&lt;/strong&gt;. This may mean:&lt;br&gt;
A. &lt;em&gt;Population status&lt;/em&gt; as inferred through morphology.&lt;br&gt;
B. &lt;em&gt;Site index&lt;/em&gt; as inferred through morphology.&lt;br&gt;
C. &lt;em&gt;Climate&lt;/em&gt; as inferred through morphology.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Quite obviously, &lt;strong&gt;hypothesis 1&lt;/strong&gt; is the only one lending itself well to regression exercises. Since we have three variables that describe sparrow morphology (&lt;code&gt;Weight&lt;/code&gt;, &lt;code&gt;Height&lt;/code&gt;, &lt;code&gt;Wing.Chord&lt;/code&gt;) and multi-response-variable models are definitely above the pay-grade of this material, we need to select one of our morphology variables as our response variable here. Remembering the &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/classifications-order-from-chaos/&#34; target=&#34;_blank&#34;&gt; Classification exercise&lt;/a&gt;, we recall that &lt;code&gt;Weight&lt;/code&gt; was the most informative morphological trait so far. Hence, we stick with this one for these exercises.&lt;/p&gt;
&lt;h2 id=&#34;r-environment&#34;&gt;&lt;code&gt;R&lt;/code&gt; Environment&lt;/h2&gt;
&lt;p&gt;For this exercise, we will need the following packages:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.load.package &amp;lt;- function(x) {
  if (!require(x, character.only = TRUE)) {
    install.packages(x, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;)
  }
  require(x, character.only = TRUE)
}
package_vec &amp;lt;- c(
  &amp;quot;ggplot2&amp;quot;, # for visualisation
  &amp;quot;nlme&amp;quot;, # for mixed effect models
  &amp;quot;HLMdiag&amp;quot; # for leverage of mixed effect models
)
sapply(package_vec, install.load.package)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ggplot2    nlme HLMdiag 
##    TRUE    TRUE    TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the above function is way more sophisticated than the usual &lt;code&gt;install.packages()&lt;/code&gt; &amp;amp; &lt;code&gt;library()&lt;/code&gt; approach since it automatically detects which packages require installing and only install these thus not overwriting already installed packages.&lt;/p&gt;
&lt;h2 id=&#34;linear-regression&#34;&gt;Linear Regression&lt;/h2&gt;
&lt;p&gt;Remember the &lt;strong&gt;Assumptions of Linear Regression&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Variable values follow homoscedasticity (equal variance across entire data range)&lt;/li&gt;
&lt;li&gt;Residuals follow normal distribution (normality)&lt;/li&gt;
&lt;li&gt;Absence of influential outliers&lt;/li&gt;
&lt;li&gt;Response and Predictor are related in a linear fashion&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;climate-conditions&#34;&gt;Climate Conditions&lt;/h3&gt;
&lt;h4 id=&#34;weight-as-a-result-of-average-temperature-tavg&#34;&gt;&lt;code&gt;Weight&lt;/code&gt; as a result of average temperature (&lt;code&gt;TAvg&lt;/code&gt;)&lt;/h4&gt;
&lt;p&gt;Before we begin, let&amp;rsquo;s plot the data we want to model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = Sparrows_df, aes(y = Weight, x = TAvg)) +
  stat_smooth(method = &amp;quot;lm&amp;quot;) +
  geom_point() +
  theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;1440&#34; /&gt;
I have an inkling that we might run into some issues here, but let&amp;rsquo;s continue for now:&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s build the actual model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_ClimateTavg &amp;lt;- lm(Weight ~ TAvg, data = Sparrows_df)
par(mfrow = c(2, 2))
plot(H1_ClimateTavg)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;1440&#34; /&gt;
While the meeting of most of the assumptions here might be debatable, we certainly cannot accept a linear model with residuals this non-normal distributed. Sow hat do we? We try to remove as many confounding effects as possible!&lt;/p&gt;
&lt;p&gt;Remember the plot-locations, climates, and population statues in the data set (go back &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/research-project/&#34; target=&#34;_blank&#34;&gt; here&lt;/a&gt; if necessary). How about we look exclusively at stations in the Americas which are all housing introduced sparrow populations and almost exclusively lie in coastal habitats? I&amp;rsquo;ll remove all non-coastal climate sites and only consider the central and North America here. Let&amp;rsquo;s do that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# everything west of -7Â° is on the Americas
# every that&#39;s coastal climate type is retained
# everything north of 11Â° is central and north America
CentralNorthAm_df &amp;lt;- Sparrows_df[Sparrows_df$Longitude &amp;lt; -7 &amp;amp; Sparrows_df$Climate == &amp;quot;Coastal&amp;quot; &amp;amp; Sparrows_df$Latitude &amp;gt; 11, ]
ggplot(data = CentralNorthAm_df, aes(y = Weight, x = TAvg)) +
  stat_smooth(method = &amp;quot;lm&amp;quot;) +
  geom_point() +
  theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_ClimateTavg &amp;lt;- lm(Weight ~ TAvg, data = CentralNorthAm_df)
par(mfrow = c(2, 2))
plot(H1_ClimateTavg)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-5-2.png&#34; width=&#34;1440&#34; /&gt;
This looks sensible to me! The scatterplot shows that sparrows are lighter in warmer areas which makes sense to me.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(H1_ClimateTavg)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Weight ~ TAvg, data = CentralNorthAm_df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -4.1440 -1.0861  0.0219  0.9823  3.9743 
## 
## Coefficients:
##              Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 45.167990   1.618752  27.903  &amp;lt; 2e-16 ***
## TAvg        -0.049501   0.005635  -8.785 2.63e-16 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1.404 on 248 degrees of freedom
## Multiple R-squared:  0.2373,	Adjusted R-squared:  0.2343 
## F-statistic: 77.18 on 1 and 248 DF,  p-value: 2.633e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our model estimates show the same pattern.&lt;/p&gt;
&lt;h4 id=&#34;weight-as-a-result-of-temperature-variability-tsd&#34;&gt;&lt;code&gt;Weight&lt;/code&gt; as a result of temperature variability (&lt;code&gt;TSD&lt;/code&gt;)&lt;/h4&gt;
&lt;p&gt;I&amp;rsquo;ll continue with my North American, coastal subset here:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# everything west of -7Â° is on the Americas
# every that&#39;s coastal climate type is retained
# everything north of 11Â° is central and north America
CentralNorthAm_df &amp;lt;- Sparrows_df[Sparrows_df$Longitude &amp;lt; -7 &amp;amp; Sparrows_df$Climate == &amp;quot;Coastal&amp;quot; &amp;amp; Sparrows_df$Latitude &amp;gt; 11, ]
ggplot(data = CentralNorthAm_df, aes(y = Weight, x = TSD)) +
  stat_smooth(method = &amp;quot;lm&amp;quot;) +
  geom_point() +
  theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_ClimateTSD &amp;lt;- lm(Weight ~ TSD, data = CentralNorthAm_df)
par(mfrow = c(2, 2))
plot(H1_ClimateTSD)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-7-2.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(H1_ClimateTSD)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Weight ~ TSD, data = CentralNorthAm_df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.7978 -1.0053  0.0002  1.0042  3.5648 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 29.61266    0.14922  198.45   &amp;lt;2e-16 ***
## TSD          0.22680    0.02069   10.96   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1.319 on 248 degrees of freedom
## Multiple R-squared:  0.3263,	Adjusted R-squared:  0.3236 
## F-statistic: 120.1 on 1 and 248 DF,  p-value: &amp;lt; 2.2e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again all assumptions are met and the model itself is very intuitive: The more variable the climate, the heavier the sparrows.&lt;/p&gt;
&lt;h4 id=&#34;weight-as-a-result-of-both-temperature-mean-tavg-and-temperature-variability-tsd&#34;&gt;&lt;code&gt;Weight&lt;/code&gt; as a result of both temperature mean (&lt;code&gt;TAvg&lt;/code&gt;) and temperature variability (&lt;code&gt;TSD&lt;/code&gt;)&lt;/h4&gt;
&lt;p&gt;Naturally, we continue with the same subset of the data as before:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# everything west of -7Â° is on the Americas
# every that&#39;s coastal climate type is retained
# everything north of 11Â° is central and north America
CentralNorthAm_df &amp;lt;- Sparrows_df[Sparrows_df$Longitude &amp;lt; -7 &amp;amp; Sparrows_df$Climate == &amp;quot;Coastal&amp;quot; &amp;amp; Sparrows_df$Latitude &amp;gt; 11, ]
H1_ClimateCont &amp;lt;- lm(Weight ~ TAvg + TSD, data = CentralNorthAm_df)
par(mfrow = c(2, 2))
plot(H1_ClimateCont)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(H1_ClimateCont)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Weight ~ TAvg + TSD, data = CentralNorthAm_df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.6593 -1.0263  0.0272  0.9207  3.2359 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 16.59866    4.68943   3.540 0.000479 ***
## TAvg         0.04215    0.01518   2.777 0.005915 ** 
## TSD          0.38142    0.05931   6.431 6.52e-10 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1.302 on 247 degrees of freedom
## Multiple R-squared:  0.3467,	Adjusted R-squared:  0.3414 
## F-statistic: 65.54 on 2 and 247 DF,  p-value: &amp;lt; 2.2e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Interestingly, average temperature has a different (and weaker) effect now than when investigated in isolation. Variability of temperature has become even more important (i.e. stronger effect). So which model should we use? That&amp;rsquo;s exactly what we&amp;rsquo;ll investigate in our session on &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/excursion-into-biostatistics/&#34; target=&#34;_blank&#34;&gt; Model Selection and Validation&lt;/a&gt;!&lt;/p&gt;
&lt;h3 id=&#34;competition&#34;&gt;Competition&lt;/h3&gt;
&lt;p&gt;Next, we build models which aim to explain sparrow &lt;code&gt;Weight&lt;/code&gt; through variables pertaining to competition. To do so, I first calculate the size for each flock at each site and append these to each bird:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;FlockSizes &amp;lt;- with(Sparrows_df, table(Flock, Index))
Sparrows_df$Flock.Size &amp;lt;- NA
for (Flock_Iter in rownames(FlockSizes)) { # loop over flocks
  for (Site_Iter in colnames(FlockSizes)) { # loop over sites
    Positions &amp;lt;- Sparrows_df$Index == Site_Iter &amp;amp; Sparrows_df$Flock == Flock_Iter
    Sparrows_df$Flock.Size[Positions] &amp;lt;- FlockSizes[Flock_Iter, Site_Iter]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that done, we can now build our models up again like we did with the climate data before.&lt;/p&gt;
&lt;h4 id=&#34;weight-as-a-result-of-home-range-size-homerange&#34;&gt;&lt;code&gt;Weight&lt;/code&gt; as a result of Home Range size (&lt;code&gt;Home.Range&lt;/code&gt;)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = Sparrows_df, aes(x = Home.Range, y = Weight)) +
  geom_boxplot() +
  theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_CompetitionHR &amp;lt;- lm(Weight ~ Home.Range, data = Sparrows_df)
par(mfrow = c(2, 2))
plot(H1_CompetitionHR)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-10-2.png&#34; width=&#34;1440&#34; /&gt;
Nope. Those residuals have me nope out. We won&amp;rsquo;t use this model.&lt;/p&gt;
&lt;h4 id=&#34;weight-as-a-result-of-flock-size-size-flocksize&#34;&gt;&lt;code&gt;Weight&lt;/code&gt; as a result of Flock Size size (&lt;code&gt;Flock.Size&lt;/code&gt;)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = Sparrows_df, aes(x = Flock.Size, y = Weight)) +
  stat_smooth(method = &amp;quot;lm&amp;quot;) +
  geom_point() +
  theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_CompetitionFS &amp;lt;- lm(Weight ~ Flock.Size, data = Sparrows_df)
par(mfrow = c(2, 2))
plot(H1_CompetitionFS)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-11-2.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(H1_CompetitionFS)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Weight ~ Flock.Size, data = Sparrows_df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -5.7421 -1.2163  0.0961  1.2823  4.7176 
## 
## Coefficients:
##              Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 35.456378   0.114500   309.7   &amp;lt;2e-16 ***
## Flock.Size  -0.237908   0.003831   -62.1   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1.893 on 1064 degrees of freedom
## Multiple R-squared:  0.7838,	Adjusted R-squared:  0.7836 
## F-statistic:  3857 on 1 and 1064 DF,  p-value: &amp;lt; 2.2e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that&amp;rsquo;s a neat model! Not only do the diagnostics plot look spot-on (not showing these here), the relationship is strong and clear to see - the bigger the flock, the lighter the sparrow.&lt;/p&gt;
&lt;h4 id=&#34;weight-as-a-result-of-home-range-size-homerange-and-flock-size-size-flocksize&#34;&gt;&lt;code&gt;Weight&lt;/code&gt; as a result of Home Range size (&lt;code&gt;Home.Range&lt;/code&gt;) and Flock Size size (&lt;code&gt;Flock.Size&lt;/code&gt;)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = Sparrows_df, aes(x = Flock.Size, y = Weight, col = Home.Range)) +
  geom_point() +
  stat_smooth(method = &amp;quot;lm&amp;quot;) +
  theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_CompetitionFULL &amp;lt;- lm(Weight ~ Home.Range * Flock.Size, data = Sparrows_df)
par(mfrow = c(2, 2))
plot(H1_CompetitionFULL)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-12-2.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(H1_CompetitionFULL)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Weight ~ Home.Range * Flock.Size, data = Sparrows_df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -5.5599 -1.2261  0.0427  1.2806  4.5553 
## 
## Coefficients:
##                             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)                 33.29279    0.31986 104.086  &amp;lt; 2e-16 ***
## Home.RangeMedium             0.29700    0.89288   0.333    0.739    
## Home.RangeSmall              1.88176    0.35265   5.336 1.16e-07 ***
## Flock.Size                  -0.07337    0.01848  -3.970 7.66e-05 ***
## Home.RangeMedium:Flock.Size -0.03363    0.05787  -0.581    0.561    
## Home.RangeSmall:Flock.Size  -0.16211    0.01896  -8.548  &amp;lt; 2e-16 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1.8 on 1060 degrees of freedom
## Multiple R-squared:  0.8051,	Adjusted R-squared:  0.8042 
## F-statistic:   876 on 5 and 1060 DF,  p-value: &amp;lt; 2.2e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see that our model is unsure of what to do with the home ranges when it comes to medium-sized ranges. The scatterplot shows that is is probably due to us not having a lot of samples for medium-sized home-ranges. Aside from that, our model meets all assumptions and produces quite intuitive parameter estimates.&lt;/p&gt;
&lt;h3 id=&#34;predation&#34;&gt;Predation&lt;/h3&gt;
&lt;p&gt;Next, we look at sparrow &lt;code&gt;Weight&lt;/code&gt; through the lens of predation. To do so, we need to recode all &lt;code&gt;NA&lt;/code&gt;s in the &lt;code&gt;Predator.Type&lt;/code&gt; variable into something else for our models ro tun properly. I chose &lt;code&gt;&amp;quot;None&amp;quot;&lt;/code&gt; here to indicate that there is no predation-pressure at these sites:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;levels(Sparrows_df$Predator.Type) &amp;lt;- c(levels(Sparrows_df$Predator.Type), &amp;quot;None&amp;quot;)
Sparrows_df$Predator.Type[is.na(Sparrows_df$Predator.Type)] &amp;lt;- &amp;quot;None&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that taken care of, we again build our models one-by-one.&lt;/p&gt;
&lt;p&gt;Again, because of issues with normality of residuals, we default to our three sites across Central and North America, which are of coastal climate:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# everything west of -7Â° is on the Americas
# every that&#39;s coastal climate type is retained
# everything north of 11Â° is central and north America
CentralNorthAm_df &amp;lt;- Sparrows_df[Sparrows_df$Longitude &amp;lt; -7 &amp;amp; Sparrows_df$Climate == &amp;quot;Coastal&amp;quot; &amp;amp; Sparrows_df$Latitude &amp;gt; 11, ]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;weight-as-a-result-of-predatorpresence&#34;&gt;&lt;code&gt;Weight&lt;/code&gt; as a result of &lt;code&gt;Predator.Presence&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = CentralNorthAm_df, aes(x = Predator.Presence, y = Weight)) +
  geom_boxplot() +
  theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_PredationPresence &amp;lt;- lm(Weight ~ Predator.Presence, data = CentralNorthAm_df)
par(mfrow = c(2, 2))
plot(H1_PredationPresence)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-15-2.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(H1_PredationPresence)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Weight ~ Predator.Presence, data = CentralNorthAm_df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -4.5051 -1.0701 -0.0396  1.0749  4.2549 
## 
## Coefficients:
##                      Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)           31.4141     0.1752 179.261  &amp;lt; 2e-16 ***
## Predator.PresenceYes  -0.6589     0.2131  -3.092  0.00222 ** 
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1.577 on 248 degrees of freedom
## Multiple R-squared:  0.03711,	Adjusted R-squared:  0.03323 
## F-statistic: 9.557 on 1 and 248 DF,  p-value: 0.002219
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;According to our model, sparrows under pressure of predation are lighter than those which aren&amp;rsquo;t. Does that make sense? Intuitively, yes, but I would argue that there are too many confounding variable here to be sure.&lt;/p&gt;
&lt;h4 id=&#34;weight-as-a-result-of-predatortype&#34;&gt;&lt;code&gt;Weight&lt;/code&gt; as a result of &lt;code&gt;Predator.Type&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = CentralNorthAm_df, aes(x = Predator.Type, y = Weight)) +
  geom_boxplot() +
  theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_PredationType &amp;lt;- lm(Weight ~ Predator.Type, data = CentralNorthAm_df)
par(mfrow = c(2, 2))
plot(H1_PredationType)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-16-2.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(H1_PredationType)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Weight ~ Predator.Type, data = CentralNorthAm_df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.6593 -1.0263  0.0272  0.9207  3.2359 
## 
## Coefficients:
##                        Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)             29.9093     0.1270 235.439  &amp;lt; 2e-16 ***
## Predator.TypeNon-Avian   2.2335     0.2064  10.819  &amp;lt; 2e-16 ***
## Predator.TypeNone        1.5047     0.1925   7.817 1.56e-13 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1.302 on 247 degrees of freedom
## Multiple R-squared:  0.3467,	Adjusted R-squared:  0.3414 
## F-statistic: 65.54 on 2 and 247 DF,  p-value: &amp;lt; 2.2e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK. This clearly shows that there are either some confounds present or that our data shows something very counter-intuitive. Sparrows under nor predation are lighter than sparrows under non-avian predation? That makes no sense to me.&lt;/p&gt;
&lt;h4 id=&#34;weight-as-a-result-of-predatorpresence-and-predatortype&#34;&gt;&lt;code&gt;Weight&lt;/code&gt; as a result of &lt;code&gt;Predator.Presence&lt;/code&gt; and &lt;code&gt;Predator.Type&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = CentralNorthAm_df, aes(x = Predator.Presence, y = Weight, fill = Predator.Type)) +
  geom_boxplot() +
  theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_PredationFULL &amp;lt;- lm(Weight ~ Predator.Presence + Predator.Type, data = Sparrows_df)
par(mfrow = c(2, 2))
plot(H1_PredationFULL)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-17-2.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(H1_PredationFULL)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Weight ~ Predator.Presence + Predator.Type, data = Sparrows_df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -7.6635 -2.2987 -0.0844  1.9563  9.6165 
## 
## Coefficients: (1 not defined because of singularities)
##                        Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)             30.6145     0.1816  168.60   &amp;lt;2e-16 ***
## Predator.PresenceYes    -3.5709     0.2387  -14.96   &amp;lt;2e-16 ***
## Predator.TypeNon-Avian   5.2809     0.2789   18.94   &amp;lt;2e-16 ***
## Predator.TypeNone            NA         NA      NA       NA    
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 3.431 on 1063 degrees of freedom
## Multiple R-squared:  0.2901,	Adjusted R-squared:  0.2888 
## F-statistic: 217.2 on 2 and 1063 DF,  p-value: &amp;lt; 2.2e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those residuals don&amp;rsquo;t look good, but that&amp;rsquo;s not what I am after with this model. Immediately, we should notice that our model returns &lt;code&gt;NA&lt;/code&gt; for the parameter estimate of &lt;code&gt;Predator.TypeNone&lt;/code&gt;. Why does that happen? Because &lt;code&gt;Predator.TypeNone&lt;/code&gt; coincides with &lt;code&gt;Predator.PresenceNo&lt;/code&gt; (the &lt;code&gt;Intercept&lt;/code&gt;) of this model and so does not provide any additional information. In fact, &lt;code&gt;Predator.Type&lt;/code&gt; offers all the information of &lt;code&gt;Predator.Presence&lt;/code&gt; and then some! Consequently, including both in a model does not make sense and we can immediately disqualify this model.&lt;/p&gt;
&lt;h3 id=&#34;null--full-model&#34;&gt;Null &amp;amp; Full Model&lt;/h3&gt;
&lt;p&gt;For some comparison further down the line, we need a null model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_Null_Sparrows &amp;lt;- lm(Weight ~ 1, data = Sparrows_df)
H1_Null_CNA &amp;lt;- lm(Weight ~ 1, data = CentralNorthAm_df)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our full model contains all of our aforementioned variables/parameters to the best of our knowledge/intuition at this point. We will get to making this model better later. Don&amp;rsquo;t worry:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_FULL_Sparrows &amp;lt;- lm(Weight ~ Climate + TAvg + TSD + Home.Range * Flock.Size + Predator.Type, data = Sparrows_df)
par(mfrow = c(2, 2))
plot(H1_FULL_Sparrows)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(H1_FULL_Sparrows)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Weight ~ Climate + TAvg + TSD + Home.Range * Flock.Size + 
##     Predator.Type, data = Sparrows_df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -5.2164 -1.0436  0.0939  1.0495  4.7403 
## 
## Coefficients:
##                             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)                 43.65271    4.09482  10.660  &amp;lt; 2e-16 ***
## ClimateContinental           2.28851    0.31524   7.259 7.53e-13 ***
## ClimateSemi-Coastal         -0.79097    0.30663  -2.580  0.01003 *  
## TAvg                        -0.04252    0.01402  -3.034  0.00247 ** 
## TSD                          0.01431    0.04032   0.355  0.72272    
## Home.RangeMedium             1.63110    0.85370   1.911  0.05632 .  
## Home.RangeSmall              2.36146    0.41639   5.671 1.83e-08 ***
## Flock.Size                  -0.03445    0.01896  -1.817  0.06955 .  
## Predator.TypeNon-Avian       0.24253    0.16673   1.455  0.14605    
## Predator.TypeNone            0.75123    0.17268   4.350 1.49e-05 ***
## Home.RangeMedium:Flock.Size -0.10115    0.05614  -1.802  0.07186 .  
## Home.RangeSmall:Flock.Size  -0.16452    0.01990  -8.267 4.09e-16 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1.605 on 1054 degrees of freedom
## Multiple R-squared:  0.846,	Adjusted R-squared:  0.8444 
## F-statistic: 526.6 on 11 and 1054 DF,  p-value: &amp;lt; 2.2e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Already at this point, it is interesting to point out how some previously non-significant effects drop out while other become significant due to the inclusion of all parameters in one model.&lt;/p&gt;
&lt;p&gt;Now we also need a full model for our Central-/North-America data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_FULL_CNA &amp;lt;- lm(Weight ~ TAvg + TSD + Home.Range * Flock.Size + Predator.Type, data = CentralNorthAm_df)
par(mfrow = c(2, 2))
plot(H1_FULL_CNA)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(H1_FULL_CNA)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Weight ~ TAvg + TSD + Home.Range * Flock.Size + 
##     Predator.Type, data = CentralNorthAm_df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.6979 -0.9364 -0.0501  1.0483  3.3590 
## 
## Coefficients: (2 not defined because of singularities)
##                             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)                 14.18473    6.20215   2.287   0.0231 *  
## TAvg                         0.05336    0.02038   2.618   0.0094 ** 
## TSD                          0.39853    0.07842   5.082 7.48e-07 ***
## Home.RangeMedium            -3.83588    1.99164  -1.926   0.0553 .  
## Home.RangeSmall             -1.50681    1.03368  -1.458   0.1462    
## Flock.Size                  -0.07581    0.05850  -1.296   0.1963    
## Predator.TypeNon-Avian            NA         NA      NA       NA    
## Predator.TypeNone                 NA         NA      NA       NA    
## Home.RangeMedium:Flock.Size  0.29821    0.13273   2.247   0.0256 *  
## Home.RangeSmall:Flock.Size   0.10097    0.06212   1.625   0.1054    
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1.285 on 242 degrees of freedom
## Multiple R-squared:  0.3765,	Adjusted R-squared:  0.3585 
## F-statistic: 20.88 on 7 and 242 DF,  p-value: &amp;lt; 2.2e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;summary-of-linear-regression&#34;&gt;Summary of Linear Regression&lt;/h3&gt;
&lt;p&gt;To streamline the next few steps of our exercise on &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/excursion-into-biostatistics/&#34; target=&#34;_blank&#34;&gt; Model Selection and Validation&lt;/a&gt;, we combine all of our models into a &lt;code&gt;list&lt;/code&gt; object for now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_ModelSparrows_ls &amp;lt;- list(
  H1_Null_Sparrows,
  H1_CompetitionFS,
  H1_CompetitionFULL,
  H1_FULL_Sparrows
)
names(H1_ModelSparrows_ls) &amp;lt;- c(
  &amp;quot;Null&amp;quot;,
  &amp;quot;Comp_Flock.Size&amp;quot;, &amp;quot;Comp_Full&amp;quot;,
  &amp;quot;Full&amp;quot;
)
H1_ModelCNA_ls &amp;lt;- list(
  H1_Null_CNA,
  H1_ClimateTavg,
  H1_ClimateTSD,
  H1_ClimateCont,
  H1_PredationPresence,
  H1_PredationType,
  H1_FULL_CNA
)
names(H1_ModelCNA_ls) &amp;lt;- c(
  &amp;quot;Null&amp;quot;,
  &amp;quot;Clim_TAvg&amp;quot;, &amp;quot;Clim_TSD&amp;quot;, &amp;quot;Clim_Full&amp;quot;,
  &amp;quot;Pred_Pres&amp;quot;, &amp;quot;Pred_Type&amp;quot;,
  &amp;quot;Full&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;mixed-effect-models&#34;&gt;Mixed Effect Models&lt;/h2&gt;
&lt;p&gt;Remember the &lt;strong&gt;Assumptions of Mixed Effect Models&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Variable values follow homoscedasticity (equal variance across entire data range)&lt;/li&gt;
&lt;li&gt;Residuals follow normal distribution (normality)&lt;/li&gt;
&lt;li&gt;Absence of influential outliers&lt;/li&gt;
&lt;li&gt;Response and Predictor are related in a linear fashion&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;climate-conditions-1&#34;&gt;Climate Conditions&lt;/h3&gt;
&lt;p&gt;Here, I create a mixed effect model that is accounting predicting &lt;code&gt;Weight&lt;/code&gt; with a combination &lt;code&gt;TAvg&lt;/code&gt; and &lt;code&gt;TSD&lt;/code&gt; while accounting for random intercepts of &lt;code&gt;Index&lt;/code&gt; and &lt;code&gt;Population.Status&lt;/code&gt;. As we learned in our exercise on &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/classifications-order-from-chaos/&#34; target=&#34;_blank&#34;&gt; Classifications&lt;/a&gt;, these two are probably important in controlling for some morphology effects in &lt;code&gt;Weight&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I create such a model for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;entire sparrow data data set&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Only the &lt;strong&gt;Central-/North-America sparrows&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;to make models comparable to our previous basic, linear models.&lt;/p&gt;
&lt;h4 id=&#34;global-model&#34;&gt;Global Model&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_Climate_ME_Sparrows &amp;lt;- lme(Weight ~ TAvg + TSD,
  random = list(
    Population.Status = ~1,
    Index = ~1
  ),
  data = Sparrows_df
)
par(mfrow = c(2, 2))
plot(fitted(H1_Climate_ME_Sparrows), resid(H1_Climate_ME_Sparrows)) # Homogeneity of Variances, values around 0, no pattern --&amp;gt; good!
plot(fitted(H1_Climate_ME_Sparrows), Sparrows_df$Weight) # Linearity, there is a clear pattern here --&amp;gt; bad!
qqnorm(resid(H1_Climate_ME_Sparrows)) # Normality, residuals are normal distributed -&amp;gt; good!
hist(leverage(H1_Climate_ME_Sparrows)[, 1]) # Leverage, not really any outliers --&amp;gt; good!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;1440&#34; /&gt;
Quite evidently, the assumption of linearity is violated. Notice that we would not like to use this model for predictions, but will carry it forward for the purpose of subsequent &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/excursion-into-biostatistics/&#34; target=&#34;_blank&#34;&gt; Model Selection and Validation&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(H1_Climate_ME_Sparrows)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Linear mixed-effects model fit by REML
##   Data: Sparrows_df 
##        AIC      BIC    logLik
##   3557.109 3586.922 -1772.554
## 
## Random effects:
##  Formula: ~1 | Population.Status
##         (Intercept)
## StdDev: 0.001507855
## 
##  Formula: ~1 | Index %in% Population.Status
##         (Intercept) Residual
## StdDev:    2.640311 1.237155
## 
## Fixed effects:  Weight ~ TAvg + TSD 
##                Value Std.Error   DF    t-value p-value
## (Intercept) 37.83099 31.229059 1055  1.2114034  0.2260
## TAvg        -0.03070  0.104602    7 -0.2934692  0.7777
## TSD          0.27536  0.265143    7  1.0385452  0.3336
##  Correlation: 
##      (Intr) TAvg  
## TAvg -0.999       
## TSD  -0.826  0.809
## 
## Standardized Within-Group Residuals:
##          Min           Q1          Med           Q3          Max 
## -2.956660984 -0.746001839  0.004452834  0.722973350  2.617329146 
## 
## Number of Observations: 1066
## Number of Groups: 
##            Population.Status Index %in% Population.Status 
##                            2                           11
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;central-north-american-model&#34;&gt;Central-/North-American Model&lt;/h4&gt;
&lt;p&gt;Accounting for population status in among the Central-/North-American sites makes no sense as all of them are introduced populations.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_Climate_ME_CNA &amp;lt;- lme(Weight ~ TAvg + TSD,
  random = list(Index = ~1),
  data = CentralNorthAm_df
)
par(mfrow = c(2, 2))
plot(fitted(H1_Climate_ME_CNA), resid(H1_Climate_ME_CNA)) # Homogeneity of Variances, values around 0, no pattern --&amp;gt; good!
plot(fitted(H1_Climate_ME_CNA), CentralNorthAm_df$Weight) # Linearity, there is no clear pattern here --&amp;gt; good!
qqnorm(resid(H1_Climate_ME_CNA)) # Normality, residuals are normal distributed -&amp;gt; good!
hist(leverage(H1_Climate_ME_CNA)[, 1]) # Leverage, not really any outliers --&amp;gt; good!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;With this model, all of our assumption are met nicely!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(H1_Climate_ME_CNA)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Linear mixed-effects model fit by REML
##   Data: CentralNorthAm_df 
##        AIC      BIC    logLik
##   863.9566 881.5035 -426.9783
## 
## Random effects:
##  Formula: ~1 | Index
##         (Intercept) Residual
## StdDev:   0.3802608 1.301734
## 
## Fixed effects:  Weight ~ TAvg + TSD 
##                 Value Std.Error  DF   t-value p-value
## (Intercept) 16.598661 13.291655 247 1.2488031  0.2129
## TAvg         0.042146  0.042863   0 0.9832757     NaN
## TSD          0.381424  0.174011   0 2.1919464     NaN
##  Correlation: 
##      (Intr) TAvg  
## TAvg -0.999       
## TSD  -0.953  0.945
## 
## Standardized Within-Group Residuals:
##        Min         Q1        Med         Q3        Max 
## -2.8111222 -0.7883782  0.0208856  0.7072618  2.4858581 
## 
## Number of Observations: 250
## Number of Groups: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;competition-1&#34;&gt;Competition&lt;/h3&gt;
&lt;p&gt;With competition effects as my goal, I can now include climate classification as one of the random effects! Of course, this is with the exception of the Central-/North-American data as all of these sites are of the type &amp;ldquo;Coastal&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Again, we do so for a global and a local model:&lt;/p&gt;
&lt;h4 id=&#34;global-model-1&#34;&gt;Global Model&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_Comp_ME_Sparrows &amp;lt;- lme(Weight ~ Home.Range * Flock.Size,
  random = list(
    Population.Status = ~1,
    Climate = ~1
  ),
  data = Sparrows_df
)
par(mfrow = c(2, 2))
plot(fitted(H1_Comp_ME_Sparrows), resid(H1_Comp_ME_Sparrows)) # Homogeneity of Variances, values around 0, no pattern --&amp;gt; good!
plot(fitted(H1_Comp_ME_Sparrows), Sparrows_df$Weight) # Linearity, there is a clear pattern here --&amp;gt; bad!
qqnorm(resid(H1_Comp_ME_Sparrows)) # Normality, residuals are normal distributed -&amp;gt; good!
hist(leverage(H1_Comp_ME_Sparrows)[, 1]) # Leverage, not really any outliers --&amp;gt; good!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-26-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;central-north-american-model-1&#34;&gt;Central-/North-American Model&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_Comp_ME_CNA &amp;lt;- lme(Weight ~ Home.Range * Flock.Size,
  random = list(Climate = ~1),
  data = CentralNorthAm_df
)
par(mfrow = c(2, 2))
plot(fitted(H1_Comp_ME_CNA), resid(H1_Comp_ME_CNA)) # Homogeneity of Variances, values around 0, no pattern --&amp;gt; good!
plot(fitted(H1_Comp_ME_CNA), CentralNorthAm_df$Weight) # Linearity, there is no clear pattern here --&amp;gt; good!
qqnorm(resid(H1_Comp_ME_CNA)) # Normality, residuals are normal distributed -&amp;gt; good!
hist(leverage(H1_Comp_ME_CNA)[, 1]) # Leverage, not really any outliers --&amp;gt; good!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-27-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;predation-1&#34;&gt;Predation&lt;/h3&gt;
&lt;p&gt;With predation effects, I do the same as with competition effects and set a random intercept for climate classification at each site for a global and a local model:&lt;/p&gt;
&lt;h4 id=&#34;global-model-2&#34;&gt;Global Model&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_Pred_ME_Sparrows &amp;lt;- lme(Weight ~ Predator.Type,
  random = list(
    Population.Status = ~1,
    Climate = ~1
  ),
  data = Sparrows_df
)
par(mfrow = c(2, 2))
plot(fitted(H1_Pred_ME_Sparrows), resid(H1_Pred_ME_Sparrows)) # Homogeneity of Variances, values around 0, no pattern --&amp;gt; good!
plot(fitted(H1_Pred_ME_Sparrows), Sparrows_df$Weight) # Linearity, there is a clear pattern here --&amp;gt; bad!
qqnorm(resid(H1_Pred_ME_Sparrows)) # Normality, residuals are normal distributed -&amp;gt; good!
hist(leverage(H1_Pred_ME_Sparrows)[, 1]) # Leverage, not really any outliers --&amp;gt; good!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-28-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;central-north-american-model-2&#34;&gt;Central-/North-American Model&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_Pred_ME_CNA &amp;lt;- lme(Weight ~ Predator.Type,
  random = list(Index = ~1),
  data = CentralNorthAm_df
)
par(mfrow = c(2, 2))
plot(fitted(H1_Pred_ME_CNA), resid(H1_Pred_ME_CNA)) # Homogeneity of Variances, values around 0, no pattern --&amp;gt; good!
plot(fitted(H1_Pred_ME_CNA), CentralNorthAm_df$Weight) # Linearity, there is no clear pattern here --&amp;gt; good!
qqnorm(resid(H1_Pred_ME_CNA)) # Normality, residuals are normal distributed -&amp;gt; good!
hist(leverage(H1_Pred_ME_CNA)[, 1]) # Leverage, not really any outliers --&amp;gt; good!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-29-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;full-model&#34;&gt;Full Model&lt;/h3&gt;
&lt;h4 id=&#34;global-model-3&#34;&gt;Global Model&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_Full_ME_Sparrows &amp;lt;- lme(Weight ~ Predator.Type + Flock.Size * Home.Range + TAvg + TSD,
  random = list(Population.Status = ~1),
  data = Sparrows_df
)
par(mfrow = c(2, 2))
plot(fitted(H1_Full_ME_Sparrows), resid(H1_Full_ME_Sparrows)) # Homogeneity of Variances, values around 0, no pattern --&amp;gt; good!
plot(fitted(H1_Full_ME_Sparrows), Sparrows_df$Weight) # Linearity, there is a clear pattern here --&amp;gt; bad!
qqnorm(resid(H1_Full_ME_Sparrows)) # Normality, residuals are normal distributed -&amp;gt; good!
hist(leverage(H1_Full_ME_Sparrows)[, 1]) # Leverage, not really any outliers --&amp;gt; good!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-30-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;central-north-american-model-3&#34;&gt;Central-/North-American Model&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_Full_ME_CNA &amp;lt;- lme(Weight ~ Flock.Size * Home.Range + TAvg + TSD,
  random = list(Index = ~1),
  data = CentralNorthAm_df
)
par(mfrow = c(2, 2))
plot(fitted(H1_Full_ME_CNA), resid(H1_Full_ME_CNA)) # Homogeneity of Variances, values around 0, no pattern --&amp;gt; good!
plot(fitted(H1_Full_ME_CNA), CentralNorthAm_df$Weight) # Linearity, there is no clear pattern here --&amp;gt; good!
qqnorm(resid(H1_Full_ME_CNA)) # Normality, residuals are normal distributed -&amp;gt; good!
hist(leverage(H1_Full_ME_CNA)[, 1]) # Leverage, not really any outliers --&amp;gt; good!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-31-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;summary-of-mixed-effect-models&#34;&gt;Summary of Mixed Effect Models&lt;/h3&gt;
&lt;p&gt;Mixed effect models are hard and I have certainly not given them full credit for what they are worth here. I highly suggest giving 
&lt;a href=&#34;https://ourcodingclub.github.io/tutorials/mixed-models/#three&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; a read if you see yourself using mixed effect models.&lt;/p&gt;
&lt;p&gt;For now, I want to carry along only the full models for our session on &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/excursion-into-biostatistics/&#34; target=&#34;_blank&#34;&gt; Model Selection and Validation&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_ModelSparrows_ls$Mixed_Full &amp;lt;- H1_Full_ME_Sparrows
H1_ModelCNA_ls$Mixed_Full &amp;lt;- H1_Full_ME_CNA
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;generalised-linear-models&#34;&gt;Generalised Linear Models&lt;/h2&gt;
&lt;p&gt;For a generalised linear model, we may want to run a logistic regression, which we &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/classifications-order-from-chaos/#binary-logistic-regression-1&#34; target=&#34;_blank&#34;&gt; already did&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a different example, we now turn to &lt;em&gt;poisson models&lt;/em&gt; by trying to understand how &lt;code&gt;Flock.Size&lt;/code&gt; comes about.&lt;/p&gt;
&lt;p&gt;Firstly, we limit our data set to necessary variables and then cut all duplicate rows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Flock_df &amp;lt;- Sparrows_df[, c(&amp;quot;Flock.Size&amp;quot;, &amp;quot;TAvg&amp;quot;, &amp;quot;TSD&amp;quot;, &amp;quot;Index&amp;quot;, &amp;quot;Climate&amp;quot;, &amp;quot;Predator.Type&amp;quot;)]
Flock_df &amp;lt;- unique(Flock_df)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are ready to build a basic linear model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Flock_lm &amp;lt;- lm(Flock.Size ~ TAvg * TSD * Predator.Type, data = Flock_df)
par(mfrow = c(2, 2))
plot(Flock_lm)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-34-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Everything looks line but that Scale-Location plot. That one seems to indicate that variance in our &lt;code&gt;Flock.Size&lt;/code&gt; increases as the &lt;code&gt;Flock.Size&lt;/code&gt; itself increases - a very typical example of a poisson distributed variable.&lt;/p&gt;
&lt;p&gt;GLMs to the rescue with the poisson GLM:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;poisson.model &amp;lt;- glm(Flock.Size ~ TAvg * TSD * Predator.Type, data = Flock_df, family = poisson(link = &amp;quot;log&amp;quot;))
par(mfrow = c(2, 2))
plot(poisson.model)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;6_Regressions---Correlations-for-the-Advanced_files/figure-html/unnamed-chunk-35-1.png&#34; width=&#34;1440&#34; /&gt;
We fixed it! Now just for the parameter estimates:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(poisson.model)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## glm(formula = Flock.Size ~ TAvg * TSD * Predator.Type, family = poisson(link = &amp;quot;log&amp;quot;), 
##     data = Flock_df)
## 
## Deviance Residuals: 
##      Min        1Q    Median        3Q       Max  
## -2.02420  -0.88953  -0.09629   0.94122   2.12737  
## 
## Coefficients: (1 not defined because of singularities)
##                                   Estimate Std. Error z value Pr(&amp;gt;|z|)    
## (Intercept)                     -13.822674   2.540369  -5.441 5.29e-08 ***
## TAvg                              0.061744   0.008564   7.209 5.62e-13 ***
## TSD                               7.243621   1.056843   6.854 7.18e-12 ***
## Predator.TypeNon-Avian          -48.160439   9.412905  -5.116 3.11e-07 ***
## Predator.TypeNone                10.338971   8.694652   1.189    0.234    
## TAvg:TSD                         -0.026895   0.003936  -6.833 8.34e-12 ***
## TAvg:Predator.TypeNon-Avian       0.171883   0.033327   5.157 2.50e-07 ***
## TAvg:Predator.TypeNone           -0.039510   0.029180  -1.354    0.176    
## TSD:Predator.TypeNon-Avian        0.067442   0.041609   1.621    0.105    
## TSD:Predator.TypeNone            -6.742437   1.177538  -5.726 1.03e-08 ***
## TAvg:TSD:Predator.TypeNon-Avian         NA         NA      NA       NA    
## TAvg:TSD:Predator.TypeNone        0.025061   0.004321   5.800 6.64e-09 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## (Dispersion parameter for poisson family taken to be 1)
## 
##     Null deviance: 276.538  on 49  degrees of freedom
## Residual deviance:  53.417  on 39  degrees of freedom
## AIC: 310.71
## 
## Number of Fisher Scoring iterations: 4
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;final-models&#34;&gt;Final Models&lt;/h2&gt;
&lt;p&gt;In our upcoming &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/excursion-into-biostatistics/&#34; target=&#34;_blank&#34;&gt; Model Selection and Validation&lt;/a&gt; Session, we will look into how to compare and validate models. We now need to select some models we have created here today and want to carry forward to said session.&lt;/p&gt;
&lt;p&gt;We have already created &lt;code&gt;list&lt;/code&gt; objects for this purpose. Let&amp;rsquo;s save them alongside the data that was used to create them (in the case of the localised models, at least). Let&amp;rsquo;s save these as a separate object ready to be loaded into our &lt;code&gt;R&lt;/code&gt; environment in the coming session:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;save(H1_ModelSparrows_ls, H1_ModelCNA_ls, CentralNorthAm_df, Sparrows_df, file = file.path(&amp;quot;Data&amp;quot;, &amp;quot;H1_Models.RData&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sessioninfo&#34;&gt;SessionInfo&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.2.3 (2023-03-15)
## Platform: x86_64-apple-darwin17.0 (64-bit)
## Running under: macOS Big Sur ... 10.16
## 
## Matrix products: default
## BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] HLMdiag_0.5.0 nlme_3.1-162  ggplot2_3.4.1
## 
## loaded via a namespace (and not attached):
##  [1] styler_1.9.1      tidyselect_1.2.0  xfun_0.37         bslib_0.4.2       janitor_2.2.0     reshape2_1.4.4    purrr_1.0.1       splines_4.2.3     lattice_0.20-45   snakecase_0.11.0 
## [11] colorspace_2.1-0  vctrs_0.5.2       generics_0.1.3    htmltools_0.5.4   mgcv_1.8-42       yaml_2.3.7        utf8_1.2.3        rlang_1.0.6       R.oo_1.25.0       jquerylib_0.1.4  
## [21] pillar_1.8.1      glue_1.6.2        withr_2.5.0       R.utils_2.12.2    plyr_1.8.8        R.cache_0.16.0    lifecycle_1.0.3   stringr_1.5.0     munsell_0.5.0     blogdown_1.16    
## [31] gtable_0.3.1      R.methodsS3_1.8.2 diagonals_6.4.0   evaluate_0.20     labeling_0.4.2    knitr_1.42        fastmap_1.1.1     fansi_1.0.4       highr_0.10        Rcpp_1.0.10      
## [41] scales_1.2.1      cachem_1.0.7      jsonlite_1.8.4    farver_2.1.1      digest_0.6.31     stringi_1.7.12    bookdown_0.33     dplyr_1.1.0       grid_4.2.3        cli_3.6.0        
## [51] tools_4.2.3       magrittr_2.0.3    sass_0.4.5        tibble_3.2.0      pkgconfig_2.0.3   MASS_7.3-58.2     Matrix_1.5-3      lubridate_1.9.2   timechange_0.2.0  rmarkdown_2.20   
## [61] rstudioapi_0.14   R6_2.5.1          compiler_4.2.3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Model Selection</title>
      <link>https://www.erikkusch.com/courses/excursions-into-biostatistics/excursion-into-biostatistics/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/excursions-into-biostatistics/excursion-into-biostatistics/</guid>
      <description>&lt;h2 id=&#34;theory&#34;&gt;Theory&lt;/h2&gt;
&lt;p&gt;These are exercises and solutions meant as a compendium to my talk on Model Selection and Model Building.&lt;/p&gt;
&lt;p&gt;I have prepared some I have prepared some &lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/ErikKusch/Homepage/blob/master/static/courses/Excursions-into-Biostatistics/Model-Selection-and-Statistical-Significance---Reporting-the-Best-Science.html&#34; target=&#34;_blank&#34;&gt; Lecture Slides &lt;/a&gt; for this session. For a more mathematical look at these concepts, I cannot recommend enough 
&lt;a href=&#34;https://bookdown.org/egarpor/PM-UC3M/lm-ii-modsel.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Eduardo GarcÃ­a PortuguÃ©s&#39; blog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;r-environment&#34;&gt;&lt;code&gt;R&lt;/code&gt; Environment&lt;/h2&gt;
&lt;p&gt;For this exercise, we will need the following packages:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.load.package &amp;lt;- function(x) {
  if (!require(x, character.only = TRUE)) {
    install.packages(x, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;)
  }
  require(x, character.only = TRUE)
}
package_vec &amp;lt;- c(
  &amp;quot;ggplot2&amp;quot;, # for visualisation
  &amp;quot;leaflet&amp;quot;, # for maps
  &amp;quot;splitstackshape&amp;quot;, # for stratified sampling
  &amp;quot;caret&amp;quot;, # for cross-validation exercises
  &amp;quot;boot&amp;quot;, # for bootstrap parameter estimates
  &amp;quot;tidyr&amp;quot;, # for reshaping data frames
  &amp;quot;tidybayes&amp;quot;, # for visualisation of bootstrap estimates
  &amp;quot;pROC&amp;quot;, # for ROC-curves
  &amp;quot;olsrr&amp;quot;, # for subset selection
  &amp;quot;MASS&amp;quot;, # for stepwise subset selection
  &amp;quot;nlme&amp;quot;, # for mixed effect models
  &amp;quot;mclust&amp;quot;, # for k-means clustering,
  &amp;quot;randomForest&amp;quot;, # for randomForest classifier
  &amp;quot;lmeresampler&amp;quot; # for validation of lmer models
)
sapply(package_vec, install.load.package)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         ggplot2         leaflet splitstackshape           caret            boot           tidyr       tidybayes            pROC           olsrr            MASS            nlme          mclust 
##            TRUE            TRUE            TRUE            TRUE            TRUE            TRUE            TRUE            TRUE            TRUE            TRUE            TRUE            TRUE 
##    randomForest    lmeresampler 
##            TRUE            TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the above function is way more sophisticated than the usual &lt;code&gt;install.packages()&lt;/code&gt; &amp;amp; &lt;code&gt;library()&lt;/code&gt; approach since it automatically detects which packages require installing and only install these thus not overwriting already installed packages.&lt;/p&gt;
&lt;h2 id=&#34;our-resarch-project&#34;&gt;Our Resarch Project&lt;/h2&gt;
&lt;p&gt;Today, we are looking at a big (and entirely fictional) data base of the common house sparrow (&lt;em&gt;Passer domesticus&lt;/em&gt;). In particular, we are interested in the &lt;strong&gt;Evolution of &lt;em&gt;Passer domesticus&lt;/em&gt; in Response to Climate Change&lt;/strong&gt; which was previously explained &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/research-project/&#34; target=&#34;_blank&#34;&gt; here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-data&#34;&gt;The Data&lt;/h3&gt;
&lt;p&gt;I have created a large data set for this exercise which is available &lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/excursions-into-biostatistics/Data.rar&#34; target=&#34;_blank&#34;&gt; here&lt;/a&gt; and we previously cleaned up so that is now usable &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/data-handling-and-data-assumptions/&#34; target=&#34;_blank&#34;&gt; here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;reading-the-data-into-r&#34;&gt;Reading the Data into &lt;code&gt;R&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start by reading the data into &lt;code&gt;R&lt;/code&gt; and taking an initial look at it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Sparrows_df &amp;lt;- readRDS(file.path(&amp;quot;Data&amp;quot;, &amp;quot;SparrowDataClimate.rds&amp;quot;))
head(Sparrows_df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Index Latitude Longitude     Climate Population.Status Weight Height Wing.Chord Colour    Sex Nesting.Site Nesting.Height Number.of.Eggs Egg.Weight Flock Home.Range Predator.Presence Predator.Type
## 1    SI       60       100 Continental            Native  34.05  12.87       6.67  Brown   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large               Yes         Avian
## 2    SI       60       100 Continental            Native  34.86  13.68       6.79   Grey   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large               Yes         Avian
## 3    SI       60       100 Continental            Native  32.34  12.66       6.64  Black Female        Shrub          35.60              1       3.21     C      Large               Yes         Avian
## 4    SI       60       100 Continental            Native  34.78  15.09       7.00  Brown Female        Shrub          47.75              0         NA     E      Large               Yes         Avian
## 5    SI       60       100 Continental            Native  35.01  13.82       6.81   Grey   Male         &amp;lt;NA&amp;gt;             NA             NA         NA     B      Large               Yes         Avian
## 6    SI       60       100 Continental            Native  32.36  12.67       6.64  Brown Female        Shrub          32.47              1       3.17     E      Large               Yes         Avian
##       TAvg      TSD
## 1 269.9596 15.71819
## 2 269.9596 15.71819
## 3 269.9596 15.71819
## 4 269.9596 15.71819
## 5 269.9596 15.71819
## 6 269.9596 15.71819
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;hypotheses&#34;&gt;Hypotheses&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s remember our hypotheses:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Sparrow Morphology&lt;/strong&gt; is determined by:&lt;br&gt;
A. &lt;em&gt;Climate Conditions&lt;/em&gt; with sparrows in stable, warm environments fairing better than those in colder, less stable ones.&lt;br&gt;
B. &lt;em&gt;Competition&lt;/em&gt; with sparrows in small flocks doing better than those in big flocks.&lt;br&gt;
C. &lt;em&gt;Predation&lt;/em&gt; with sparrows under pressure of predation doing worse than those without.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sites&lt;/strong&gt;  accurately represent &lt;strong&gt;sparrow morphology&lt;/strong&gt;. This may mean:&lt;br&gt;
A. &lt;em&gt;Population status&lt;/em&gt; as inferred through morphology.&lt;br&gt;
B. &lt;em&gt;Site index&lt;/em&gt; as inferred through morphology.&lt;br&gt;
C. &lt;em&gt;Climate&lt;/em&gt; as inferred through morphology.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We have already built some models for these &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/classifications-order-from-chaos/&#34; target=&#34;_blank&#34;&gt; here&lt;/a&gt; and &lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/regressions-correlations-for-the-advanced/&#34; target=&#34;_blank&#34;&gt; here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;candidate-models&#34;&gt;Candidate Models&lt;/h2&gt;
&lt;p&gt;Before we can get started on model selection and validation, we need some actual models. Let&amp;rsquo;s create some. Since the data set contains three variables pertaining to sparrow morphology (i.e. &lt;code&gt;Weight&lt;/code&gt;, &lt;code&gt;Height&lt;/code&gt;, &lt;code&gt;Wing.Chord&lt;/code&gt;) and I don&amp;rsquo;t want this exercise to spiral out of control with models that account for more than one response variable, we need to settle on one as our response variable in the first hypothesis. I am going with &lt;code&gt;Weight&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, because I am under a bit of time pressure in creating this material, I forego all checking of assumptions on any of the following candidate models as the goal with this material is model selection/validation and not model assumption checking.&lt;/p&gt;
&lt;h3 id=&#34;continuous-models&#34;&gt;Continuous Models&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;load(file = file.path(&amp;quot;Data&amp;quot;, &amp;quot;H1_Models.RData&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This just loaded three objects into &lt;code&gt;R&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;H1_ModelSparrows_ls&lt;/code&gt; - a list of candidate models built for the entire &lt;code&gt;Sparrow_df&lt;/code&gt; data set&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sparrows_df&lt;/code&gt; - the data frame used to build the global candidate models&lt;/li&gt;
&lt;li&gt;&lt;code&gt;H1_ModelCNA_ls&lt;/code&gt; - a list of candidate models built just for three coastal sites across Central and North America&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CentralNorthAm_df&lt;/code&gt; - the data frame used to build the candidate model for Central and North America&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;global-models&#34;&gt;Global Models&lt;/h4&gt;
&lt;p&gt;Global regression models include:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sapply(H1_ModelSparrows_ls, &amp;quot;[[&amp;quot;, &amp;quot;call&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $Null
## lm(formula = Weight ~ 1, data = Sparrows_df)
## 
## $Comp_Flock.Size
## lm(formula = Weight ~ Flock.Size, data = Sparrows_df)
## 
## $Comp_Full
## lm(formula = Weight ~ Home.Range * Flock.Size, data = Sparrows_df)
## 
## $Full
## lm(formula = Weight ~ Climate + TAvg + TSD + Home.Range * Flock.Size + 
##     Predator.Type, data = Sparrows_df)
## 
## $Mixed_Full
## lme.formula(fixed = Weight ~ Predator.Type + Flock.Size * Home.Range + 
##     TAvg + TSD, data = Sparrows_df, random = list(Population.Status = ~1))
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;local-models&#34;&gt;Local Models&lt;/h4&gt;
&lt;p&gt;Local regression models for the region of Central/North America include:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sapply(H1_ModelCNA_ls, &amp;quot;[[&amp;quot;, &amp;quot;call&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $Null
## lm(formula = Weight ~ 1, data = CentralNorthAm_df)
## 
## $Clim_TAvg
## lm(formula = Weight ~ TAvg, data = CentralNorthAm_df)
## 
## $Clim_TSD
## lm(formula = Weight ~ TSD, data = CentralNorthAm_df)
## 
## $Clim_Full
## lm(formula = Weight ~ TAvg + TSD, data = CentralNorthAm_df)
## 
## $Pred_Pres
## lm(formula = Weight ~ Predator.Presence, data = CentralNorthAm_df)
## 
## $Pred_Type
## lm(formula = Weight ~ Predator.Type, data = CentralNorthAm_df)
## 
## $Full
## lm(formula = Weight ~ TAvg + TSD + Home.Range * Flock.Size + 
##     Predator.Type, data = CentralNorthAm_df)
## 
## $Mixed_Full
## lme.formula(fixed = Weight ~ Flock.Size * Home.Range + TAvg + 
##     TSD, data = CentralNorthAm_df, random = list(Index = ~1))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;categorical-models&#34;&gt;Categorical Models&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;load(file = file.path(&amp;quot;Data&amp;quot;, &amp;quot;H2_Models.RData&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This just loaded three objects into &lt;code&gt;R&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;H2_PS_mclust&lt;/code&gt; - a k-means classifier aiming to group &lt;code&gt;Population.Status&lt;/code&gt; by &lt;code&gt;Weight&lt;/code&gt;, &lt;code&gt;Height&lt;/code&gt;, and &lt;code&gt;Wing.Chord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;H2_PS_RF&lt;/code&gt; - a random forest classifier which identifies &lt;code&gt;Population.Status&lt;/code&gt; by &lt;code&gt;Weight&lt;/code&gt;, &lt;code&gt;Height&lt;/code&gt;, and &lt;code&gt;Wing.Chord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;H2_Index_RF&lt;/code&gt; - a random forest classifier which identifies &lt;code&gt;Index&lt;/code&gt; of sites by &lt;code&gt;Weight&lt;/code&gt;, &lt;code&gt;Height&lt;/code&gt;, and &lt;code&gt;Wing.Chord&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;model-comparisonselection&#34;&gt;Model Comparison/Selection&lt;/h2&gt;
&lt;h3 id=&#34;adjusted-coefficient-of-determination&#34;&gt;(adjusted) Coefficient of Determination&lt;/h3&gt;
&lt;p&gt;The coefficient of determination ($R^2$) measures the proportion of variation in our response (&lt;code&gt;Weight&lt;/code&gt;) that can be explained by regression using our predictor(s). The higher this value, the better. Unfortunately, $R^2$ does not penalize complex models (i.e. those with multiple parameters) while the adjusted $R^2$ does. Extracting these for a model object is as easy as writing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ExampleModel &amp;lt;- H1_ModelSparrows_ls$Comp_Flock.Size
summary(ExampleModel)$r.squared
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.7837715
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(ExampleModel)$adj.r.squared
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.7835683
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tells us that the flock size model explains roughly 0.784% of the variation in the &lt;code&gt;Weight&lt;/code&gt; variable. That is pretty decent.&lt;/p&gt;
&lt;p&gt;To check for all other models, I have written a quick &lt;code&gt;sapply&lt;/code&gt; function that does the extraction for us. Because obtaining (adjusted) $R^2$ requires additional packages, I am excluding these from this analysis:&lt;/p&gt;
&lt;h4 id=&#34;global-regression-models&#34;&gt;Global Regression Models&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_Summary_ls &amp;lt;- sapply(H1_ModelSparrows_ls[-length(H1_ModelSparrows_ls)], summary)
R2_df &amp;lt;- data.frame(
  R2 = sapply(H1_Summary_ls, &amp;quot;[[&amp;quot;, &amp;quot;r.squared&amp;quot;),
  Adj.R2 = sapply(H1_Summary_ls, &amp;quot;[[&amp;quot;, &amp;quot;adj.r.squared&amp;quot;)
)
R2_df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                        R2    Adj.R2
## Null            0.0000000 0.0000000
## Comp_Flock.Size 0.7837715 0.7835683
## Comp_Full       0.8051421 0.8042229
## Full            0.8460500 0.8444433
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can immediately see that some of our candidate models are doing quite well for themselves.&lt;/p&gt;
&lt;h4 id=&#34;local-regression-models&#34;&gt;Local Regression Models&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_Summary_ls &amp;lt;- sapply(H1_ModelCNA_ls[-length(H1_ModelCNA_ls)], summary)
R2_df &amp;lt;- data.frame(
  R2 = sapply(H1_Summary_ls, &amp;quot;[[&amp;quot;, &amp;quot;r.squared&amp;quot;),
  Adj.R2 = sapply(H1_Summary_ls, &amp;quot;[[&amp;quot;, &amp;quot;adj.r.squared&amp;quot;)
)
R2_df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                   R2     Adj.R2
## Null      0.00000000 0.00000000
## Clim_TAvg 0.23733707 0.23426182
## Clim_TSD  0.32632351 0.32360707
## Clim_Full 0.34671348 0.34142371
## Pred_Pres 0.03710799 0.03322536
## Pred_Type 0.34671348 0.34142371
## Full      0.37651991 0.35848536
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oof! None of our locally fitted models did well at explaining the data to begin with. With that identified, we are sure not going to trust them when it comes to predictions and so we are scrapping all of them.&lt;/p&gt;
&lt;p&gt;Consequently, we can generalise our naming conventions a bit and now write:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_Model_ls &amp;lt;- H1_ModelSparrows_ls
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;anova&#34;&gt;Anova&lt;/h3&gt;
&lt;p&gt;Analysis of Variance (Anova) is another tool you will often run into when trying to understand explanatory power of a model. Here, I do something relatively complex to run an anova for all models in our list without having to type them all out. Again,we omit the mixed effect model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;eval(parse(text = paste(&amp;quot;anova(&amp;quot;, paste(&amp;quot;H1_Model_ls[[&amp;quot;, 1:(length(H1_Model_ls) - 1), &amp;quot;]]&amp;quot;, sep = &amp;quot;&amp;quot;, collapse = &amp;quot;,&amp;quot;), &amp;quot;)&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Analysis of Variance Table
## 
## Model 1: Weight ~ 1
## Model 2: Weight ~ Flock.Size
## Model 3: Weight ~ Home.Range * Flock.Size
## Model 4: Weight ~ Climate + TAvg + TSD + Home.Range * Flock.Size + Predator.Type
##   Res.Df     RSS Df Sum of Sq        F    Pr(&amp;gt;F)    
## 1   1065 17627.2                                    
## 2   1064  3811.5  1   13815.7 5365.996 &amp;lt; 2.2e-16 ***
## 3   1060  3434.8  4     376.7   36.578 &amp;lt; 2.2e-16 ***
## 4   1054  2713.7  6     721.1   46.678 &amp;lt; 2.2e-16 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, according to this, all of our models are doing much better in explaining our underlying data when compared to the Null Model.&lt;/p&gt;
&lt;h3 id=&#34;information-criteria&#34;&gt;Information Criteria&lt;/h3&gt;
&lt;p&gt;Personally, I would like to have a model that&amp;rsquo;s good at predicting things instead of &amp;ldquo;just&amp;rdquo; explaining things and so we step into &lt;em&gt;information criteria&lt;/em&gt; next. These aim to provide us with exactly that information: &amp;ldquo;How well will our model predict new data?&amp;rdquo; Information criteria make use of information theory which allows us to make such statements with pretty decent certainty despite not having new data.&lt;/p&gt;
&lt;h4 id=&#34;akaike-information-criterion-aic&#34;&gt;Akaike Information Criterion (AIC)&lt;/h4&gt;
&lt;p&gt;Looking at the AIC:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sapply(H1_Model_ls, AIC)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            Null Comp_Flock.Size       Comp_Full            Full      Mixed_Full 
##        6019.872        4389.378        4286.445        4047.250        4162.779
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our full model is the clear favourite here.&lt;/p&gt;
&lt;h4 id=&#34;bayesian-information-criterion-bic&#34;&gt;Bayesian Information Criterion (BIC)&lt;/h4&gt;
&lt;p&gt;As far as the BIC is concerned:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sapply(H1_Model_ls, BIC)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            Null Comp_Flock.Size       Comp_Full            Full      Mixed_Full 
##        6029.815        4404.293        4321.247        4111.882        4222.326
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our full model wins again!&lt;/p&gt;
&lt;h4 id=&#34;receiver-operator-characteristic-roc&#34;&gt;Receiver-Operator Characteristic (ROC)&lt;/h4&gt;
&lt;p&gt;The Receiver-Operator Characteristic (ROC) shows the trade-off between &lt;em&gt;Sensitivity&lt;/em&gt; (rate of true positives) and &lt;em&gt;Specificity&lt;/em&gt; (rate of true negatives). It also provides an &lt;em&gt;Area under the Curve&lt;/em&gt; which serves as a proxy of classification accuracy.&lt;/p&gt;
&lt;p&gt;First, we establish the ROC-Curve for our classification of &lt;code&gt;Population.Status&lt;/code&gt; given sparrow Morphology and a k-means algorithm:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Mclust_PS.roc &amp;lt;- roc(
  Sparrows_df$Population.Status, # known outcome
  H2_PS_mclust$z[, 1] # probability of assigning one out of two outcomes
)
plot(Mclust_PS.roc)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;7_Model-Selection-and-Statistical-Significance---Reporting-the-Best-Science_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;auc(Mclust_PS.roc)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Area under the curve: 0.6341
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Certainly, we could do better! Let&amp;rsquo;s see what more advanced methods have to offer.&lt;/p&gt;
&lt;p&gt;With that, we turn to random forest:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;RF_PS.roc &amp;lt;- roc(
  Sparrows_df$Population.Status,
  H2_PS_RF$votes[, 1]
)
plot(RF_PS.roc)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;7_Model-Selection-and-Statistical-Significance---Reporting-the-Best-Science_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;auc(RF_PS.roc)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Area under the curve: 0.9274
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now this is doing much better!&lt;/p&gt;
&lt;p&gt;Lastly, we want to look at the site &lt;code&gt;Index&lt;/code&gt; as predicted by sparrow morphology given a random forest algorithm:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;RF_Index.roc &amp;lt;- multiclass.roc(
  Sparrows_df$Index, # known outcome
  H2_Index_RF$votes # matrix of certainties of prediction
)
RF_Index.roc[[&amp;quot;auc&amp;quot;]] # average ROC-AUC
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Multi-class area under the curve: 0.9606
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Plot ROC curve for each binary comparison
rs &amp;lt;- RF_Index.roc[[&amp;quot;rocs&amp;quot;]] ## extract comparisons
plot.roc(rs[[1]][[1]]) # blot first comparison
plot.roc(rs[[1]][[2]], add = TRUE) # plot first comparison, in opposite direction
invisible(capture.output(sapply(2:length(rs), function(i) lines.roc(rs[[i]][[1]], col = i))))
invisible(capture.output(sapply(2:length(rs), function(i) lines.roc(rs[[i]][[2]], col = i))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;7_Model-Selection-and-Statistical-Significance---Reporting-the-Best-Science_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is certainly busy, but look at that average AUC of almost 1! That is the power of Random Forest.&lt;/p&gt;
&lt;h3 id=&#34;summary-of-model-selection&#34;&gt;Summary of Model Selection&lt;/h3&gt;
&lt;h4 id=&#34;morphology-hypothesis&#34;&gt;Morphology Hypothesis&lt;/h4&gt;
&lt;p&gt;Regarding our morphology hypothesis, we saw that most of our hypothesised effects can be detected. However, some models clearly perform better than others. Usual model selection exercises would have us discard all but the best model (&lt;code&gt;Full&lt;/code&gt;, in this case) and leave the rest never to be spoken of again. Doing so would have us miss a pretty neat opportunity to do some &lt;strong&gt;model comparison&lt;/strong&gt; which can already help us identify which effects to focus on in particular.&lt;/p&gt;
&lt;p&gt;To demonstrate some of this, allow me step into the local regression models:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sapply(H1_ModelCNA_ls, AIC)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Null  Clim_TAvg   Clim_TSD  Clim_Full  Pred_Pres  Pred_Type       Full Mixed_Full 
##   948.7346   882.9998   851.9833   846.2997   941.2811   846.2997   844.6250   875.7659
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;as well as global regression models:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sapply(H1_Model_ls, AIC)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            Null Comp_Flock.Size       Comp_Full            Full      Mixed_Full 
##        6019.872        4389.378        4286.445        4047.250        4162.779
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Climate&lt;/em&gt; - interestingly,  temperature variability is much more informative than average temperature and even adding the two into the same model only marginally improves over the variability-only model. This tells us much about which effects are probably meaningful and which aren&amp;rsquo;t.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Competition&lt;/em&gt; -  The competition models did well across the board, but were aided immensely by adding climate information and accounting for random effects.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Predation&lt;/em&gt; - predation effects were best explained by predation type with only a marginal improvement of adding predator presence. That is because predator type already contains all of the information that is within predator presence.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What we can do so far, is remove some obviously erroneous models which in this case is the entirety of local regression models.&lt;/p&gt;
&lt;h4 id=&#34;categorisation-hypothesis&#34;&gt;Categorisation Hypothesis&lt;/h4&gt;
&lt;p&gt;As far as the categorisation hypotheses are concerned, we now have confirmation that population status and sparrow morphology are linked quite well.&lt;/p&gt;
&lt;p&gt;We have also learned that random forest is an incredibly powerful method for classification and variable selection.&lt;/p&gt;
&lt;h2 id=&#34;model-validation&#34;&gt;Model Validation&lt;/h2&gt;
&lt;p&gt;So far, we have not introduced our models to any new data. We have looked at &lt;em&gt;explanatory power&lt;/em&gt; with (adjusted) $R^2$, and the Anova. We have also looked at &lt;em&gt;estimates of predictive power&lt;/em&gt; with our information criteria (e.g. AIC, BIC).&lt;/p&gt;
&lt;p&gt;What about actually seeing how robust and accurate our models are? That&amp;rsquo;s what Model Validation is for!&lt;/p&gt;
&lt;h3 id=&#34;cross-validation&#34;&gt;Cross-Validation&lt;/h3&gt;
&lt;p&gt;Before we get started, I remove the Null model from our model list. Doing cross-validation on this does not make any sense because there are no actual predictors in it which could be affected by cross-validation processes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_Model_ls &amp;lt;- H1_Model_ls[-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;training-vs-test-data&#34;&gt;Training vs. Test Data&lt;/h4&gt;
&lt;p&gt;The simplest example of cross-validation is the &lt;em&gt;validation data cross-validation&lt;/em&gt; approach; also known as &lt;strong&gt;Training vs. Test Data&lt;/strong&gt; approach.&lt;/p&gt;
&lt;p&gt;To make use of this approach, we need to (1) randomly split our data, (2) build our models using the training data, and (3) test our models on the test data.&lt;/p&gt;
&lt;p&gt;Since we have highly compartmentalised data at different sites, I am employing a stratified sampling scheme to ensure all of my sites are represented in each data set resulting from the split:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(42) # make randomness reproducible
Stratified_ls &amp;lt;- stratified(Sparrows_df, # what to split
  group = &amp;quot;Index&amp;quot;, # by which group to stratify
  size = .7, # what proportion of each group shall be contained in the training data
  bothSets = TRUE # save both training and test data
)
Train_df &amp;lt;- Stratified_ls$SAMP1 # extract training data
Test_df &amp;lt;- Stratified_ls$SAMP2 # extract test data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have our training and test data, we are ready to run our pre-specified models on said data and subsequently test it&amp;rsquo;s performance on the test data by predicting with the newly trained model and calculating mean squared test error.&lt;/p&gt;
&lt;p&gt;For a single model, we can do it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ExampleModel &amp;lt;- H1_ModelSparrows_ls$Comp_Flock.Size # extract Model from list
ExampleModel &amp;lt;- update(ExampleModel, data = Train_df) # train model on training data
Prediction &amp;lt;- predict(ExampleModel, newdata = Test_df) # predict outcome for test data
sum((Test_df$Weight - Prediction)^2) # Mean Squared Error
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1133.996
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we have multiple models stored in a list, here&amp;rsquo;s a way to do the above for the entire list:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;H1_Train_ls &amp;lt;- sapply(X = H1_Model_ls, FUN = function(x) update(x, data = Train_df))
H1_Test_mat &amp;lt;- sapply(X = H1_Train_ls, FUN = function(x) predict(x, newdata = Test_df))
apply(H1_Test_mat, MARGIN = 2, FUN = function(x) sum((Test_df$Weight - x)^2))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Comp_Flock.Size       Comp_Full            Full      Mixed_Full 
##       1133.9958       1026.2199        816.5166        866.2941
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, our full model comes out on top!&lt;/p&gt;
&lt;p&gt;Unfortunately, this approach is fickle due to the randomness of the data split. How can we make this more robust? Easy. We split many, many times and average our mean squared errors out.&lt;/p&gt;
&lt;p&gt;This bring us to traditional Cross-Validation approaches. Luckily, the complex parts of cross-validation are already offered to us with the &lt;code&gt;caret&lt;/code&gt; package in &lt;code&gt;R&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;leave-one-out-cross-validation-loocv&#34;&gt;Leave-One-Out Cross-Validation (LOOCV)&lt;/h4&gt;
&lt;p&gt;Leave-One-Out Cross-Validation is a method within which we split our data into a training data set with $n-1$ observation and a test data set that contains just $1$ observation. We do training and testing as above on this split and then repeat this procedure until every observation has been left out once.&lt;/p&gt;
&lt;p&gt;For a simple model, this can be done like such:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;train(Weight ~ Climate,
  data = Sparrows_df,
  method = &amp;quot;lm&amp;quot;,
  trControl = trainControl(method = &amp;quot;LOOCV&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Linear Regression 
## 
## 1066 samples
##    1 predictor
## 
## No pre-processing
## Resampling: Leave-One-Out Cross-Validation 
## Summary of sample sizes: 1065, 1065, 1065, 1065, 1065, 1065, ... 
## Resampling results:
## 
##   RMSE      Rsquared   MAE     
##   3.628905  0.2036173  2.976221
## 
## Tuning parameter &#39;intercept&#39; was held constant at a value of TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the RMSE (Residual mean squared error). That&amp;rsquo;s what we use to compare models.&lt;/p&gt;
&lt;p&gt;Here, I create a function that automatically rebuilds our models for the LOOCV so we can run this on our list of models later.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;CV_LOOCV &amp;lt;- function(x) {
  if (length(x[[&amp;quot;terms&amp;quot;]][[3]]) == 1) {
    Terms &amp;lt;- paste(x[[&amp;quot;terms&amp;quot;]][[3]], collapse = &amp;quot; + &amp;quot;)
  } else {
    Terms &amp;lt;- paste(x[[&amp;quot;terms&amp;quot;]][[3]][-1], collapse = &amp;quot; + &amp;quot;)
  }
  train(as.formula(paste(&amp;quot;Weight ~&amp;quot;, Terms)),
    data = Sparrows_df,
    method = &amp;quot;lm&amp;quot;,
    trControl = trainControl(method = &amp;quot;LOOCV&amp;quot;)
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, this cannot be executed for mixed effect models, so for now, I only run this on all our models except the mixed effect model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Begin &amp;lt;- Sys.time()
H1_LOOCV_ls &amp;lt;- sapply(H1_Model_ls[-length(H1_Model_ls)], CV_LOOCV)
End &amp;lt;- Sys.time()
End - Begin
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Time difference of 9.41841 secs
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sapply(H1_LOOCV_ls, &amp;quot;[[&amp;quot;, &amp;quot;results&amp;quot;)[-1, ]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          Comp_Flock.Size Comp_Full Full     
## RMSE     1.894279        1.865854  1.609296 
## Rsquared 0.7829992       0.7894634 0.8433834
## MAE      1.520181        1.492409  1.279003
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unsurprisingly, our full model has the lowest RMSE (which is the mark of a good model).&lt;/p&gt;
&lt;p&gt;So what about our mixed effect model? Luckily, doing LOOCV by hand isn&amp;rsquo;t all that difficult and so we can still compute a RMSE for LOOCV for our mixed effect model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;RMSE_LOOCV &amp;lt;- rep(NA, nrow(Sparrows_df))
for (Fold_Iter in 1:nrow(Sparrows_df)) {
  Iter_mod &amp;lt;- update(H1_Model_ls$Mixed_Full, data = Sparrows_df[-Fold_Iter, ])
  Prediction &amp;lt;- predict(Iter_mod, newdata = Sparrows_df[Fold_Iter, ])
  RMSE_LOOCV[Fold_Iter] &amp;lt;- (Sparrows_df[Fold_Iter, ]$Weight - Prediction)^2
}
mean(RMSE_LOOCV)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2.757373
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ouh&amp;hellip; that is quite worse than out other models. Curious. This goes to show how much less robust a more complex model can be.&lt;/p&gt;
&lt;h4 id=&#34;k-fold-cross-validation-k-fold-cv&#34;&gt;k-Fold Cross-Validation (k-fold CV)&lt;/h4&gt;
&lt;p&gt;k-Fold Cross-Validation uses the same concept as all of the previous cross-validation methods, but at less of a computational cost than LOOCV and more robustly than the training/test data approach:&lt;/p&gt;
&lt;p&gt;Again, I write a function for this and run it on my list of models without the mixed effect model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;CV_kFold &amp;lt;- function(x) {
  if (length(x[[&amp;quot;terms&amp;quot;]][[3]]) == 1) {
    Terms &amp;lt;- paste(x[[&amp;quot;terms&amp;quot;]][[3]], collapse = &amp;quot; + &amp;quot;)
  } else {
    Terms &amp;lt;- paste(x[[&amp;quot;terms&amp;quot;]][[3]][-1], collapse = &amp;quot; + &amp;quot;)
  }
  train(as.formula(paste(&amp;quot;Weight ~&amp;quot;, Terms)),
    data = Sparrows_df,
    method = &amp;quot;lm&amp;quot;,
    trControl = trainControl(method = &amp;quot;cv&amp;quot;, number = 15)
  )
}
Begin &amp;lt;- Sys.time()
H1_kFold_ls &amp;lt;- sapply(H1_Model_ls[-length(H1_Model_ls)], CV_kFold)
End &amp;lt;- Sys.time()
End - Begin
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Time difference of 0.3413441 secs
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sapply(H1_kFold_ls, &amp;quot;[[&amp;quot;, &amp;quot;results&amp;quot;)[-1, ]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            Comp_Flock.Size Comp_Full  Full      
## RMSE       1.889439        1.859135   1.603168  
## Rsquared   0.7882333       0.7942782  0.8465977 
## MAE        1.519962        1.491493   1.277595  
## RMSESD     0.1408563       0.1520344  0.1491081 
## RsquaredSD 0.03375562      0.03153792 0.03034729
## MAESD      0.1382304       0.1122565  0.1150599
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Full model performs best still and see how much quicker that was done!&lt;/p&gt;
&lt;h3 id=&#34;bootstrap&#34;&gt;Bootstrap&lt;/h3&gt;
&lt;p&gt;On to the Bootstrap. God, I love the boostrap.&lt;/p&gt;
&lt;p&gt;The idea here is to run a model multiple times on a random sample of the underlying data and then store all of the estimates or the parameters as well as avaerage out the RMSE:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;BootStrap &amp;lt;- function(x) {
  if (length(x[[&amp;quot;terms&amp;quot;]][[3]]) == 1) {
    Terms &amp;lt;- paste(x[[&amp;quot;terms&amp;quot;]][[3]], collapse = &amp;quot; + &amp;quot;)
  } else {
    Terms &amp;lt;- paste(x[[&amp;quot;terms&amp;quot;]][[3]][-1], collapse = &amp;quot; + &amp;quot;)
  }
  train(as.formula(paste(&amp;quot;Weight ~&amp;quot;, Terms)),
    data = Sparrows_df,
    method = &amp;quot;lm&amp;quot;,
    trControl = trainControl(method = &amp;quot;boot&amp;quot;, number = 100)
  )
}
Begin &amp;lt;- Sys.time()
H1_BootStrap_ls &amp;lt;- sapply(H1_Model_ls[-length(H1_Model_ls)], BootStrap)
End &amp;lt;- Sys.time()
End - Begin
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Time difference of 1.308739 secs
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sapply(H1_BootStrap_ls, &amp;quot;[[&amp;quot;, &amp;quot;results&amp;quot;)[-1, ]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            Comp_Flock.Size Comp_Full  Full      
## RMSE       1.893652        1.871873   1.622079  
## Rsquared   0.7835412       0.7896534  0.8425108 
## MAE        1.520457        1.498216   1.288087  
## RMSESD     0.04675792      0.05178669 0.04885059
## RsquaredSD 0.01243994      0.01318599 0.01092356
## MAESD      0.04287091      0.04531032 0.03910463
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The full model is still doing great, of course.&lt;/p&gt;
&lt;p&gt;But what about our mixed effect model? Luckily, there is a function that can do bootstrapping for us on our &lt;code&gt;lme&lt;/code&gt; objects:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Bootstrap mixed model
Mixed_boot &amp;lt;- lmeresampler::bootstrap(H1_Model_ls[[length(H1_Model_ls)]], .f = fixef, type = &amp;quot;parametric&amp;quot;, B = 3e3)
Mixed_boot
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Bootstrap type: parametric 
## 
## Number of resamples: 3000 
## 
##                           term      observed      rep.mean          se          bias
## 1                  (Intercept)  2.212717e+01 22.0672111291 2.853845096 -0.0599612233
## 2       Predator.TypeNon-Avian  6.626664e-01  0.6580310750 0.161081567 -0.0046353000
## 3            Predator.TypeNone  2.694373e-02  0.0212966961 0.152739708 -0.0056470340
## 4                   Flock.Size  1.497092e-05  0.0005839265 0.019216411  0.0005689556
## 5             Home.RangeMedium  1.261878e+00  1.2675791500 0.881426872  0.0057008365
## 6              Home.RangeSmall  3.049068e+00  3.0583903125 0.417796779  0.0093225898
## 7                         TAvg  3.015153e-02  0.0303345903 0.009892483  0.0001830556
## 8                          TSD  1.983744e-01  0.1984962823 0.021196164  0.0001219321
## 9  Flock.Size:Home.RangeMedium -1.208598e-01 -0.1213017777 0.057929474 -0.0004419594
## 10  Flock.Size:Home.RangeSmall -2.110972e-01 -0.2117971129 0.019731749 -0.0006998822
## 
## There were 0 messages, 0 warnings, and 0 errors.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this, we are getting into the heart of the bootstrap. Distributions of our parameter estimates. These give us an amazing understanding of just which parameter values our model sees as plausible given our data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Estimates_df &amp;lt;- data.frame(Mixed_boot[[&amp;quot;replicates&amp;quot;]])
## reshape estimates data frame for plotting
Hist_df &amp;lt;- data.frame(pivot_longer(
  data = Estimates_df,
  cols = colnames(Estimates_df)
))
## plot parameter estimate distributions
ggplot(data = Hist_df, aes(x = value, group = name)) +
  tidybayes::stat_pointinterval() +
  tidybayes::stat_dots() +
  facet_wrap(~name, scales = &amp;quot;free&amp;quot;) +
  labs(
    x = &amp;quot;Parameter Estimate&amp;quot;, y = &amp;quot;Parameter&amp;quot;,
    title = paste(&amp;quot;Bootstrap parameter estimates of&amp;quot;, names(H1_Model_ls[[length(H1_Model_ls)]]), &amp;quot;Model&amp;quot;)
  ) +
  theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;7_Model-Selection-and-Statistical-Significance---Reporting-the-Best-Science_files/figure-html/unnamed-chunk-30-1.png&#34; width=&#34;1440&#34; /&gt;
As you can see for our mixed effect model, while most parameter estimates are nicely constrained, the Intercept estimate can vary wildly. This is likely to do with our model being very flexible and allowing for a bunch of different combinations of intercepts.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s do the same for our remaining three candidate models:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;BootPlot_ls &amp;lt;- as.list(rep(NA, (length(H1_Model_ls) - 1)))
for (Model_Iter in 1:(length(H1_Model_ls) - 1)) { # loop over all models except the null model
  ## Formula to compute coefficients
  x &amp;lt;- H1_Model_ls[[Model_Iter]]
  if (length(x[[&amp;quot;terms&amp;quot;]][[3]]) == 1) {
    Terms &amp;lt;- as.character(x[[&amp;quot;terms&amp;quot;]][[3]])
  } else {
    Terms &amp;lt;- paste(as.character(x[[&amp;quot;terms&amp;quot;]][[3]])[-1], collapse = as.character(x[[&amp;quot;terms&amp;quot;]][[3]])[1])
  }
  model_coef &amp;lt;- function(data, index) {
    coef(lm(as.formula(paste(&amp;quot;Weight ~&amp;quot;, Terms)), data = data, subset = index))
  }
  ## Bootstrapping
  Boot_test &amp;lt;- boot(data = Sparrows_df, statistic = model_coef, R = 3e3)
  ## set column names of estimates to coefficients
  colnames(Boot_test[[&amp;quot;t&amp;quot;]]) &amp;lt;- names(H1_Model_ls[[Model_Iter]][[&amp;quot;coefficients&amp;quot;]])
  ## make data frame of estimates
  Estimates_df &amp;lt;- data.frame(Boot_test[[&amp;quot;t&amp;quot;]])
  ## reshape estimates data frame for plotting
  Hist_df &amp;lt;- data.frame(pivot_longer(
    data = Estimates_df,
    cols = colnames(Estimates_df)
  ))
  ## plot parameter estimate distributions
  BootPlot_ls[[Model_Iter]] &amp;lt;- ggplot(data = Hist_df, aes(x = value, group = name)) +
    tidybayes::stat_pointinterval() +
    tidybayes::stat_dots() +
    facet_wrap(~name, scales = &amp;quot;free&amp;quot;) +
    labs(
      x = &amp;quot;Parameter Estimate&amp;quot;, y = &amp;quot;Parameter&amp;quot;,
      title = paste(&amp;quot;Bootstrap parameter estimates of&amp;quot;, names(H1_Model_ls)[[Model_Iter]], &amp;quot;Model&amp;quot;),
      subtitle = paste(&amp;quot;Weight ~&amp;quot;, Terms)
    ) +
    theme_bw()
}
BootPlot_ls[[1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;7_Model-Selection-and-Statistical-Significance---Reporting-the-Best-Science_files/figure-html/unnamed-chunk-31-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;BootPlot_ls[[2]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;7_Model-Selection-and-Statistical-Significance---Reporting-the-Best-Science_files/figure-html/unnamed-chunk-31-2.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;BootPlot_ls[[3]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;7_Model-Selection-and-Statistical-Significance---Reporting-the-Best-Science_files/figure-html/unnamed-chunk-31-3.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;subset-selection&#34;&gt;Subset Selection&lt;/h2&gt;
&lt;p&gt;So far, we have built our own models according to out intuition. Did we test all possible models? No. Should we go back and test all possible models by hand? Hell no! Can we let &lt;code&gt;R&lt;/code&gt; do it for us? You bet we can!&lt;/p&gt;
&lt;h3 id=&#34;best-subset-selection&#34;&gt;Best Subset Selection&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start with best subset selection. Doing so asks us/&lt;code&gt;R&lt;/code&gt; to establish all possible models and then select the one that performs best according to information criteria. Because our data set contains over 20 variables, including all of our variables would have us establish close to 1 million (you read that right) models. THat is, of course, infeasible.&lt;/p&gt;
&lt;p&gt;Therefore, let&amp;rsquo;s just allow our subset selection to use all variables we have used ourselves thus far (with the exclusion of &lt;code&gt;Index&lt;/code&gt; because it&amp;rsquo;s an amazing, but ultimately useless shorthand):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Reduced_df &amp;lt;- Sparrows_df[, c(&amp;quot;Weight&amp;quot;, &amp;quot;Climate&amp;quot;, &amp;quot;TAvg&amp;quot;, &amp;quot;TSD&amp;quot;, &amp;quot;Population.Status&amp;quot;, &amp;quot;Flock.Size&amp;quot;, &amp;quot;Predator.Type&amp;quot;, &amp;quot;Predator.Presence&amp;quot;)] # reduce data
model &amp;lt;- lm(Weight ~ ., data = Reduced_df) # specify full model
k &amp;lt;- ols_step_best_subset(model) # create all models and select the best
k # show us comparison of best subsets
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                   Best Subsets Regression                                   
## --------------------------------------------------------------------------------------------
## Model Index    Predictors
## --------------------------------------------------------------------------------------------
##      1         Flock.Size                                                                    
##      2         Climate Flock.Size                                                            
##      3         Climate TAvg Flock.Size                                                       
##      4         Climate TAvg Flock.Size Predator.Type                                         
##      5         Climate TAvg TSD Flock.Size Predator.Type                                     
##      6         Climate TAvg TSD Population.Status Flock.Size Predator.Type                   
##      7         Climate TAvg TSD Population.Status Flock.Size Predator.Type Predator.Presence 
## --------------------------------------------------------------------------------------------
## 
##                                                     Subsets Regression Summary                                                    
## ----------------------------------------------------------------------------------------------------------------------------------
##                        Adj.        Pred                                                                                            
## Model    R-Square    R-Square    R-Square      C(p)         AIC       SBIC       SBC         MSEP        FPE       HSP       APC  
## ----------------------------------------------------------------------------------------------------------------------------------
##   1        0.7838      0.7836       0.783    298.7733    4389.3782      NA    4404.2932    3818.6664    3.5890    0.0034    0.2170 
##   2        0.8175      0.8169      0.8163     88.8025    4212.8692      NA    4237.7276    3226.8597    3.0384    0.0029    0.1836 
##   3        0.8227      0.8220      0.8213     58.0852    4184.0693      NA    4213.8994    3137.9149    2.9575    0.0028    0.1787 
##   4        0.8315      0.8305      0.8296      4.5702    4133.6815      NA    4173.4549    2984.6456    2.8183    0.0026    0.1701 
##   5        0.8320      0.8309      0.8298      3.3977    4132.4880      NA    4177.2330    2978.5274    2.8151    0.0026    0.1699 
##   6        0.8320      0.8308      0.8296      5.0000    4134.0870      NA    4183.8036    2980.2214    2.8194    0.0026    0.1702 
##   7        0.8320      0.8308      0.8296      5.0000    4136.0870      NA    4190.7753    2980.2214    2.8194    0.0026    0.1702 
## ----------------------------------------------------------------------------------------------------------------------------------
## AIC: Akaike Information Criteria 
##  SBIC: Sawa&#39;s Bayesian Information Criteria 
##  SBC: Schwarz Bayesian Criteria 
##  MSEP: Estimated error of prediction, assuming multivariate normality 
##  FPE: Final Prediction Error 
##  HSP: Hocking&#39;s Sp 
##  APC: Amemiya Prediction Criteria
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Model 5 (&lt;code&gt;Climate TAvg TSD Flock.Size Predator.Type &lt;/code&gt;) is the one we want to go for here.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at visualisation of our different model selection criteria:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(k)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;7_Model-Selection-and-Statistical-Significance---Reporting-the-Best-Science_files/figure-html/unnamed-chunk-33-1.png&#34; width=&#34;1440&#34; /&gt;&lt;img src=&#34;7_Model-Selection-and-Statistical-Significance---Reporting-the-Best-Science_files/figure-html/unnamed-chunk-33-2.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;forward-subset-selection&#34;&gt;Forward Subset Selection&lt;/h3&gt;
&lt;p&gt;Ok. So best subset selection can become intractable given a lot of variables. How about building our models up to be increasingly complex until we hit on gold?&lt;/p&gt;
&lt;p&gt;Unfortunately, doing so does not guarantee finding an optimal model and can easily get stuck, depending on what the model starts off with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;model &amp;lt;- lm(Weight ~ Climate, data = Reduced_df)
step.model &amp;lt;- stepAIC(model,
  direction = &amp;quot;forward&amp;quot;,
  trace = FALSE
)
summary(step.model)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Weight ~ Climate, data = Reduced_df)
## 
## Residuals:
##    Min     1Q Median     3Q    Max 
## -9.020 -2.033  1.050  2.640  6.610 
## 
## Coefficients:
##                     Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)          28.3998     0.1248 227.628  &amp;lt; 2e-16 ***
## ClimateContinental    4.9785     0.3188  15.616  &amp;lt; 2e-16 ***
## ClimateSemi-Coastal   3.3400     0.4606   7.252  7.9e-13 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 3.629 on 1063 degrees of freedom
## Multiple R-squared:  0.2059,	Adjusted R-squared:  0.2044 
## F-statistic: 137.8 on 2 and 1063 DF,  p-value: &amp;lt; 2.2e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We immediately remain on &lt;code&gt;Climate&lt;/code&gt; as the only predictor in this example.&lt;/p&gt;
&lt;p&gt;What if we start with a true null model?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;model &amp;lt;- lm(Weight ~ 1, data = Reduced_df)
step.model &amp;lt;- stepAIC(model,
  direction = &amp;quot;forward&amp;quot;,
  trace = FALSE
)
summary(step.model)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Weight ~ 1, data = Reduced_df)
## 
## Residuals:
##    Min     1Q Median     3Q    Max 
## -9.944 -1.452  1.291  2.913  7.336 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)  29.3243     0.1246   235.3   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 4.068 on 1065 degrees of freedom
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We even get stuck on our null model!&lt;/p&gt;
&lt;h3 id=&#34;backward-subset-selection&#34;&gt;Backward Subset Selection&lt;/h3&gt;
&lt;p&gt;So what about making our full model simpler?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;model &amp;lt;- lm(Weight ~ ., data = Reduced_df)
step.model &amp;lt;- stepAIC(model,
  direction = &amp;quot;backward&amp;quot;,
  trace = FALSE
)
summary(step.model)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Weight ~ Climate + TAvg + TSD + Flock.Size + Predator.Type, 
##     data = Reduced_df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -5.2398 -1.1180  0.1215  1.1474  4.9151 
## 
## Coefficients:
##                         Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)            53.505428   3.748484  14.274  &amp;lt; 2e-16 ***
## ClimateContinental      2.978894   0.301131   9.892  &amp;lt; 2e-16 ***
## ClimateSemi-Coastal    -0.640161   0.310970  -2.059   0.0398 *  
## TAvg                   -0.068582   0.012713  -5.395 8.47e-08 ***
## TSD                    -0.069306   0.038900  -1.782   0.0751 .  
## Flock.Size             -0.189607   0.005122 -37.019  &amp;lt; 2e-16 ***
## Predator.TypeNon-Avian  0.379606   0.161332   2.353   0.0188 *  
## Predator.TypeNone       1.258391   0.165347   7.611 6.02e-14 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1.673 on 1058 degrees of freedom
## Multiple R-squared:  0.832,	Adjusted R-squared:  0.8309 
## F-statistic: 748.4 on 7 and 1058 DF,  p-value: &amp;lt; 2.2e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Interesting. This time, we have hit on the same model that was identified by the best subset selection above.&lt;/p&gt;
&lt;h3 id=&#34;forward--backward&#34;&gt;Forward &amp;amp; Backward&lt;/h3&gt;
&lt;p&gt;Can we combine the directions of stepwise model selection? Yes, we can:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;model &amp;lt;- lm(Weight ~ ., data = Reduced_df)
step.model &amp;lt;- stepAIC(model,
  direction = &amp;quot;both&amp;quot;,
  trace = FALSE
)
summary(step.model)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Weight ~ Climate + TAvg + TSD + Flock.Size + Predator.Type, 
##     data = Reduced_df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -5.2398 -1.1180  0.1215  1.1474  4.9151 
## 
## Coefficients:
##                         Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)            53.505428   3.748484  14.274  &amp;lt; 2e-16 ***
## ClimateContinental      2.978894   0.301131   9.892  &amp;lt; 2e-16 ***
## ClimateSemi-Coastal    -0.640161   0.310970  -2.059   0.0398 *  
## TAvg                   -0.068582   0.012713  -5.395 8.47e-08 ***
## TSD                    -0.069306   0.038900  -1.782   0.0751 .  
## Flock.Size             -0.189607   0.005122 -37.019  &amp;lt; 2e-16 ***
## Predator.TypeNon-Avian  0.379606   0.161332   2.353   0.0188 *  
## Predator.TypeNone       1.258391   0.165347   7.611 6.02e-14 ***
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1.673 on 1058 degrees of freedom
## Multiple R-squared:  0.832,	Adjusted R-squared:  0.8309 
## F-statistic: 748.4 on 7 and 1058 DF,  p-value: &amp;lt; 2.2e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, we land on our best subset selection model!&lt;/p&gt;
&lt;h3 id=&#34;subset-selection-vs-our-intuition&#34;&gt;Subset Selection vs. Our Intuition&lt;/h3&gt;
&lt;p&gt;Given our best subset selection, we have a very good idea of which model to go for.&lt;/p&gt;
&lt;p&gt;To see how well said model shapes up against our full model, we can simply look at LOOCV:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;train(Weight ~ Climate + TAvg + TSD + Flock.Size + Predator.Type,
  data = Sparrows_df,
  method = &amp;quot;lm&amp;quot;,
  trControl = trainControl(method = &amp;quot;LOOCV&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Linear Regression 
## 
## 1066 samples
##    5 predictor
## 
## No pre-processing
## Resampling: Leave-One-Out Cross-Validation 
## Summary of sample sizes: 1065, 1065, 1065, 1065, 1065, 1065, ... 
## Resampling results:
## 
##   RMSE      Rsquared   MAE     
##   1.677673  0.8297908  1.338399
## 
## Tuning parameter &#39;intercept&#39; was held constant at a value of TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sapply(H1_LOOCV_ls, &amp;quot;[[&amp;quot;, &amp;quot;results&amp;quot;)[-1, ]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          Comp_Flock.Size Comp_Full Full     
## RMSE     1.894279        1.865854  1.609296 
## Rsquared 0.7829992       0.7894634 0.8433834
## MAE      1.520181        1.492409  1.279003
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And our full model still wins! But why? Didn&amp;rsquo;t we test for all models? Yes, we tested for all additive models, but our Full model contains an interaction terms which the automated functions above just cannot handle, sadly.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s ask a completely different question. Would we have even adopted the best subset selection model if we had thought of it given the assumptions of a linear regression?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;par(mfrow = c(2, 2))
plot(lm(Weight ~ Climate + TAvg + TSD + Flock.Size + Predator.Type, data = Sparrows_df))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;7_Model-Selection-and-Statistical-Significance---Reporting-the-Best-Science_files/figure-html/unnamed-chunk-39-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As it turns out, this is a perfectly reasonable model. It&amp;rsquo;s just not as good as our full model.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Statistical Significance in Biology</title>
      <link>https://www.erikkusch.com/courses/excursions-into-biostatistics/8_statistical-significance-in-biology-conventions-abstractions-and-the-future/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/excursions-into-biostatistics/8_statistical-significance-in-biology-conventions-abstractions-and-the-future/</guid>
      <description>&lt;p&gt;I have prepared some &lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/ErikKusch/Homepage/blob/master/static/courses/Excursions-into-Biostatistics/Statistical-Significance-in-Biology---Conventions,-Abstractions,-and-the-Future.html&#34; target=&#34;_blank&#34;&gt; Lecture Slides &lt;/a&gt; for this session.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RMarkdown - Manuscript Workflow Revisited</title>
      <link>https://www.erikkusch.com/courses/excursions-into-biostatistics/9_rmarkdown-manuscript-workflow-revisited/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/excursions-into-biostatistics/9_rmarkdown-manuscript-workflow-revisited/</guid>
      <description>&lt;p&gt;I have prepared some &lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/ErikKusch/Homepage/blob/master/static/courses/Excursions-into-Biostatistics/Rmarkdown---Manuscript-Workflow-Revisited.html&#34; target=&#34;_blank&#34;&gt; Lecture Slides &lt;/a&gt; for this session.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Troubleshooting R - Isolating Issues and Asking Questions</title>
      <link>https://www.erikkusch.com/courses/excursions-into-biostatistics/10_troubleshooting_r-isolating-issues-and-asking-questions/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/excursions-into-biostatistics/10_troubleshooting_r-isolating-issues-and-asking-questions/</guid>
      <description>&lt;p&gt;I have prepared some &lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/ErikKusch/Homepage/blob/master/static/courses/Excursions-into-Biostatistics/Troubleshooting---Isolating-Issues-and-Asking-Questions.html&#34; target=&#34;_blank&#34;&gt; Lecture Slides &lt;/a&gt; for this session.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Excursions into Biostatistics</title>
      <link>https://www.erikkusch.com/courses/excursions-into-biostatistics/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/excursions-into-biostatistics/</guid>
      <description>&lt;p&gt;If you are seeing this page, something went awry in the build of the website. Please find the first course material for this course 
&lt;a href=&#34;https://www.erikkusch.com/courses/excursions-into-biostatistics/1_biostatistics-wait.-what/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
