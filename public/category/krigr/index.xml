<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KrigR | Erik Kusch</title>
    <link>https://www.erikkusch.com/category/krigr/</link>
      <atom:link href="https://www.erikkusch.com/category/krigr/index.xml" rel="self" type="application/rss+xml" />
    <description>KrigR</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-gb</language><copyright>Â© 2024</copyright><lastBuildDate>Thu, 26 May 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.erikkusch.com/img/%C3%A5motdalshytta.jpg</url>
      <title>KrigR</title>
      <link>https://www.erikkusch.com/category/krigr/</link>
    </image>
    
    <item>
      <title>The Theory Behind KrigR</title>
      <link>https://www.erikkusch.com/courses/krigr/background/</link>
      <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/krigr/background/</guid>
      <description>&lt;h2 id=&#34;climate-reanalyses&#34;&gt;Climate Reanalyses&lt;/h2&gt;
&lt;p&gt;Climate reanalyses are the go-to data products for climate scientists and represent the best-in-class approximations of climate characteristics across the Earth.&lt;/p&gt;
&lt;p&gt;The accuracy of climate reanalyses is largely owed to the number of observations assimilated, the underlying dynamical model, and the data assimilation methodology. Furthermore, climate reanalyses offer access to a vast array of Essential Climate Variables (ECVs) at unparalleled temporal resolutions. Lastly, as reanalyses are created from multiple models (i.e. ensembles), we can obtain data uncertainty for each data record.&lt;/p&gt;
&lt;p&gt;To our mind, this makes climate reanalyses the gold standard in climate data products for use in macroecological analyses.&lt;/p&gt;
&lt;p&gt;Please have a look at this presentation for an introduction to climate science:
&lt;a href=&#34;http://htmlpreview.github.io/?https://github.com/ErikKusch/Homepage/blob/master/content/courses/krigr/KrigRClimate.html&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.erikkusch.com/courses/krigr/climrean.png&#34; width=&#34;900&#34; margin-top = &#34;0&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-krigr-package&#34;&gt;The &lt;code&gt;KrigR&lt;/code&gt; Package&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;KrigR&lt;/code&gt; package has been designed to overcome the major stop-gaps in integrating climate reanalyses data into our research frameworks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Accessing, downloading, and processing of climate reanalysis data&lt;/li&gt;
&lt;li&gt;Matching spatial resolutions which downstream applications have become used to&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For an introduction to &lt;code&gt;KrigR&lt;/code&gt; in presentation form, please have a look at this material:
&lt;a href=&#34;http://htmlpreview.github.io/?https://github.com/ErikKusch/Homepage/blob/master/content/courses/krigr/KrigRDemo.html&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.erikkusch.com/courses/krigr/climrean.png&#34; width=&#34;900&#34; border=&#34;-20&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up KrigR</title>
      <link>https://www.erikkusch.com/courses/krigr/setup/</link>
      <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/krigr/setup/</guid>
      <description>&lt;!-- # Setting Things Up &amp; Preparing the Workshop --&gt;
&lt;h2 id=&#34;installing-krigr&#34;&gt;Installing &lt;code&gt;KrigR&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;First of all, we need to install &lt;code&gt;KrigR&lt;/code&gt;.&lt;/p&gt;
&lt;!-- &lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    &amp;ndash;&amp;gt;
Until we have implemented our &lt;a href=&#34;https://github.com/ErikKusch/KrigR/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement&#34;&gt;development ideas and goals&lt;/a&gt;, &lt;code&gt;KrigR&lt;/code&gt; will not be submitted to &lt;a href=&#34;https://cran.r-project.org/&#34;&gt;CRAN&lt;/a&gt; to avoid the hassle of updating an already accepted package. For the time being, &lt;code&gt;KrigR&lt;/code&gt; is only available through the associated &lt;a href=&#34;https://github.com/ErikKusch/KrigR&#34;&gt;GitHub&lt;/a&gt; repository.&lt;/p&gt;
&lt;!--
  &lt;/div&gt;
&lt;/div&gt;
 --&gt;
&lt;p&gt;Installation of an &lt;code&gt;R&lt;/code&gt;-Package from GitHub is facilitated via the &lt;code&gt;devtools&lt;/code&gt; package and its &lt;code&gt;install_github()&lt;/code&gt; function. Thus, &lt;code&gt;KrigR&lt;/code&gt; can be installed and loaded as follows:&lt;/p&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    As &lt;code&gt;KrigR&lt;/code&gt; is currently undergoing substantial development in response to the establishment of a new CDS and deprecation of previous dependency packages, you have to install the latest development version.
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&amp;quot;https://github.com/ErikKusch/KrigR&amp;quot;, ref = &amp;quot;Development&amp;quot;)
library(KrigR)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cds-api-access&#34;&gt;CDS API Access&lt;/h2&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    If you have used &lt;code&gt;KrigR&lt;/code&gt; or CDS services before 2024-09-16, please be advised that a new CDS has been established and you will need to create a new account and register your new user credentials with &lt;code&gt;KrigR&lt;/code&gt; to ensure continued use of it.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Before you can access 
&lt;a href=&#34;https://cds.climate.copernicus.eu/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Climate Data Store&lt;/a&gt; (CDS) products through &lt;code&gt;KrigR&lt;/code&gt;, you need to 
&lt;a href=&#34;https://accounts.ecmwf.int/auth/realms/ecmwf/login-actions/registration?client_id=cds&amp;amp;tab_id=13GUMw5dlhU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;register an account at CDS&lt;/a&gt;. Don&amp;rsquo;t forget to accept the terms and conditions:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;TermsConditions.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Once you have created your account, you can find your API credentials on your personal page (which you access by clicking your name in the top-right corner of the webpage) on the CDS webpage:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;APIKEY.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Once you have done so, we recommend you register the user ID and API Key as characters as seen below (this will match the naming scheme in our workshop material):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;API_User &amp;lt;- &amp;quot;youremail@somethingortheother&amp;quot;
API_Key &amp;lt;- &amp;quot;YourApiKeyGoesHereAsACharacterString&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-success&#34;&gt;
  &lt;div&gt;
    You are now &lt;strong&gt;ready&lt;/strong&gt; for &lt;code&gt;KrigR&lt;/code&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If this is your &lt;strong&gt;first contact&lt;/strong&gt; with &lt;code&gt;KrigR&lt;/code&gt;, we recommend strongly you &lt;strong&gt;follow the workshop material in order&lt;/strong&gt;. If you &lt;strong&gt;return to&lt;/strong&gt; &lt;code&gt;KrigR&lt;/code&gt; with specific questions or ideas, we recommend you make use of the &lt;strong&gt;search function&lt;/strong&gt; at the top left of this page. If you are short on time, the 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/quickstart/&#34;&gt;quick start&lt;/a&gt; guide will be useful to you.&lt;/p&gt;
&lt;!-- ## Session Info --&gt;
&lt;!-- ```{r, echo = FALSE} --&gt;
&lt;!-- sessionInfo() --&gt;
&lt;!-- ``` --&gt;
</description>
    </item>
    
    <item>
      <title>Quick Guide</title>
      <link>https://www.erikkusch.com/courses/krigr/quickstart/</link>
      <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/krigr/quickstart/</guid>
      <description>&lt;!-- # ```{r, sourcing-previous, echo = FALSE} --&gt;
&lt;!-- # source_rmd &lt;- function(file, local = FALSE, ...){ --&gt;
&lt;!-- #   options(knitr.duplicate.label = &#39;allow&#39;) --&gt;
&lt;!-- #  --&gt;
&lt;!-- #   tempR &lt;- tempfile(tmpdir = &#34;.&#34;, fileext = &#34;.R&#34;) --&gt;
&lt;!-- #   on.exit(unlink(tempR)) --&gt;
&lt;!-- #   knitr::purl(file, output=tempR, quiet = TRUE) --&gt;
&lt;!-- #  --&gt;
&lt;!-- #   envir &lt;- globalenv() --&gt;
&lt;!-- #   source(tempR, local = envir, ...) --&gt;
&lt;!-- # } --&gt;
&lt;!-- # source_rmd(&#34;krigr-locations.Rmd&#34;) --&gt;
&lt;!-- # ``` --&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    This part of the workshop is meant to give a &lt;strong&gt;very brief&lt;/strong&gt; introduction to &lt;code&gt;KrigR&lt;/code&gt; and I highly recommend you peruse the rest of the content, too. If you are already committed to going through the more thorough workshop material in the &lt;strong&gt;Workshop&lt;/strong&gt; tab on the left, I would recommend skipping this quickstart guide as you will gain more knowledge at a more approachable pace in that more exhaustive part of the material.
  &lt;/div&gt;
&lt;/div&gt;
&lt;!-- &lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    &amp;ndash;&amp;gt;&lt;/p&gt;
&lt;!-- This part of the workshop is dependant on set-up and preparation done previously [here](/courses/krigr/prep/). --&gt;
&lt;!--
  &lt;/div&gt;
&lt;/div&gt;
 --&gt;
&lt;h2 id=&#34;pre-krigr-housekeeping&#34;&gt;Pre-&lt;code&gt;KrigR&lt;/code&gt; Housekeeping&lt;/h2&gt;
&lt;p&gt;Before we can commence the quick start guide, I want to set up a directory structure and prepare some plotting functions to make the rest of the guide run more smoothly.&lt;/p&gt;
&lt;h3 id=&#34;cds-api-credentials&#34;&gt;CDS API Credentials&lt;/h3&gt;
&lt;p&gt;As explained in the 
&lt;a href=&#34;courses/krigr/setup/#cds-api-access&#34;&gt;&lt;code&gt;KrigR&lt;/code&gt; setup&lt;/a&gt;, please register your CDS API credentials into your &lt;code&gt;R&lt;/code&gt; session like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;API_User &amp;lt;- &amp;quot;youremail@somethingortheother&amp;quot;
API_Key &amp;lt;- &amp;quot;YourApiKeyGoesHereAsACharacterString&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;setting-up-directories&#34;&gt;Setting up Directories&lt;/h3&gt;
&lt;p&gt;For this guide to run in a structured way, we create a folder/directory structure. We create the following directories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;Data&lt;/strong&gt; directory for all of our data downloads&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;Covariate&lt;/strong&gt; directory for all of our covariate data&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;Exports&lt;/strong&gt; directory for all of our Kriging outputs&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Dir.Base &amp;lt;- getwd() # identifying the current directory
Dir.Data &amp;lt;- file.path(Dir.Base, &amp;quot;Data&amp;quot;) # folder path for data
Dir.Covariates &amp;lt;- file.path(Dir.Base, &amp;quot;Covariates&amp;quot;) # folder path for covariates
Dir.Exports &amp;lt;- file.path(Dir.Base, &amp;quot;Exports&amp;quot;) # folder path for exports
## create directories, if they don&#39;t exist yet
Dirs &amp;lt;- sapply(
  c(Dir.Data, Dir.Covariates, Dir.Exports),
  function(x) if (!dir.exists(x)) dir.create(x)
)
rm(Dirs) # we don&#39;t need to keep the response to directory creation
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;using-krigr&#34;&gt;Using &lt;code&gt;KrigR&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Before we start these exercises, we need to load &lt;code&gt;KrigR&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(KrigR)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;KrigR&lt;/code&gt; works with &lt;code&gt;terra&lt;/code&gt; objects to handle raster data, we may also want to load the &lt;code&gt;terra&lt;/code&gt; package at this point:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(terra)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;KrigR&lt;/code&gt; is conceptualised around a three-step progression through its functionality using the three core functions &lt;code&gt;CDownloadS()&lt;/code&gt;, &lt;code&gt;CovariateSetup()&lt;/code&gt;, and &lt;code&gt;Kriging()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Workflow.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;data-retrieval--handling---cdownloads&#34;&gt;Data Retrieval &amp;amp; Handling - &lt;code&gt;CDownloadS()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Using the &lt;code&gt;CDownloadS()&lt;/code&gt; function, you gain access to a number of CDS-hosted data products. More details on how you can find out which data products are supported and how to query them, refer to the 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/meta/&#34;&gt;Finding CDS-Hosted Data Products&lt;/a&gt; section. For the sake of this quickstart overview of &lt;code&gt;KrigR&lt;/code&gt; capabilities, we will execute a very simple call to &lt;code&gt;CDownloadS()&lt;/code&gt;. For a deeper understanding of the capabilities of &lt;code&gt;KrigR&lt;/code&gt; for CDS-data download and processing, please refer to the 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/cdownloads&#34;&gt;Data Retrieval &amp;amp; Handling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The most simple way in which you can run the functions of the &lt;code&gt;KrigR&lt;/code&gt; package is by specifying a rectangular bounding box (i.e., an &lt;code&gt;SpatExtent&lt;/code&gt;) to specify your study region(s). For this quickstart, we focus on an area covering southern and central Norway:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Extent_ext &amp;lt;- ext(c(4.05, 12.95, 58.05, 63.55))
Extent_ext
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## SpatExtent : 4.05, 12.95, 58.05, 63.55 (xmin, xmax, ymin, ymax)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, you specify, which variable, from which data product, for which time-window you want to obtain and at which temporal resolution. For this part of the workshop, we download air temperature for a three-day interval around 2022-08-18 - when I camped on a mountain flank below Hurrungane facing FannarÃ¥ki - the mountain that inspired my relocation to Norway. Loaded with this information, &lt;code&gt;CDownloadS()&lt;/code&gt; then executes preliminary checks of validity of your data request, breaks the request into separate chunks if it is too big to be handled by CDS all at once, hands the request to CDS, waits for request completion on CDS followed by data download, spatial limiting, temporal aggregation, and finally, saving of the resulting file to your hard drive.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    Notice that the downloading of CDS-hosted data may take a short while to start as the download request gets queued with CDS before it is executed. An overview of your CDS requests can be seen &lt;a href=&#34;https://cds.climate.copernicus.eu/requests?tab=all&#34;&gt;here&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    You need to accept the required licences for each data product before download queries are accepted by CDS. You only have to do this once per data product. If licenses haven&amp;rsquo;t been accepted yet, &lt;code&gt;CDownloadS()&lt;/code&gt; terminates with an error message containing the URL to the data product page where you will find a &amp;ldquo;Terms of use&amp;rdquo; section under which you need to accept the required license(s).
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Note that I have already downloaded the QuickStart raw data and CDownloadS() is simply loading this from the disk for me here. Your console output while CDownloadS() is being executed will look differently.
QuickStart_Raw &amp;lt;- CDownloadS(
  ## Variable and Data Product
  Variable = &amp;quot;2m_temperature&amp;quot;, # this is air temperature
  DataSet = &amp;quot;reanalysis-era5-land&amp;quot;, # data product from which we want to download
  ## Time-Window
  DateStart = &amp;quot;2022-08-17&amp;quot;, # date at which time window opens
  DateStop = &amp;quot;2022-08-19&amp;quot;, # date at which time window terminates
  TZone = &amp;quot;CET&amp;quot;, # European Central Time to align with our study region
  ## Temporal Aggregation
  TResolution = &amp;quot;day&amp;quot;, # we want daily aggregates
  TStep = 1, # we want aggregates of 1 day each
  ## Spatial Limiting
  Extent = Extent_ext, # our rectangular bounding box
  ## File Storing
  Dir = Dir.Data, # where to store the data
  FileName = &amp;quot;QuickStart_Raw&amp;quot;, # what to call the resulting file
  ## API User Credentials
  API_User = API_User,
  API_Key = API_Key
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ###### CDS Request &amp;amp; Data Download
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Building request&amp;quot;
## [1] &amp;quot;Checking request validity&amp;quot;
## [1] &amp;quot;A file with the name QuickStart_Raw.nc already exists in C:/Users/erikkus/Documents/Homepage/content/courses/krigr/Data.&amp;quot;
## [1] &amp;quot;Loading this file for you from the disk.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;QuickStart_Raw
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class       : SpatRaster 
## dimensions  : 55, 88, 3  (nrow, ncol, nlyr)
## resolution  : 0.1, 0.1  (x, y)
## extent      : 4.1, 12.9, 58.1, 63.6  (xmin, xmax, ymin, ymax)
## coord. ref. : lon/lat Coordinate System imported from GRIB file 
## source      : QuickStart_Raw.nc 
## names       : QuickStart_Raw_1, QuickStart_Raw_2, QuickStart_Raw_3 
## time        : 2022-08-16 to 2022-08-18 CEST
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See how we have obtained a &lt;code&gt;SpatRaster&lt;/code&gt; corresponding the three dates we indicated to &lt;code&gt;CDownloadS()&lt;/code&gt;? Great! The raw, hourly ERA5-Land data we queried has been aggregated to daily intervals as specified by us. You may also notice that the &lt;code&gt;SpatRaster&lt;/code&gt; we obtained has a slightly different extent than what we queried. This is because CDS aligns the data with a data product specific grid. If in doubt on this, simply specify a slightly larger extent than you ultimately need for your study.&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;KrigR&lt;/code&gt; function &lt;code&gt;Plot.SpatRast()&lt;/code&gt;, we can easily visualise the data we just obtained.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot.SpatRast(QuickStart_Raw)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;2-KRIG~1/figure-html/ClimExtVis-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see the &lt;code&gt;CDownloadS()&lt;/code&gt; function updates you on what it is currently working on at each major step. I implemented this to make sure people don&amp;rsquo;t get too anxious staring at an empty console in &lt;code&gt;R&lt;/code&gt;. If this feature is not appealing to you, you can turn this progress tracking off by setting &lt;code&gt;verbose = FALSE&lt;/code&gt; in the function call to &lt;code&gt;CDownloadS()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CDownloadS()&lt;/code&gt; also saves metadata pertaining to your download &amp;amp; handling query directly to the final output. While we store all settings of your function call (sans your API credentials), the most relevant metadata appended to your files obtained with &lt;code&gt;CDownloadS()&lt;/code&gt; will most likely be the citation command by which to reference this data in your subsequent research outputs. You can retrieve this information as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;metags(QuickStart_Raw)[&amp;quot;Citation&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                                                                                                                 Citation 
## &amp;quot;reanalysis-era5-land data (DOI:10.24381/cds.e2161bac) obtained with KrigR (DOI:10.1088/1748-9326/ac48b3) on 2024-10-04 14:29:18.291047&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-success&#34;&gt;
  &lt;div&gt;
    More detailed instructions on how to make the most effective use of the &lt;code&gt;CDownloadS()&lt;/code&gt; function and ensure you receive the data you require can be found &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/download/&#34;&gt;here&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Keep in mind that every function within the &lt;code&gt;KrigR&lt;/code&gt; package produces NetCDF (.nc) or TIFF (.tif) files (depending on your specification of the &lt;code&gt;FileExtension&lt;/code&gt; argument in &lt;code&gt;CDownloadS()&lt;/code&gt;) in the specified directory (&lt;code&gt;Dir&lt;/code&gt; argument in the function call) to allow for further manipulation outside of &lt;code&gt;R&lt;/code&gt; if necessary (for example, using Panoply).&lt;/p&gt;
&lt;h3 id=&#34;downscaling-covariates---covariatesetup&#34;&gt;Downscaling Covariates - &lt;code&gt;CovariateSetup()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Next, we use the &lt;code&gt;CovariateSetup()&lt;/code&gt; function which comes with &lt;code&gt;KrigR&lt;/code&gt; to obtain elevation data as our covariate of choice. This produces two &lt;code&gt;SpatRasters&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A raster of &lt;strong&gt;training&lt;/strong&gt; resolution which matches the input data in all attributes except for the data in each cell.&lt;/li&gt;
&lt;li&gt;A raster of &lt;strong&gt;target&lt;/strong&gt; resolution which matches the input data as closely as possible in all attributes except for the resolution (which is specified by the user).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of these products are bundled into a &lt;code&gt;list&lt;/code&gt; where the first element corresponds to the &lt;em&gt;training&lt;/em&gt; resolution and the second element contains the &lt;em&gt;target&lt;/em&gt; resolution covariate data. Here, we specify a target resolution of &lt;code&gt;.02&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    Alternatively to specifying a target resolution, you can specify a different &lt;code&gt;SpatRaster&lt;/code&gt; which should be matched in all attributes by the raster at target resolution.&lt;/p&gt;
&lt;!-- This is explained more in-depth in [this part of the workshop](/courses/krigr/third-party).  --&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Note that I have already downloaded the global GMTED2010 data with this function prior, your output will show the download itself as well
Covs_ls &amp;lt;- CovariateSetup(
  Training = QuickStart_Raw,
  Target = .02,
  Dir = Dir.Covariates,
  Keep_Global = TRUE
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;GMTED2010 covariate data already downloaded.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Covs_ls
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $Training
## class       : SpatRaster 
## dimensions  : 55, 88, 1  (nrow, ncol, nlyr)
## resolution  : 0.1, 0.1  (x, y)
## extent      : 4.1, 12.9, 58.1, 63.6  (xmin, xmax, ymin, ymax)
## coord. ref. : lon/lat WGS 84 (EPSG:4326) 
## source      : Covariates_Train.nc 
## name        : GMTED2010 
## 
## $Target
## class       : SpatRaster 
## dimensions  : 330, 528, 1  (nrow, ncol, nlyr)
## resolution  : 0.01666667, 0.01666667  (x, y)
## extent      : 4.09986, 12.89986, 58.09986, 63.59986  (xmin, xmax, ymin, ymax)
## coord. ref. : lon/lat WGS 84 (EPSG:4326) 
## source      : Covariates_Target.nc 
## name        : GMTED2010
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, we can use a &lt;code&gt;KrigR&lt;/code&gt; plotting function to easily visualise this data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot.Covariates(Covs_ls)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;2-KRIG~1/figure-html/CovExtViz-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-success&#34;&gt;
  &lt;div&gt;
    The &lt;code&gt;CovariateSetup()&lt;/code&gt; function can also be used to prepare raster data you already have at hand for use in subsequent Kriging.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;statistical-downscaling---kriging&#34;&gt;Statistical Downscaling - &lt;code&gt;Kriging()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s statistically downscale the data we just obtained with the covariates we just prepared. We do so using the &lt;code&gt;Kriging()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;QuickStart_Krig &amp;lt;- Kriging(
  Data = QuickStart_Raw, # data we want to krig as a raster object
  Covariates_training = Covs_ls[[1]], # training covariate as a raster object
  Covariates_target = Covs_ls[[2]], # target covariate as a raster object
  Equation = &amp;quot;GMTED2010&amp;quot;, # the covariate(s) we want to use
  nmax = 40, # degree of localisation
  Cores = 3, # we want to krig using three cores to speed this process up
  FileName = &amp;quot;QuickStart_Krig&amp;quot;, # the file name for our full kriging output
  Dir = Dir.Exports # which directory to save our final input in
)
QuickStart_Krig
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $Prediction
## class       : SpatRaster 
## dimensions  : 330, 528, 3  (nrow, ncol, nlyr)
## resolution  : 0.01666667, 0.01666667  (x, y)
## extent      : 4.09986, 12.89986, 58.09986, 63.59986  (xmin, xmax, ymin, ymax)
## coord. ref. : lon/lat Coordinate System imported from GRIB file 
## source      : QuickStart_Krig_Kriged.nc 
## varname     : QuickStart_Raw 
## names       : QuickStart~g_Kriged_1, QuickStart~g_Kriged_2, QuickStart~g_Kriged_3 
## time        : 2022-08-16 to 2022-08-18 CEST 
## 
## $StDev
## class       : SpatRaster 
## dimensions  : 330, 528, 3  (nrow, ncol, nlyr)
## resolution  : 0.01666667, 0.01666667  (x, y)
## extent      : 4.09986, 12.89986, 58.09986, 63.59986  (xmin, xmax, ymin, ymax)
## coord. ref. : lon/lat Coordinate System imported from GRIB file 
## source      : QuickStart_Krig_STDev.nc 
## varname     : QuickStart_Raw 
## names       : QuickStart~ig_STDev_1, QuickStart~ig_STDev_2, QuickStart~ig_STDev_3 
## time        : 2022-08-16 to 2022-08-18 CEST
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This operation took 2 seconds on my machine (this may vary drastically on other devices). There we go. All the data has been downscaled and we do have uncertainties recorded for all of our outputs. Let&amp;rsquo;s visualise this again with a &lt;code&gt;KrigR&lt;/code&gt; function - &lt;code&gt;Plot.Kriged()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot.Kriged(QuickStart_Krig)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;2-KRIG~1/figure-html/KrigExtViz-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the elevation patterns show up clearly in our kriged air temperature output. Seems like Norway got warmer the day I left camp on August of 2022 - I do remember the night from the 18th to the 19th being the first clear night after a few days of constant cloud cover and it did get cold in my tent that night, but the heat during daytime thereafter seems to have balanced that out and swung the daily average into being a warmer day. Furthermore, you can see that our certainty of Kriging predictions steadily increases towards the 2022-08-18 in comparison to the preceding days. However, do keep in mind that a maximum standard error of 2.84, 1.89, 1.5 (for each layer of our output respectively, and across the sea at that, where there are no topographical variations we can exploit for kriging) on a total range of data of 15.31, 14.8, 14.73 (again, for each layer in the output respectively) is evident of a downscaling result we can be confident in.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    More detailed instructions on how to make the most effective use of the &lt;code&gt;krigR()&lt;/code&gt; function can be found &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/kriging/&#34;&gt;here&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-success&#34;&gt;
  &lt;div&gt;
    This concludes the quick start tutorial for &lt;code&gt;KrigR&lt;/code&gt;. For more effective use of the &lt;code&gt;KrigR&lt;/code&gt; toolbox, I suggest you peruse the rest of the workshop material or use the search function if you have specific queries.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;session-info&#34;&gt;Session Info&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.4.0 (2024-04-24 ucrt)
## Platform: x86_64-w64-mingw32/x64
## Running under: Windows 11 x64 (build 22631)
## 
## Matrix products: default
## 
## 
## locale:
## [1] C
## 
## time zone: Europe/Oslo
## tzcode source: internal
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] terra_1.7-78 KrigR_0.4.0 
## 
## loaded via a namespace (and not attached):
##  [1] tidyselect_1.2.1   viridisLite_0.4.2  dplyr_1.1.4        farver_2.1.2      
##  [5] viridis_0.6.5      R.utils_2.12.3     fastmap_1.2.0      reshape_0.8.9     
##  [9] blogdown_1.19      digest_0.6.37      timechange_0.3.0   lifecycle_1.0.4   
## [13] sf_1.0-17          magrittr_2.0.3     compiler_4.4.0     rlang_1.1.4       
## [17] sass_0.4.9         progress_1.2.3     doSNOW_1.0.20      tools_4.4.0       
## [21] utf8_1.2.4         yaml_2.3.10        knitr_1.48         FNN_1.1.4.1       
## [25] prettyunits_1.2.0  labeling_0.4.3     sp_2.1-4           classInt_0.4-10   
## [29] plyr_1.8.9         abind_1.4-8        KernSmooth_2.23-22 R.cache_0.16.0    
## [33] withr_3.0.1        purrr_1.0.2        R.oo_1.26.0        grid_4.4.0        
## [37] fansi_1.0.6        xts_0.14.0         e1071_1.7-16       colorspace_2.1-1  
## [41] ggplot2_3.5.1      scales_1.3.0       iterators_1.0.14   cli_3.6.3         
## [45] rmarkdown_2.28     crayon_1.5.3       intervals_0.15.5   generics_0.1.3    
## [49] httr_1.4.7         ncdf4_1.23         DBI_1.2.3          pbapply_1.7-2     
## [53] cachem_1.1.0       proxy_0.4-27       ecmwfr_2.0.2       stringr_1.5.1     
## [57] stars_0.6-6        parallel_4.4.0     vctrs_0.6.5        jsonlite_1.8.8    
## [61] bookdown_0.40      hms_1.1.3          foreach_1.5.2      jquerylib_0.1.4   
## [65] tidyr_1.3.1        units_0.8-5        snow_0.4-4         glue_1.7.0        
## [69] codetools_0.2-20   cowplot_1.1.3      gstat_2.1-2        lubridate_1.9.3   
## [73] stringi_1.8.4      gtable_0.3.5       munsell_0.5.1      tibble_3.2.1      
## [77] styler_1.10.3      pillar_1.9.0       htmltools_0.5.8.1  R6_2.5.1          
## [81] automap_1.1-12     evaluate_0.24.0    lattice_0.22-6     highr_0.11        
## [85] R.methodsS3_1.8.2  memoise_2.0.1      bslib_0.8.0        class_7.3-22      
## [89] Rcpp_1.0.13        gridExtra_2.3      spacetime_1.3-2    xfun_0.47         
## [93] zoo_1.8-12         pkgconfig_2.0.3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Preparing the Workshop</title>
      <link>https://www.erikkusch.com/courses/krigr/prep/</link>
      <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/krigr/prep/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;&lt;code&gt;KrigR&lt;/code&gt; is currently undergoing development. As a result, this part of the workshop has become deprecated. Please refer to the &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/setup/&#34;&gt;setup&lt;/a&gt; &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/quickstart/&#34;&gt;quick guide&lt;/a&gt; portions of this material as these are up-to-date. &lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;!-- # Preparing the Workshop --&gt;
&lt;h2 id=&#34;r-packages-for-the-workshop&#34;&gt;&lt;code&gt;R&lt;/code&gt; Packages for the Workshop&lt;/h2&gt;
&lt;p&gt;For the sake of this series of tutorials, we need some extra packages for visualisations. To load them, we use a custom function (&lt;code&gt;install.load.package()&lt;/code&gt;, see below). This function checks whether a package is already installed, subsequently install (if necessary) and loads the package. To carry this operation out for several packages, we simply apply it to a vector of package names using &lt;code&gt;sapply()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.load.package &amp;lt;- function(x){
  if (!require(x, character.only = TRUE))
    install.packages(x, repos=&#39;http://cran.us.r-project.org&#39;)
  require(x, character.only = TRUE)
}
package_vec &amp;lt;- c(&amp;quot;tidyr&amp;quot;, # for turning rasters into ggplot-dataframes
                 &amp;quot;ggplot2&amp;quot;, # for plotting
                 &amp;quot;viridis&amp;quot;, # colour palettes
                 &amp;quot;cowplot&amp;quot;, # gridding multiple plots
                 &amp;quot;ggmap&amp;quot;, # obtaining satellite maps
                 &amp;quot;gimms&amp;quot;, # to get some pre-existing data to match in our downscaling
                 &amp;quot;rnaturalearth&amp;quot;, # for shapefiles
                 &amp;quot;rnaturalearthdata&amp;quot;, # for high-resolution shapefiles
                 &amp;quot;mapview&amp;quot; # for generating mapview outputs
                 )
sapply(package_vec, install.load.package)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             tidyr           ggplot2           viridis           cowplot             ggmap 
##              TRUE              TRUE              TRUE              TRUE              TRUE 
##             gimms     rnaturalearth rnaturalearthdata           mapview 
##              TRUE              TRUE              TRUE              TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;setting-up-directories&#34;&gt;Setting up Directories&lt;/h2&gt;
&lt;p&gt;The workshop is designed to run completely from scratch. For this to work in a structured way, we create a folder/directory structure so that we got some nice compartments on our hard drives. We create the following directories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;Data&lt;/strong&gt; directory for all of our data downloads&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;Covariate&lt;/strong&gt; directory for all of our covariate data&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;Exports&lt;/strong&gt; directory for all of our Kriging outputs&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Dir.Base &amp;lt;- getwd() # identifying the current directory
Dir.Data &amp;lt;- file.path(Dir.Base, &amp;quot;Data&amp;quot;) # folder path for data
Dir.Covariates &amp;lt;- file.path(Dir.Base, &amp;quot;Covariates&amp;quot;) # folder path for covariates
Dir.Exports &amp;lt;- file.path(Dir.Base, &amp;quot;Exports&amp;quot;) # folder path for exports
## create directories, if they don&#39;t exist yet
Dirs &amp;lt;- sapply(c(Dir.Data, Dir.Covariates, Dir.Exports), 
               function(x) if(!dir.exists(x)) dir.create(x))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;visualiation-functions&#34;&gt;Visualiation Functions&lt;/h2&gt;
&lt;p&gt;In order to easily visualise our Kriging procedure including (1) inputs, (2) covariates, and (3) outputs without repeating too much of the same code, we have prepared some plotting functions which you can download as 
&lt;a href=&#34;https://raw.githubusercontent.com/ErikKusch/Homepage/master/content/courses/krigr/FUN_Plotting.R&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FUN_Plotting.R&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;FUN_Plotting.R&lt;/code&gt; file placed in the project directory of your workshop material (i.e., the directory returned by &lt;code&gt;Dir.Base&lt;/code&gt;), running the following will register the three plotting functions in your &lt;code&gt;R&lt;/code&gt; environment.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;source(&amp;quot;FUN_Plotting.R&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The plotting functions you have just loaded are called:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Plot_Raw()&lt;/code&gt; - we will use this function to visualise data downloaded with &lt;code&gt;KrigR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Plot_Covs()&lt;/code&gt; - this function will help us visualise the covariates we use for statistical interpolation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Plot_Krigs()&lt;/code&gt; - kriged products and their associated uncertainty will be visualised using this function&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-normal&#34;&gt;
  &lt;div&gt;
    Donât worry about understanding how these functions work off the bat here. Kriging and the package &lt;code&gt;KrigR&lt;/code&gt; are what we want to demonstrate here - not visualisation strategies.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;locations-of-interest&#34;&gt;Locations of Interest&lt;/h2&gt;
&lt;h3 id=&#34;our-workshop-target-region&#34;&gt;Our Workshop Target Region&lt;/h3&gt;
&lt;p&gt;To keep this workshop material concise and make it so you don&amp;rsquo;t need access to a server of cluster throughout the following demonstrations of &lt;code&gt;KrigR&lt;/code&gt;, we will specify a set of locations in which we are interested.&lt;/p&gt;
&lt;p&gt;The locations we focus on for this workshop are situated throughout eastern Germany and the north-western parts of the Czech Republic. Why do we focus on this particular part of the Earth? There are three reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Topographical Heterogeneity&lt;/em&gt; - the area we select here contains large swaths of flat lowlands as well as some mountain ridges. This will make for visually pleasing plots and highlight the capability of kriging.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Geographic Scale&lt;/em&gt; - the area we are selecting here hits a certain sweet-spot for our purposes as its size makes it so that all &lt;code&gt;KrigR&lt;/code&gt; functions run to completion in a relatively short time.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Familiarity&lt;/em&gt; - I was born and grew up in this region and have fond memories of the place. Please excuse my indulging in a bit of nostalgia.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    Change the locations of interest at your own risk.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Using a different set of locations than the ones we specify here will change computational load and time as well as disk space required when working through the workshop material.&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;KrigR&lt;/code&gt; will be able to get you the data you want for the locations you desire, but computational requirements will vary.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;spatial-preferences-in-krigr&#34;&gt;Spatial Preferences in &lt;code&gt;KrigR&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;code&gt;KrigR&lt;/code&gt; is capable of learning about your spatial preferences in three ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;As an &lt;code&gt;extent&lt;/code&gt; input (a rectangular box).&lt;/li&gt;
&lt;li&gt;As a &lt;code&gt;SpatialPolygons&lt;/code&gt; input (a polygon or set of polygons).&lt;/li&gt;
&lt;li&gt;As a set of locations stored in a &lt;code&gt;data.frame&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To demonstrate the range of specifications permitted in &lt;code&gt;KrigR&lt;/code&gt;, we make use of all three specifications. As we will see in this tutorial, masking out unnecessary areas from our analyses speeds up Kriging tremendously hence why we strongly suggest you make use of &lt;code&gt;SpatialPolygons&lt;/code&gt; or &lt;code&gt;data.frames&lt;/code&gt; whenever possible.&lt;/p&gt;
&lt;h4 id=&#34;area-of-interest-extent&#34;&gt;Area of Interest (&lt;code&gt;extent&lt;/code&gt;)&lt;/h4&gt;
&lt;p&gt;The simplest way in which you can run the functions of the &lt;code&gt;KrigR&lt;/code&gt; package is by specifying a rectangular bounding box (i.e., an &lt;code&gt;extent&lt;/code&gt;) to specify your study region(s). We simply specify the longitude and latitude ranges and store the object as an &lt;code&gt;extent&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Extent_ext &amp;lt;- extent(c(9.87, 15.03, 49.89, 53.06))
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;shape-of-interest-spatialpolygons&#34;&gt;Shape of Interest (&lt;code&gt;SpatialPolygons&lt;/code&gt;)&lt;/h4&gt;
&lt;p&gt;To define &lt;code&gt;SpatialPolygons&lt;/code&gt; for our purposes, I make use of the 
&lt;a href=&#34;https://www.naturalearthdata.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NaturalEarthData&lt;/a&gt;. Here, I select a set of polygons corresponding to some states in Germany and the Czech Republic:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Shape_shp &amp;lt;- ne_states(country = c(&amp;quot;Germany&amp;quot;, &amp;quot;Czech Republic&amp;quot;))
Shape_shp &amp;lt;- Shape_shp[Shape_shp$name_en %in% c(&amp;quot;Saxony&amp;quot;, &amp;quot;Saxony-Anhalt&amp;quot;, &amp;quot;Thuringia&amp;quot;, 
                                                &amp;quot;ÃstÃ­ nad Labem Region&amp;quot;, &amp;quot;Karlovy Vary Region&amp;quot;), ]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    The above requires the &lt;code&gt;naturalhighres&lt;/code&gt; package which can give some users troubles.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s a workaround if &lt;code&gt;naturalhighres&lt;/code&gt; does not work for you:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;download.file(&amp;quot;https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_admin_1_states_provinces.zip&amp;quot;,
              destfile = &amp;quot;highres.zip&amp;quot;)
unzip(&amp;quot;highres.zip&amp;quot;)
Shape_shp &amp;lt;- readOGR(&amp;quot;ne_10m_admin_1_states_provinces.shp&amp;quot;)
Shape_shp &amp;lt;- Shape_shp[Shape_shp$name_en %in% c(&amp;quot;Saxony&amp;quot;, &amp;quot;Saxony-Anhalt&amp;quot;, &amp;quot;Thuringia&amp;quot;,
                                                &amp;quot;ÃÂÃÂ¡stÃÂÃÂ­ nad Labem&amp;quot;, &amp;quot;Karlovy Vary&amp;quot;), ]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;points-of-interest-dataframe&#34;&gt;Points of Interest (&lt;code&gt;data.frame&lt;/code&gt;)&lt;/h4&gt;
&lt;p&gt;Finally, to represent specific points of interest, I have prepared a small data set of mountains for each state in the shapefile above. You can download this file here: 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/Mountains_df.RData&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mountains_df.RData&lt;/a&gt;. Simply place this file into your data directory and continue the workshop.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s load this data set and quickly visualise it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;load(file.path(Dir.Data, &amp;quot;Mountains_df.RData&amp;quot;)) # load an sp object called Mountains_sp
Mountains_df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          Mountain      Lon      Lat
## 1     Fichtelberg 12.95472 50.42861
## 2         Brocken 10.61722 51.80056
## 3 GroÃer Beerberg 10.74611 50.65944
## 4        MeluzÃ­na 13.00778 50.39028
## 5       MileÅ¡ovka 13.93153 50.55523
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-normal&#34;&gt;
  &lt;div&gt;
    We now have all of our objects for spatial preferences ready for the workshop.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;visualising-our-study-setting&#34;&gt;Visualising our Study Setting&lt;/h3&gt;
&lt;p&gt;To finish our preparations for this workshop, let&amp;rsquo;s visualise the different locations of interest:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Establish rectangular bounding box from extent
bbox &amp;lt;- as.numeric(as(Extent_ext, &#39;SpatialPolygons&#39;)@bbox)
names(bbox) &amp;lt;- c(&amp;quot;left&amp;quot;, &amp;quot;bottom&amp;quot;, &amp;quot;right&amp;quot;, &amp;quot;top&amp;quot;)

## Make locations of mountains into SpatialPoints
Mountains_sp &amp;lt;- Mountains_df
coordinates(Mountains_sp) &amp;lt;- ~Lon+Lat

## download a map of the area specified by the extent
back_gg &amp;lt;- get_map(bbox, maptype = &#39;terrain&#39;)

## combine locations of interest into one plot
ggmap(back_gg, extent = &amp;quot;device&amp;quot;) + # plot the extent area
  ## display the SpatialPolygons area
  geom_polygon(aes(x = long, y = lat, group = id), data = fortify(Shape_shp),
               colour = &#39;black&#39;, size = 1, fill = &#39;black&#39;, alpha = .5) + 
  ## add the data.frame data
  geom_point(aes(x = Lon, y = Lat), data = data.frame(Mountains_sp), 
             colour = &amp;quot;red&amp;quot;, size = 4, pch = 13) + 
  ## some style additions
  theme_bw() + labs(x= &amp;quot;Longitude [Â°]&amp;quot;, y = &amp;quot;Latitude  [Â°]&amp;quot;) + 
  theme(plot.margin=unit(c(0, 1, 0, 1),&amp;quot;lines&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-locations_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In the above figure, the map area designates the &lt;code&gt;extent&lt;/code&gt; specifications while the grey overlay display the &lt;code&gt;SpatialPolygons&lt;/code&gt; preference and points of interest (form our &lt;code&gt;data.frame&lt;/code&gt; input) are highlighted with red plotting symbols.&lt;/p&gt;
&lt;div class=&#34;alert alert-normal&#34;&gt;
  &lt;div&gt;
    We are now ready to start the &lt;code&gt;KrigR&lt;/code&gt; portion of the workshop!
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;session-info&#34;&gt;Session Info&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.0.5 (2021-03-31)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 19043)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=English_United Kingdom.1252  LC_CTYPE=English_United Kingdom.1252   
## [3] LC_MONETARY=English_United Kingdom.1252 LC_NUMERIC=C                           
## [5] LC_TIME=English_United Kingdom.1252    
## 
## attached base packages:
## [1] parallel  stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] mapview_2.10.2          rnaturalearthdata_0.1.0 rnaturalearth_0.1.0    
##  [4] gimms_1.2.0             ggmap_3.0.0             cowplot_1.1.1          
##  [7] viridis_0.6.0           viridisLite_0.4.0       ggplot2_3.3.6          
## [10] tidyr_1.1.3             KrigR_0.1.2             httr_1.4.2             
## [13] stars_0.5-3             abind_1.4-5             fasterize_1.0.3        
## [16] sf_1.0-0                lubridate_1.7.10        automap_1.0-14         
## [19] doSNOW_1.0.19           snow_0.4-3              doParallel_1.0.16      
## [22] iterators_1.0.13        foreach_1.5.1           rgdal_1.5-23           
## [25] raster_3.4-13           sp_1.4-5                stringr_1.4.0          
## [28] keyring_1.2.0           ecmwfr_1.3.0            ncdf4_1.17             
## 
## loaded via a namespace (and not attached):
##  [1] bitops_1.0-7             satellite_1.0.2          xts_0.12.1              
##  [4] webshot_0.5.2            tools_4.0.5              bslib_0.3.1             
##  [7] utf8_1.2.1               R6_2.5.0                 zyp_0.10-1.1            
## [10] KernSmooth_2.23-18       DBI_1.1.1                colorspace_2.0-0        
## [13] withr_2.4.2              tidyselect_1.1.0         gridExtra_2.3           
## [16] leaflet_2.0.4.1          curl_4.3.2               compiler_4.0.5          
## [19] leafem_0.1.3             gstat_2.0-7              labeling_0.4.2          
## [22] bookdown_0.22            sass_0.4.1               scales_1.1.1            
## [25] classInt_0.4-3           proxy_0.4-25             digest_0.6.27           
## [28] rmarkdown_2.14           base64enc_0.1-3          jpeg_0.1-8.1            
## [31] pkgconfig_2.0.3          htmltools_0.5.2          highr_0.9               
## [34] fastmap_1.1.0            htmlwidgets_1.5.3        rlang_0.4.11            
## [37] FNN_1.1.3                farver_2.1.0             jquerylib_0.1.4         
## [40] generics_0.1.0           zoo_1.8-9                jsonlite_1.7.2          
## [43] crosstalk_1.1.1          dplyr_1.0.5              magrittr_2.0.1          
## [46] Rcpp_1.0.7               munsell_0.5.0            fansi_0.4.2             
## [49] lifecycle_1.0.0          stringi_1.5.3            yaml_2.2.1              
## [52] plyr_1.8.6               grid_4.0.5               crayon_1.4.1            
## [55] lattice_0.20-41          knitr_1.33               pillar_1.6.0            
## [58] boot_1.3-27              rjson_0.2.20             spacetime_1.2-4         
## [61] stats4_4.0.5             codetools_0.2-18         glue_1.4.2              
## [64] evaluate_0.14            blogdown_1.3             vctrs_0.3.7             
## [67] png_0.1-7                RgoogleMaps_1.4.5.3      gtable_0.3.0            
## [70] purrr_0.3.4              reshape_0.8.8            assertthat_0.2.1        
## [73] cachem_1.0.4             xfun_0.31                lwgeom_0.2-6            
## [76] e1071_1.7-6              rnaturalearthhires_0.2.0 class_7.3-18            
## [79] Kendall_2.2              tibble_3.1.1             intervals_0.15.2        
## [82] memoise_2.0.0            units_0.7-2              ellipsis_0.3.2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Downloading &amp; Processing</title>
      <link>https://www.erikkusch.com/courses/krigr/download/</link>
      <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/krigr/download/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;&lt;code&gt;KrigR&lt;/code&gt; is currently undergoing development. As a result, this part of the workshop has become deprecated. Please refer to the &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/setup/&#34;&gt;setup&lt;/a&gt; &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/quickstart/&#34;&gt;quick guide&lt;/a&gt; portions of this material as these are up-to-date. &lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    This part of the workshop is dependant on set-up and preparation done previously &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/prep/&#34;&gt;here&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First, we load &lt;code&gt;KrigR&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(KrigR)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Downloads and data processing with &lt;code&gt;KrigR&lt;/code&gt; are staged and executed with the &lt;code&gt;download_ERA()&lt;/code&gt;function.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;download_ERA()&lt;/code&gt; is a very versatile function and I will show you it&amp;rsquo;s capabilities throughout this material.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    We will start with a &lt;strong&gt;simple calls&lt;/strong&gt;  to &lt;code&gt;KrigR&lt;/code&gt; and subsequently make them &lt;strong&gt;more sophisticated&lt;/strong&gt; during this workshop.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;downloading-climate-data&#34;&gt;Downloading Climate Data&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with a very basic call to &lt;code&gt;download_ERA()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For this part of the workshop, we download air temperature for my birth month (January 1995) using the extent of our 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/prep/#our-workshop-target-region&#34;&gt;target region&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See the code chunk below for explanations on each function argument. If you want to know about the defaults for any argument in &lt;code&gt;download_ERA()&lt;/code&gt; simply run &lt;code&gt;?download_ERA()&lt;/code&gt;. Doing so should make it obvious why we specify the function as we do below.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    Notice that the downloading of ERA-family reanalysis data may take a short while to start as the download request gets queued with the CDS of the ECMWF before it is executed.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file if download takes too long:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/FirstDL.nc&#34;&gt;FirstDL.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;FirstDL &amp;lt;- download_ERA(
    Variable = &amp;quot;2m_temperature&amp;quot;, # the variable we want to obtain data for
    DataSet = &amp;quot;era5-land&amp;quot;, # the data set we want to obtain data from
    DateStart = &amp;quot;1995-01-01&amp;quot;, # the starting date of our time-window
    DateStop = &amp;quot;1995-01-31&amp;quot;, # the final date of our time-window
    Extent = Extent_ext, # the spatial preference we are after
    Dir = Dir.Data, # where to store the downloaded data
    FileName = &amp;quot;FirstDL&amp;quot;, # a name for our downloaded file
    API_User = API_User, # your API User Number
    API_Key = API_Key # your API User Key
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## download_ERA() is starting. Depending on your specifications, this can take a significant time.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## User 39340 for cds service added successfully in keychain
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Staging 1 download(s).
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0001_FirstDL.nc download queried
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Requesting data to the cds service with username 39340
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - staging data transfer at url endpoint or request id:
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   e48f036d-0979-4db4-bc4e-9d08be01c9d6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - timeout set to 10.0 hours
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - polling server for a data transfer
\ polling server for a data transfer
| polling server for a data transfer
/ polling server for a data transfer
- polling server for a data transfer
\ polling server for a data transfer
| polling server for a data transfer
/ polling server for a data transfer
- polling server for a data transfer
\ polling server for a data transfer
| polling server for a data transfer
/ polling server for a data transfer
- polling server for a data transfer
\ polling server for a data transfer
| polling server for a data transfer
/ polling server for a data transfer
- polling server for a data transfer
\ polling server for a data transfer
| polling server for a data transfer
/ polling server for a data transfer
- polling server for a data transfer
\ polling server for a data transfer
| polling server for a data transfer
/ polling server for a data transfer
- polling server for a data transfer
## Downloading file
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
  |                                                                                      
  |                                                                                |   0%
  |                                                                                      
  |================================================================================| 100%
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - moved temporary file to -&amp;gt; /Users/erikkus/Documents/HomePage/content/courses/krigr/Data/0001_FirstDL.nc
## - Delete data from queue for url endpoint or request id:
##   https://cds.climate.copernicus.eu/api/v2/tasks/e48f036d-0979-4db4-bc4e-9d08be01c9d6
## 
## Checking for known data issues.
## Loading downloaded data for masking and aggregation.
## Aggregating to temporal resolution of choice
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see the &lt;code&gt;download_ERA()&lt;/code&gt; function updates you on what it is currently working on at each major step. I implemented this to make sure people don&amp;rsquo;t get too anxious staring at an empty console in &lt;code&gt;R&lt;/code&gt;. If this feature is not appealing to you, you can turn this progress tracking off by setting &lt;code&gt;verbose = FALSE&lt;/code&gt; in the function call to &lt;code&gt;download_ERA()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    For the rest of this workshop, I suppress messages from &lt;code&gt;download_ERA()&lt;/code&gt; via other means so that when you execute, you get progress tracking.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I will make exceptions to this rule when there are special things I want to demonstrate.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s look at the raster that was produced:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;FirstDL
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class      : RasterStack 
## dimensions : 34, 54, 1836, 1  (nrow, ncol, ncell, nlayers)
## resolution : 0.09999999, 0.09999998  (x, y)
## extent     : 9.72, 15.12, 49.74, 53.14  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## names      : X1995.01.01
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One layer (i.e., one month) worth of data. That seems to have worked. If you are keen-eyed, you will notice that the extent on this object does not align with the extent we supplied with &lt;code&gt;Extent_ext&lt;/code&gt;. The reason? To download the data, we need to snap to the nearest full cell in the data set from which we query our downloads. &lt;code&gt;KrigR&lt;/code&gt; always ends up widening the extent to ensure all the data you desire will be downloaded.&lt;/p&gt;
&lt;p&gt;Finally, let&amp;rsquo;s visualise our downloaded data with one of our 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/prep/#visualising-our-study-setting&#34;&gt;user-defined plotting functions&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Raw(FirstDL, Dates = &amp;quot;01-1995&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-downloads_files/figure-html/FirstDLVis-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That is all there is to downloading ERA5(-Land) data with &lt;code&gt;KrigR&lt;/code&gt;. You can already see how, even at the relatively course resolution of ERA5-Land, the mountain ridges along the German-Czech border are showing up. This will become a lot clearer of a pattern once we 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/kriging/&#34;&gt;downscale our data&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;download_ERA()&lt;/code&gt; provides you with a lot more functionality than &lt;em&gt;just&lt;/em&gt; access to the ERA5(-Land) data sets.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;With &lt;code&gt;download_ERA()&lt;/code&gt;, you can also carry out processing of the downloaded data. Data processing with &lt;code&gt;download_ERA()&lt;/code&gt; includes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Spatial Limitation&lt;/em&gt; to cut down on the data that is stored on your end.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Temporal Aggregation&lt;/em&gt; to establish data at the temporal resolution you desire.&lt;/li&gt;
&lt;/ol&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;spatial-limitation&#34;&gt;Spatial Limitation&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with spatial limitation. As discussed 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/prep/#spatial-preferences-in-krigr&#34;&gt;previously&lt;/a&gt;, &lt;code&gt;download_ERA()&lt;/code&gt; can handle a variety of inputs describing spatial preferences.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;code&gt;KrigR&lt;/code&gt; is capable of learning about your spatial preferences in three ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;As an &lt;code&gt;extent&lt;/code&gt; input (a rectangular box).&lt;/li&gt;
&lt;li&gt;As a &lt;code&gt;SpatialPolygons&lt;/code&gt; input (a polygon or set of polygons).&lt;/li&gt;
&lt;li&gt;As a set of locations stored in a &lt;code&gt;data.frame&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These spatial preferences are registered in &lt;code&gt;KrigR&lt;/code&gt; functions using the &lt;code&gt;Extent&lt;/code&gt; argument.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You might now ask yourself: How does &lt;code&gt;KrigR&lt;/code&gt; achieve spatial limitation of the data? Couldn&amp;rsquo;t we just simply download only the data we are interested in?&lt;/p&gt;
&lt;p&gt;The ECMWF CDS gives us tremendous capability of retrieving only the data we want. However, the CDS only recognises rectangular boxes (i.e., &lt;code&gt;extent&lt;/code&gt;s) for spatial limitation. Consequently, we always have to download data corresponding to a rectangular box in space. When informing &lt;code&gt;KrigR&lt;/code&gt; of your spatial preferences using a &lt;code&gt;data.frame&lt;/code&gt; or &lt;code&gt;SpatialPolygons&lt;/code&gt;, &lt;code&gt;download_ERA()&lt;/code&gt; automatically (1) identifies the smallest &lt;code&gt;extent&lt;/code&gt; required by your input, (2) downloads data corresponding to this &lt;code&gt;extent&lt;/code&gt;, and (3) masks our any data not queried by you.&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Using &lt;code&gt;KrigR&lt;/code&gt;&amp;rsquo;s spatial limitation features ensures faster computation and smaller file sizes (depending on file type).
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the following, I demonstrate how to use the &lt;code&gt;Extent&lt;/code&gt; argument in &lt;code&gt;download_ERA()&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;shape-spatialpolygons&#34;&gt;Shape (&lt;code&gt;SpatialPolygons&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;Let me show you how &lt;code&gt;SpatialPolygons&lt;/code&gt; show up in our data with &lt;code&gt;download_ERA()&lt;/code&gt;. Remember that these &lt;code&gt;SpatialPolygons&lt;/code&gt; originate 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/prep/#shape-of-interest-spatialpolygons&#34;&gt;here&lt;/a&gt;. First, we query our download as follows:&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file if download takes too long:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/SpatialPolygons_DL.nc&#34;&gt;SpatialPolygons_DL.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;SpatialPolygons_DL &amp;lt;- download_ERA(
  Variable = &amp;quot;2m_temperature&amp;quot;,
  DataSet = &amp;quot;era5-land&amp;quot;,
  DateStart = &amp;quot;1995-01-01&amp;quot;,
  DateStop = &amp;quot;1995-01-31&amp;quot;,
  Extent = Shape_shp, # we simply switch the Extent Argument
  Dir = Dir.Data,
  FileName = &amp;quot;SpatialPolygons_DL&amp;quot;,
  API_User = API_User,
  API_Key = API_Key
)  
Plot_Raw(SpatialPolygons_DL, Dates = &amp;quot;01-1995&amp;quot;, Shp = Shape_shp)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-downloads_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You will find that the data retained with the spatial limitation in &lt;code&gt;download_ERA()&lt;/code&gt; contains all raster cells of which even a fraction falls within the bounds of the &lt;code&gt;SpatialPolygons&lt;/code&gt; you supplied. This is different from standard &lt;code&gt;raster&lt;/code&gt; masking through which only cells whose centroids fall within the &lt;code&gt;SpatialPolygons&lt;/code&gt; are retained.&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;raster&lt;/code&gt; masking in &lt;code&gt;KrigR&lt;/code&gt; always ensures that the entire area of your spatial preferences are retained.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;points-dataframe&#34;&gt;Points (&lt;code&gt;data.frame&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;Now we move on to point-locations. Often times, we are researching very specific sets of coordinates, rather than entire regions. &lt;code&gt;download_ERA()&lt;/code&gt; is capable of limiting data to only small areas (of a size of your choosing) around your point-locations. For our purposes here, we make use of a set of mountain-top coordinates throughout our study region. Remember that these coordinates (stored in a &lt;code&gt;data.frame&lt;/code&gt;) originate 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/prep/#points-of-interest-dataframe&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This time around, we need to tell &lt;code&gt;download_ERA()&lt;/code&gt; about not just the &lt;code&gt;Extent&lt;/code&gt;, but also specify how much of a buffer (&lt;code&gt;Buffer&lt;/code&gt; in $Â°$) to retain data for around each individual (&lt;code&gt;ID&lt;/code&gt;) location.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;The &lt;code&gt;data.frame&lt;/code&gt; input to the &lt;code&gt;Extent&lt;/code&gt; must contain a column called &lt;code&gt;Lat&lt;/code&gt; and a column called &lt;code&gt;Lon&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;In addition, one must also specify:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;Buffer&lt;/code&gt; in $Â°$ to be drawn around each location.&lt;/li&gt;
&lt;li&gt;The name of the &lt;code&gt;ID&lt;/code&gt; column in your &lt;code&gt;data.frame&lt;/code&gt; which indexes each individual location.&lt;/li&gt;
&lt;/ol&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    Our &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/outlook/&#34;&gt;development goals&lt;/a&gt; include support for a broader range of point-location specifications.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s stage such a download:&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file if download takes too long:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/points_DL.nc&#34;&gt;points_DL.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;points_DL &amp;lt;- download_ERA(
  Variable = &amp;quot;2m_temperature&amp;quot;,
  DataSet = &amp;quot;era5-land&amp;quot;,
  DateStart = &amp;quot;1995-01-01&amp;quot;,
  DateStop = &amp;quot;1995-01-31&amp;quot;,
  Extent = Mountains_df, # our data.frame with Lat and Lon columns
  Buffer = 0.5, # a half-degree buffer
  ID = &amp;quot;Mountain&amp;quot;, # the ID column in our data.frame
  Dir = Dir.Data,
  FileName = &amp;quot;points_DL&amp;quot;,
  API_User = API_User,
  API_Key = API_Key
)
Plot_Raw(points_DL, Dates = &amp;quot;01-1995&amp;quot;) + 
  geom_point(aes(x = Lon, y = Lat), data = Mountains_df, 
             colour = &amp;quot;green&amp;quot;, size = 10, pch = 14)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-downloads_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Above you can see how the mountain tops we are interested in lie exactly at the centre of the retained data. As we will see later, such spatial limitation greatly reduces computation cost of statistical downscaling procedures.&lt;/p&gt;
&lt;h2 id=&#34;temporal-aggregation&#34;&gt;Temporal Aggregation&lt;/h2&gt;
&lt;p&gt;So far, we have downloaded a single layer of data (i.e., one monthly average layer) from the CDS. However, ERA5(-Land) products come at &lt;strong&gt;hourly temporal resolutions&lt;/strong&gt; from which we can generate climate data at almost any temporal resolution we may require. This is what &lt;strong&gt;temporal aggregation&lt;/strong&gt; in &lt;code&gt;download_ERA()&lt;/code&gt; is for.&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    With &lt;strong&gt;temporal aggregation&lt;/strong&gt; in &lt;code&gt;download_ERA()&lt;/code&gt; you can achieve almost any temporal resolution and aggregate metric you may desire.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Temporal aggregation with &lt;code&gt;download_ERA()&lt;/code&gt; uses the arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TResolution&lt;/code&gt; and &lt;code&gt;TStep&lt;/code&gt; to achieve desired temporal resolutions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FUN&lt;/code&gt; to calculate desired aggregate metrics&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;temporal-resolution-tresolution-and-tstep&#34;&gt;Temporal Resolution (&lt;code&gt;TResolution&lt;/code&gt; and &lt;code&gt;TStep&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start by querying data at non-CDS temporal resolutions.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;The &lt;code&gt;download_ERA()&lt;/code&gt; function in the &lt;code&gt;KrigR&lt;/code&gt; package accepts the following arguments which you can use to control the temporal resolution of your climate data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TResolution&lt;/code&gt; controls the time-line that &lt;code&gt;TStep&lt;/code&gt; indexes. You can specify anything from the following:  &lt;code&gt;&#39;hour&#39;&lt;/code&gt;, &lt;code&gt;&#39;day&#39;&lt;/code&gt;, &lt;code&gt;&#39;month&#39;&lt;/code&gt;, or &lt;code&gt;&#39;year&#39;&lt;/code&gt;. The default is &lt;code&gt;&#39;month&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TStep&lt;/code&gt; controls how many time-steps to aggregate into one layer of data each. Aggregation is done via taking the mean per cell in each raster comprising time steps that go into the final, aggregated time-step. The default is &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For now, let&amp;rsquo;s download hourly data from the CDS (this achieved by specifying a &lt;code&gt;TResolution&lt;/code&gt; of &lt;code&gt;&amp;quot;hour&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;day&amp;quot;&lt;/code&gt;) and aggregate these to 1-day intervals. To make the result easier to visualise, we focus only on the first four days of January 1995:&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file if download takes too long:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/TimeSeries.nc&#34;&gt;TimeSeries.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;TimeSeries &amp;lt;- download_ERA(
  Variable = &amp;quot;2m_temperature&amp;quot;,
  DataSet = &amp;quot;era5-land&amp;quot;,
  DateStart = &amp;quot;1995-01-01&amp;quot;,
  DateStop = &amp;quot;1995-01-04&amp;quot;,
  TResolution = &amp;quot;day&amp;quot;, # aggregate to days
  TStep = 1, # aggregate to 1 day each
  Extent = Shape_shp,
  Dir = Dir.Data,
  FileName = &amp;quot;TimeSeries&amp;quot;,
  API_User = API_User,
  API_Key = API_Key
)
Plot_Raw(TimeSeries, Dates = c(&amp;quot;01-1995&amp;quot;, &amp;quot;02-1995&amp;quot;, 
                               &amp;quot;03-1995&amp;quot;, &amp;quot;04-1995&amp;quot;),
         Shp = Shape_shp)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-downloads_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;1440&#34; /&gt;
Looks like a cold front rolled over my home area at the beginning of 1995.&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;KrigR&lt;/code&gt; automatically identifies which data set to download from given your temporal aggregation specification.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As soon as &lt;code&gt;TResolution&lt;/code&gt; is set to &lt;code&gt;&#39;month&#39;&lt;/code&gt; or &lt;code&gt;&#39;year&#39;&lt;/code&gt;, the package automatically downloads monthly mean data from the CDS. We do this to make the temporal aggregation calculation more light-weight on your computing units and to make downloads less heavy.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s run through a few examples to make clear how desired temporal resolution of data can be achieved using the &lt;code&gt;KrigR&lt;/code&gt; package:&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;What We Want&lt;/th&gt;
    &lt;th&gt;TResolution &lt;/th&gt;
    &lt;th&gt;TStep&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hourly intervals&lt;/td&gt;
    &lt;td&gt;hour&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;6-hour intervals&lt;/td&gt;
    &lt;td&gt;hour&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Half-day intervals&lt;/td&gt;
    &lt;td&gt;hour&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Daily intervals &lt;/td&gt;
    &lt;td&gt;day&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3-day intervals&lt;/td&gt;
    &lt;td&gt;day&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Weekly intervals&lt;/td&gt;
    &lt;td&gt;day&lt;/td&gt;
    &lt;td&gt;7&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Monthly aggregates&lt;/td&gt;
    &lt;td&gt;month&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;4-month intervals&lt;/td&gt;
    &lt;td&gt;month&lt;/td&gt;
    &lt;td&gt;4&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Annual intervals&lt;/td&gt;
    &lt;td&gt;year&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;10-year intervals&lt;/td&gt;
    &lt;td&gt;year&lt;/td&gt;
    &lt;td&gt;10&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt; 
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Specifying &lt;code&gt;TResolution&lt;/code&gt; of &lt;code&gt;&#39;month&#39;&lt;/code&gt; will result in the download of full month aggregates for every month included in your time series.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For example, &lt;code&gt;DateStart = &amp;quot;2000-01-20&amp;quot;&lt;/code&gt;, &lt;code&gt;DateStop = &amp;quot;2000-02-20&amp;quot;&lt;/code&gt; with &lt;code&gt;TResolution = &#39;month&#39;&lt;/code&gt;, and &lt;code&gt;TStep = 1&lt;/code&gt; &lt;strong&gt;does not&lt;/strong&gt; result in the mean aggregate for the month between the 20/01/200 and the 20/02/2000, but &lt;strong&gt;does result&lt;/strong&gt; in the monthly aggregates for January and February 2000. If you desire the former, you would need to specify &lt;code&gt;DateStart = &amp;quot;2000-01-20&amp;quot;&lt;/code&gt;, &lt;code&gt;DateStop = &amp;quot;2000-02-20&amp;quot;&lt;/code&gt; with &lt;code&gt;TResolution = &#39;day&#39;&lt;/code&gt;, and &lt;code&gt;TStep = 32&lt;/code&gt; (the number of days between the two dates).&lt;/p&gt;
&lt;h3 id=&#34;aggregate-metrics-fun&#34;&gt;Aggregate Metrics (&lt;code&gt;FUN&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;Aggregate metrics can be particularly useful for certain study settings when climate variability or exposure to extreme events are sought after.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;The &lt;code&gt;FUN&lt;/code&gt; argument in &lt;code&gt;download_ERA()&lt;/code&gt; controls which values to calculate for the temporal aggregates, e.g.: &lt;code&gt;&#39;min&#39;&lt;/code&gt;, &lt;code&gt;&#39;max&#39;&lt;/code&gt;, or &lt;code&gt;&#39;mean&#39;&lt;/code&gt; (default).&lt;/p&gt;
&lt;p&gt;Any function which returns a single value when fed a vector of values is supported.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s say we are interested in the variability of temperature across our study region in daily intervals. Again, we shorten our time-series to just four days:&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file if download takes too long:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/TimeSeriesSD.nc&#34;&gt;TimeSeriesSD.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;TimeSeriesSD &amp;lt;- download_ERA(
  Variable = &amp;quot;2m_temperature&amp;quot;,
  DataSet = &amp;quot;era5-land&amp;quot;,
  DateStart = &amp;quot;1995-01-01&amp;quot;,
  DateStop = &amp;quot;1995-01-04&amp;quot;,
  TResolution = &amp;quot;day&amp;quot;,
  TStep = 1,
  FUN = sd, # query standard deviation
  Extent = Shape_shp,
  Dir = Dir.Data,
  FileName = &amp;quot;TimeSeriesSD&amp;quot;,
  API_User = API_User,
  API_Key = API_Key
)
Plot_Raw(TimeSeriesSD, Dates = c(&amp;quot;01-1995&amp;quot;, &amp;quot;02-1995&amp;quot;, 
                                 &amp;quot;03-1995&amp;quot;, &amp;quot;04-1995&amp;quot;),
         Shp = Shape_shp)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-downloads_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;1440&#34; /&gt;
Seems like the temperatures fluctuated most on the third and fourth of January, but the area of temperature fluctuations changed location between those two days.&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    You should now be able to query data for any location you study and achieve temporal resolutions and aggregate metrics which your study requires.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;dynamical-data-uncertainty&#34;&gt;Dynamical Data Uncertainty&lt;/h2&gt;
&lt;p&gt;With climate reanalyses, you also gain access to uncertainty flags of the data stored in the reanalysis product. For the ERA5-family of products, this uncertainty can be obtained by assessing the standard deviation of the 10 ensemble members which make up the underlying ERA5 model exercise.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;download_ERA()&lt;/code&gt; you can obtain this information as follows:&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file if download takes too long:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/SpatialPolygons_DL.nc&#34;&gt;SpatialPolygonsEns_DL.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;SpatialPolygonsEns_DL &amp;lt;- download_ERA(
    Variable = &amp;quot;2m_temperature&amp;quot;,
    DataSet = &amp;quot;era5&amp;quot;,
    Type = &amp;quot;ensemble_members&amp;quot;,
    DateStart = &amp;quot;1995-01-01&amp;quot;,
    DateStop = &amp;quot;1995-01-02&amp;quot;,
    TResolution = &amp;quot;day&amp;quot;,
    TStep = 1,
    FUN = sd,
    Extent = Shape_shp,
    Dir = Dir.Data,
    FileName = &amp;quot;SpatialPolygonsEns_DL&amp;quot;,
    API_User = API_User,
    API_Key = API_Key
  )
Plot_Raw(SpatialPolygonsEns, Dates = c(&amp;quot;01-1995&amp;quot;, &amp;quot;02-1995&amp;quot;),
         Shp = Shape_shp, COL = rev(viridis(100)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-downloads_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see here, there is substantial disagreement between the ensemble members of daily average temperatures across our study region. This uncertainty among ensemble members is greatest at high temporal resolution and becomes negligible at coarse temporal resolution. We document this phenomenon in 
&lt;a href=&#34;https://iopscience.iop.org/article/10.1088/1748-9326/ac39bf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this publication (Figure 1)&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;final-downloads-for-workshop-progress&#34;&gt;Final Downloads for Workshop Progress&lt;/h2&gt;
&lt;p&gt;Now that we know how to use spatial limitation and temporal aggregation with &lt;code&gt;download_ERA()&lt;/code&gt; it is time to generate the data products we will use for the rest of this workshop material.&lt;/p&gt;
&lt;h3 id=&#34;climate-data&#34;&gt;Climate Data&lt;/h3&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    To streamline this workshop material, I will focus on just three short-time series of data with different spatial limitations. I visualise them all side-by-side further down.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;&lt;summary&gt; Click here for download calls &lt;/summary&gt;
&lt;h4 id=&#34;extent-data&#34;&gt;&lt;code&gt;extent&lt;/code&gt; Data&lt;/h4&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file if download takes too long:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/ExtentRaw.nc&#34;&gt;ExtentRaw.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Extent_Raw &amp;lt;- download_ERA(
  Variable = &amp;quot;2m_temperature&amp;quot;,
  DataSet = &amp;quot;era5-land&amp;quot;,
  DateStart = &amp;quot;1995-01-01&amp;quot;,
  DateStop = &amp;quot;1995-01-04&amp;quot;,
  TResolution = &amp;quot;day&amp;quot;,
  TStep = 1,
  Extent = Extent_ext,
  Dir = Dir.Data,
  FileName = &amp;quot;ExtentRaw&amp;quot;,
  API_User = API_User,
  API_Key = API_Key
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;spatialpolygons-data&#34;&gt;&lt;code&gt;SpatialPolygons&lt;/code&gt; Data&lt;/h4&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file if download takes too long:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/SpatialPolygonsRaw.nc&#34;&gt;SpatialPolygonsRaw.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;SpatialPolygonsRaw &amp;lt;- download_ERA(
  Variable = &amp;quot;2m_temperature&amp;quot;,
  DataSet = &amp;quot;era5-land&amp;quot;,
  DateStart = &amp;quot;1995-01-01&amp;quot;,
  DateStop = &amp;quot;1995-01-04&amp;quot;,
  TResolution = &amp;quot;day&amp;quot;,
  TStep = 1,
  Extent = Shape_shp,
  Dir = Dir.Data,
  FileName = &amp;quot;SpatialPolygonsRaw&amp;quot;,
  API_User = API_User,
  API_Key = API_Key
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;pointdataframe-data&#34;&gt;Point(&lt;code&gt;data.frame&lt;/code&gt;) Data&lt;/h4&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file if download takes too long:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/PointsRaw.nc&#34;&gt;PointsRaw.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Points_Raw &amp;lt;- download_ERA(
  Variable = &amp;quot;2m_temperature&amp;quot;,
  DataSet = &amp;quot;era5-land&amp;quot;,
  DateStart = &amp;quot;1995-01-01&amp;quot;,
  DateStop = &amp;quot;1995-01-4&amp;quot;,
  TResolution = &amp;quot;day&amp;quot;,
  TStep = 1,
  Extent = Mountains_df,
  Buffer = 0.5,
  ID = &amp;quot;Mountain&amp;quot;,
  Dir = Dir.Data,
  FileName = &amp;quot;PointsRaw&amp;quot;,
  API_User = API_User,
  API_Key = API_Key
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;Now let&amp;rsquo;s visualise these data for a better understanding of what they contain:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Extent_gg &amp;lt;- Plot_Raw(Extent_Raw[[1]], Dates = &amp;quot;Extent&amp;quot;)
SP_gg &amp;lt;- Plot_Raw(SpatialPolygonsRaw[[1]], Dates = &amp;quot;SpatialPolygons&amp;quot;)
Points_gg &amp;lt;- Plot_Raw(Points_Raw[[1]], Dates = &amp;quot;SpatialPolygons&amp;quot;)
plot_grid(Extent_gg, SP_gg, Points_gg, ncol = 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-downloads_files/figure-html/dataviz-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;dynamical-data-uncertainty-1&#34;&gt;Dynamical Data Uncertainty&lt;/h3&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    For an aggregate understanding of data uncertainty, we also obtain dynamical uncertainty for our target region and time frame. For simplicity, we do so only for the &lt;code&gt;SpatialPolygons&lt;/code&gt; specification.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;&lt;summary&gt; Click here for download call &lt;/summary&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file if download takes too long:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/SpatialPolygonsEns.nc&#34;&gt;SpatialPolygonsEns.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;SpatialPolygonsEns &amp;lt;- download_ERA(
    Variable = &amp;quot;2m_temperature&amp;quot;,
    DataSet = &amp;quot;era5&amp;quot;,
    Type = &amp;quot;ensemble_members&amp;quot;,
    DateStart = &amp;quot;1995-01-01&amp;quot;,
    DateStop = &amp;quot;1995-01-04&amp;quot;,
    TResolution = &amp;quot;day&amp;quot;,
    TStep = 1,
    FUN = sd,
    Extent = Shape_shp,
    Dir = Dir.Data,
    FileName = &amp;quot;SpatialPolygonsEns&amp;quot;,
    API_User = API_User,
    API_Key = API_Key
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Raw(SpatialPolygonsEns, Dates = c(&amp;quot;01-1995&amp;quot;, &amp;quot;02-1995&amp;quot;, 
                                          &amp;quot;03-1995&amp;quot;, &amp;quot;04-1995&amp;quot;),
         Shp = Shape_shp, COL = rev(viridis(100)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-downloads_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We will see how these uncertainties stack up against other sources of uncertainty when we arrive at 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/kriging/#aggregate-uncertainty&#34;&gt;aggregate uncertainty&lt;/a&gt; of our final product.&lt;/p&gt;
&lt;h2 id=&#34;considerations-for-download_era&#34;&gt;Considerations for &lt;code&gt;download_ERA()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;download_ERA()&lt;/code&gt; is a complex function with many things happening under the hood. To make sure you have the best experience with this interface to the ERA5(-Land) products through &lt;code&gt;R&lt;/code&gt;, I have compiled a few bits of &lt;em&gt;good-to-know&lt;/em&gt; information about the workings of &lt;code&gt;download_ERA()&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;effeciency&#34;&gt;Effeciency&lt;/h3&gt;
&lt;p&gt;Download speeds with &lt;code&gt;download_ERA()&lt;/code&gt; are largely tied to CDS queue time, but there are some things worth considering when querying downloads of time-series data.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    The &lt;code&gt;download_ERA()&lt;/code&gt; function automatically breaks down download requests into monthly intervals thus circumventing the danger of running into making a download request that is too big for the CDS.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For example, &lt;code&gt;DateStart = &amp;quot;2000-01-20&amp;quot;&lt;/code&gt;, &lt;code&gt;DateStop = &amp;quot;2000-02-20&amp;quot;&lt;/code&gt; with &lt;code&gt;TResolution = &#39;day&#39;&lt;/code&gt;, and &lt;code&gt;TStep = 8&lt;/code&gt; will lead to two download requests to the CDS: (1) hourly data in the range 20/01/2000 00:00 to 31/01/2000 23:00, and (2) hourly data in the range 01/02/2000 00:00 to 20/02/2000 23:00. These data sets are subsequently fused in &lt;code&gt;R&lt;/code&gt;, aggregated to daily aggregates, and finally, aggregated to four big aggregates.&lt;br&gt;
This gives you a lot of flexibility, but always keep in mind that third-party data sets might not account for leap-years so make sure the dates of third-party data (should you chose to use some) lines up with the ones as specified by your calls to the functions of the &lt;code&gt;KrigR&lt;/code&gt; package.&lt;/p&gt;
&lt;h4 id=&#34;singulardl&#34;&gt;&lt;code&gt;SingularDL&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;ECMWF CDS downloads come with a hard limit of 100,000 layers worth of data. This corresponds to more than 1 month worth of data. As a matter of fact, even ar hourly time-scales, you could theoretically download ~11 years worth of data without hitting this limit. In this particular case, &lt;code&gt;download_ERA()&lt;/code&gt; stages, by default, 132 individual downloads (1 per month) when the CDS would be just fine accepting the download request for all the data in one download call.&lt;/p&gt;
&lt;p&gt;Is there any way to bypass the monthly downloads in &lt;code&gt;download_ERA()&lt;/code&gt;? Yes, there is. With the &lt;code&gt;SingularDL&lt;/code&gt; argument.&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Setting &lt;code&gt;SingularDL = TRUE&lt;/code&gt; in &lt;code&gt;download_ERA()&lt;/code&gt; bypasses the automatic month-wise download staging. A pre-staging check breaks the operation if you query more than the CDS hard limit on data.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    Our &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/outlook/&#34;&gt;development goals&lt;/a&gt; include changing month-wise default downloads to downloads of 100,000 layers at a time.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;cores&#34;&gt;&lt;code&gt;Cores&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Continuing on from the previous point, let&amp;rsquo;s consider you want to obtain more than 100,000 layers worth of data for your analysis and thus can&amp;rsquo;t make use of the &lt;code&gt;SingularDL&lt;/code&gt; argument. 
By default &lt;code&gt;download_ERA()&lt;/code&gt; stages downloads sequentially. Most modern PCs come with multiple cores each of which could theoretically stage it&amp;rsquo;s own download in parallel. Couldn&amp;rsquo;t we make use of this for more efficient download staging? Yes, we can with the &lt;code&gt;Cores&lt;/code&gt; argument.&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Using the &lt;code&gt;Cores&lt;/code&gt; argument in &lt;code&gt;download_ERA()&lt;/code&gt; you can specify how many downloads to stage in parallel rather than sequentially.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;disk-space&#34;&gt;Disk Space&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;KrigR&lt;/code&gt; uses NETCDF (.nc) files as they represent the standard in climate science. NETCDF file size is not connected to data content in the raster but number of cells. Other formats, such as GeoTiff (.tif) do however scale in file size with non-NA cell number in the saved rasters.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    Our &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/outlook/&#34;&gt;development goals&lt;/a&gt; include giving the user control over the file type as which &lt;code&gt;KrigR&lt;/code&gt;-derived products are saved.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For example, the file size of the above &lt;code&gt;FirstDL&lt;/code&gt; raster is 7kb while the &lt;code&gt;SpatialPolygons&lt;/code&gt; and &lt;code&gt;data.frame&lt;/code&gt; driven data is saved as GeoTiffs of 4kb and 3kb, respectively.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    If you need to optimise storage space, particularly when using &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/download/#spatial-limitation&#34;&gt;spatial limitation&lt;/a&gt; with &lt;code&gt;KrigR&lt;/code&gt;, I can thus recommend re-saving &lt;code&gt;KrigR&lt;/code&gt; outputs as GeoTiffs.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;cummulative-variables-precipfix&#34;&gt;Cummulative Variables (&lt;code&gt;PrecipFix&lt;/code&gt;)&lt;/h3&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    Some variables in the ERA5(-Land) data sets are stored as cumulative records for pre-set time-windows, but temporal aggregation in &lt;code&gt;download-ERA()&lt;/code&gt; cannot handle such data.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Consequently, cumulative records need to be transformed into single-time-step records with respect to their base temporal resolution and cumulative aggregation interval like so:&lt;/p&gt;
&lt;img src=&#34;https://www.erikkusch.com/courses/krigr/PrecipFix.jpg&#34; width=&#34;900&#34;/&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    To make cumulatively stored variables compatible with temporal aggregation in &lt;code&gt;download_ERA()&lt;/code&gt; simple toggle &lt;code&gt;PrecipFix = TRUE&lt;/code&gt; in the function call.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    To identify which variables are stored cumulatively, we recommend searching for variables listed as &amp;ldquo;This variable is accumulated from the beginning of the forecast time to the end of the forecast step.&amp;rdquo; on the data set documentation page (e.g., &lt;a href=&#34;https://cds.climate.copernicus.eu/cdsapp#!/dataset/reanalysis-era5-land?tab=overview&#34;&gt;ERA5-Land&lt;/a&gt;).
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    Our &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/outlook/&#34;&gt;development goals&lt;/a&gt; include an error check for specification of &lt;code&gt;PrecipFix = TRUE&lt;/code&gt; on non-cumulatively stored variables.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;stability&#34;&gt;Stability&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;download_ERA()&lt;/code&gt; requires a stable connection to the ECWMF CDS. Sometimes, however, a connection may drop or the CDS queue is so long that our downloads just fail. To mitigate the annoyance caused by these issues, I have implemented to extra arguments to the &lt;code&gt;download_ERA()&lt;/code&gt; function call:&lt;/p&gt;
&lt;h4 id=&#34;timeout&#34;&gt;&lt;code&gt;TimeOut&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;TimeOut&lt;/code&gt; is a numeric argument which specifies how many seconds to wait for the CDS to return the queried data. The default equates to 10 hours.&lt;/p&gt;
&lt;h4 id=&#34;trydown&#34;&gt;&lt;code&gt;TryDown&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;TryDown&lt;/code&gt; is a numeric argument which specifies how often to retry a download before giving up and moving on or stopping the execution of &lt;code&gt;download_ERA()&lt;/code&gt;. The default is 10.&lt;/p&gt;
&lt;h2 id=&#34;session-info&#34;&gt;Session Info&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.2.3 (2023-03-15)
## Platform: x86_64-apple-darwin17.0 (64-bit)
## Running under: macOS Big Sur ... 10.16
## 
## Matrix products: default
## BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] parallel  stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] mapview_2.11.0          rnaturalearthdata_0.1.0 rnaturalearth_0.3.2    
##  [4] gimms_1.2.1             ggmap_3.0.2             cowplot_1.1.1          
##  [7] viridis_0.6.2           viridisLite_0.4.1       ggplot2_3.4.1          
## [10] tidyr_1.3.0             KrigR_0.1.2             terra_1.7-21           
## [13] httr_1.4.5              stars_0.6-0             abind_1.4-5            
## [16] fasterize_1.0.4         sf_1.0-12               lubridate_1.9.2        
## [19] automap_1.1-9           doSNOW_1.0.20           snow_0.4-4             
## [22] doParallel_1.0.17       iterators_1.0.14        foreach_1.5.2          
## [25] rgdal_1.6-5             raster_3.6-20           sp_1.6-0               
## [28] stringr_1.5.0           keyring_1.3.1           ecmwfr_1.5.0           
## [31] ncdf4_1.21             
## 
## loaded via a namespace (and not attached):
##  [1] leafem_0.2.0             colorspace_2.1-0         class_7.3-21            
##  [4] leaflet_2.1.2            satellite_1.0.4          base64enc_0.1-3         
##  [7] rstudioapi_0.14          proxy_0.4-27             farver_2.1.1            
## [10] fansi_1.0.4              codetools_0.2-19         cachem_1.0.7            
## [13] knitr_1.42               jsonlite_1.8.4           png_0.1-8               
## [16] Kendall_2.2.1            compiler_4.2.3           assertthat_0.2.1        
## [19] fastmap_1.1.1            cli_3.6.0                htmltools_0.5.4         
## [22] tools_4.2.3              gtable_0.3.1             glue_1.6.2              
## [25] dplyr_1.1.0              Rcpp_1.0.10              jquerylib_0.1.4         
## [28] vctrs_0.6.1              blogdown_1.16            crosstalk_1.2.0         
## [31] lwgeom_0.2-11            xfun_0.37                timechange_0.2.0        
## [34] lifecycle_1.0.3          rnaturalearthhires_0.2.1 zoo_1.8-11              
## [37] scales_1.2.1             gstat_2.1-0              yaml_2.3.7              
## [40] curl_5.0.0               memoise_2.0.1            gridExtra_2.3           
## [43] sass_0.4.5               reshape_0.8.9            stringi_1.7.12          
## [46] highr_0.10               e1071_1.7-13             boot_1.3-28.1           
## [49] intervals_0.15.3         RgoogleMaps_1.4.5.3      rlang_1.1.0             
## [52] pkgconfig_2.0.3          bitops_1.0-7             evaluate_0.20           
## [55] lattice_0.20-45          purrr_1.0.1              htmlwidgets_1.6.1       
## [58] labeling_0.4.2           tidyselect_1.2.0         plyr_1.8.8              
## [61] magrittr_2.0.3           bookdown_0.33            R6_2.5.1                
## [64] generics_0.1.3           DBI_1.1.3                pillar_1.8.1            
## [67] withr_2.5.0              units_0.8-1              xts_0.13.0              
## [70] tibble_3.2.1             spacetime_1.2-8          KernSmooth_2.23-20      
## [73] utf8_1.2.3               rmarkdown_2.20           jpeg_0.1-10             
## [76] grid_4.2.3               zyp_0.11-1               FNN_1.1.3.2             
## [79] digest_0.6.31            classInt_0.4-9           webshot_0.5.4           
## [82] stats4_4.2.3             munsell_0.5.0            bslib_0.4.2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Statistical Downscaling</title>
      <link>https://www.erikkusch.com/courses/krigr/kriging/</link>
      <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/krigr/kriging/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;&lt;code&gt;KrigR&lt;/code&gt; is currently undergoing development. As a result, this part of the workshop has become deprecated. Please refer to the &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/setup/&#34;&gt;setup&lt;/a&gt; &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/quickstart/&#34;&gt;quick guide&lt;/a&gt; portions of this material as these are up-to-date. &lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    This part of the workshop is dependant on set-up and preparation done previously &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/prep/&#34;&gt;here&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First, we load &lt;code&gt;KrigR&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(KrigR)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Statistical downscaling with &lt;code&gt;KrigR&lt;/code&gt; is handled via the &lt;code&gt;krigR()&lt;/code&gt; function and requires a set of spatial covariates.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    For an introduction to the statistical downscaling process, I will first walk you through the &lt;code&gt;SpatialPolygons&lt;/code&gt; spatial preference.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First, we load the data we wish to statistically downscale. We established these data 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/download//#climate-data&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;SpatialPolygonsRaw &amp;lt;- stack(file.path(Dir.Data, &amp;quot;SpatialPolygonsRaw.nc&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are now ready to begin our journey to high-spatial resolution data products!&lt;/p&gt;
&lt;h2 id=&#34;covariates&#34;&gt;Covariates&lt;/h2&gt;
&lt;p&gt;First, we use the &lt;code&gt;download_DEM()&lt;/code&gt; function which comes with &lt;code&gt;KrigR&lt;/code&gt; to obtain elevation data as our covariate of choice. This produces two rasters:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A raster of &lt;strong&gt;training&lt;/strong&gt; resolution which matches the input data in all attributes except for the data in each cell.&lt;/li&gt;
&lt;li&gt;A raster of &lt;strong&gt;target&lt;/strong&gt; resolution which matches the input data as closely as possible in all attributes except for the resolution (which is specified by the user).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of these products are bundled into a &lt;code&gt;list&lt;/code&gt; where the first element corresponds to the &lt;em&gt;training&lt;/em&gt; resolution and the second element contains the &lt;em&gt;target&lt;/em&gt; resolution covariate data. Here, we specify a target resolution of &lt;code&gt;.02&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is how we specify &lt;code&gt;download_DEM()&lt;/code&gt; to prepare DEM covariates for us:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Covs_ls &amp;lt;- download_DEM(Train_ras = SpatialPolygonsRaw, # the data we want to downscale
                        Target_res = .02, # the resolution we want to downscale to
                        Shape = Shape_shp, # extra spatial preferences
                        Dir = Dir.Covariates # where to store the covariate files
                        )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For now, let&amp;rsquo;s simply inspect our list of covariate rasters:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Covs_ls
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## class      : RasterLayer 
## dimensions : 34, 54, 1836  (nrow, ncol, ncell)
## resolution : 0.1000189, 0.09999998  (x, y)
## extent     : 9.726991, 15.12801, 49.75, 53.15  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## source     : memory
## names      : DEM 
## values     : 20.11554, 861.7248  (min, max)
## 
## 
## [[2]]
## class      : RasterLayer 
## dimensions : 204, 324, 66096  (nrow, ncol, ncell)
## resolution : 0.01666667, 0.01666667  (x, y)
## extent     : 9.72486, 15.12486, 49.74986, 53.14986  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## source     : memory
## names      : DEM 
## values     : 15.75, 1128  (min, max)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will find that the target resolution covariate data comes at a resolution of 0.017 instead of the 0.02 resolution we specified. This happens because &lt;code&gt;download_DEM()&lt;/code&gt; calls upon the &lt;code&gt;raster::aggregate()&lt;/code&gt; function when aggregating the high-resolution covariate data to your desired target resolution and is thus only capable of creating target-resolution covariates in multiples of the base resolution of the GMTED 2010 DEM we are using as our default covariate. This happens only when the &lt;code&gt;Target_res&lt;/code&gt; argument is specified to be a number.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Specifying the &lt;code&gt;Target_res&lt;/code&gt; argument as a number will lead to best approximation of the desired resolution due to usage of the &lt;code&gt;raster::aggregate()&lt;/code&gt; within &lt;code&gt;download_DEM()&lt;/code&gt;. If you need an exact resolution to match pre-existing data, please refer to &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/third-party/#matching-third-party-data&#34;&gt;this part of the workshop&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice that despite the covariate rasters (and input rasters, for that matter) containing 1836 and 6.6096\times 10^{4} for training and target resolution respectively, we only obtain data for 826 and 26247 cells respectively due to our specification of &lt;code&gt;SpatialPolygons&lt;/code&gt;. This will come in handy when doing the statistical interpolation (see 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/kriging/#spatial-limitation&#34;&gt;this section&lt;/a&gt; for details).&lt;/p&gt;
&lt;p&gt;Before moving on, let&amp;rsquo;s visualise the covariate data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Covs(Covs_ls, Shape_shp)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-downscaling_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Notice just how much more clearly the mountainous areas in our study region show up at our target resolution.&lt;/p&gt;
&lt;h3 id=&#34;considerations-for-download_dem&#34;&gt;Considerations for &lt;code&gt;download_DEM()&lt;/code&gt;&lt;/h3&gt;
&lt;h4 id=&#34;target_res&#34;&gt;&lt;code&gt;Target_res&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Alternatively to specifying a target resolution, you can specify a different raster which should be matched in all attributes by the raster at target resolution. We get to this again when discussing 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/third-party/#matching-third-party-data&#34;&gt;third-party&lt;/a&gt; data usage.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    &lt;code&gt;Target_res&lt;/code&gt; can be used for a numeric input or to match a pre-existing &lt;code&gt;raster&lt;/code&gt; object.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;shape&#34;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Spatial preferences with &lt;code&gt;download_DEM()&lt;/code&gt; are specified slightly differently when compared to &lt;code&gt;download_ERA()&lt;/code&gt;. Whereas &lt;code&gt;download_ERA()&lt;/code&gt; uses the &lt;code&gt;Extent&lt;/code&gt; argument, &lt;code&gt;download_DEM()&lt;/code&gt; uses the &lt;code&gt;Shape&lt;/code&gt; argument. The reason? &lt;code&gt;download_DEM()&lt;/code&gt; automatically reads out the extent of the input raster and carries out &lt;code&gt;extent&lt;/code&gt; limitation according to this. &lt;code&gt;SpatialPolygons&lt;/code&gt; and &lt;code&gt;data.frame&lt;/code&gt; inputs are supported. For clarity, we simply recognise them with the &lt;code&gt;Shape&lt;/code&gt; argument to avoid confusion and unnecessary &lt;code&gt;extent&lt;/code&gt; inputs.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    Spatial preferences are handed to &lt;code&gt;download_DEM()&lt;/code&gt; using the &lt;code&gt;Shape&lt;/code&gt; argument.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;keep_temporary&#34;&gt;&lt;code&gt;Keep_Temporary&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;By default, this argument is set to &lt;code&gt;FALSE&lt;/code&gt; and raw, global DEM data will be deleted when the covariates you queried have been established. Setting this argument to &lt;code&gt;TRUE&lt;/code&gt; will retain the raw data and make it so you do not have to re-download the DEM data for later use.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    Setting &lt;code&gt;Keep_Temporary = TRUE&lt;/code&gt; will retain global DEM data on your hard drive.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;source&#34;&gt;&lt;code&gt;Source&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This argument specifies where to download the DEM data from. By default, we query the data from the official USGS website. However, this website has given some users issues with connection instabilities. Consequently, the raw DEM data is also available from a dropbox which you can query download from by setting &lt;code&gt;Source = &amp;quot;Drive&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    When experiencing connection issues with the USGS servers, we recommend setting &lt;code&gt;Source = &amp;quot;Drive&amp;quot;&lt;/code&gt; to obtain covariate data.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;kriging&#34;&gt;Kriging&lt;/h2&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    Kriging can be a very &lt;strong&gt;computationally expensive&lt;/strong&gt; exercise.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The expense of kriging is largely determined by three factors:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Change in spatial resolution.&lt;/li&gt;
&lt;li&gt;Number of cells containing data; i.e. 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/kriging/#spatial-limitation&#34;&gt;Spatial Limitation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Localisation of Kriging; i.e. 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/kriging/#spatial-limitation&#34;&gt;Localisation of Results&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    We explore two of these further down in this workshop material. For more information, please consult &lt;a href=&#34;https://iopscience.iop.org/article/10.1088/1748-9326/ac39bf&#34;&gt;this publication (Figure 4)&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Finally, we are ready to interpolate our input data given our covariates with the &lt;code&gt;krigR()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;SpatialPolygonsKrig &amp;lt;- krigR(Data = SpatialPolygonsRaw, # data we want to krig as a raster object
      Covariates_coarse = Covs_ls[[1]], # training covariate as a raster object
      Covariates_fine = Covs_ls[[2]], # target covariate as a raster object
      Keep_Temporary = FALSE, # we don&#39;t want to retain the individually kriged layers on our hard-drive
      Cores = 1, # we want to krig on just one core
      FileName = &amp;quot;SpatialPolygonsKrig&amp;quot;, # the file name for our full kriging output
      Dir = Dir.Exports # which directory to save our final input in
      )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Commencing Kriging
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Kriging of remaining 3 data layers should finish around: 2023-04-03 16:35:08
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
  |                                                                                      
  |                                                                                |   0%
  |                                                                                      
  |====================                                                            |  25%
  |                                                                                      
  |========================================                                        |  50%
  |                                                                                      
  |============================================================                    |  75%
  |                                                                                      
  |================================================================================| 100%
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just like with the &lt;code&gt;download_ERA()&lt;/code&gt; function, &lt;code&gt;krigR()&lt;/code&gt; updates you on what it is currently working on. Again, I implemented this to make sure people don&amp;rsquo;t get too anxious staring at an empty console in &lt;code&gt;R&lt;/code&gt;. If this feature is not appealing to you, you can turn this progress tracking off by setting &lt;code&gt;verbose = FALSE&lt;/code&gt; in the function call to &lt;code&gt;krigR()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    For the rest of this workshop, I suppress messages from &lt;code&gt;krigR()&lt;/code&gt; via other means so that when you execute, you get progress tracking.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There we go. As output of the &lt;code&gt;krigR()&lt;/code&gt; function, we obtain a list of downscaled data as the first element and downscaling standard errors as the second list element. Let&amp;rsquo;s look at that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;SpatialPolygonsKrig[-3] # we will talk later about the third element
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $Kriging_Output
## class      : RasterBrick 
## dimensions : 175, 309, 54075, 4  (nrow, ncol, ncell, nlayers)
## resolution : 0.01666667, 0.01666667  (x, y)
## extent     : 9.87486, 15.02486, 50.14986, 53.06653  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## source     : memory
## names      : var1.pred.1, var1.pred.2, var1.pred.3, var1.pred.4 
## min values :    269.3269,    266.6584,    265.8426,    261.2555 
## max values :    275.0150,    273.3421,    272.1410,    270.0713 
## 
## 
## $Kriging_SE
## class      : RasterBrick 
## dimensions : 175, 309, 54075, 4  (nrow, ncol, ncell, nlayers)
## resolution : 0.01666667, 0.01666667  (x, y)
## extent     : 9.87486, 15.02486, 50.14986, 53.06653  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## source     : memory
## names      : var1.stdev.1, var1.stdev.2, var1.stdev.3, var1.stdev.4 
## min values :    0.1184605,    0.1265206,    0.1142046,    0.1283697 
## max values :    0.1308865,    0.1426154,    0.1535409,    0.2638671
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All the data has been downscaled and we do have uncertainties recorded for all of our outputs. Let&amp;rsquo;s visualise the data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(SpatialPolygonsKrig, 
           Shp = Shape_shp,
           Dates = c(&amp;quot;01-1995&amp;quot;, &amp;quot;02-1995&amp;quot;, &amp;quot;03-1995&amp;quot;, &amp;quot;04-1995&amp;quot;)
           )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-downscaling_files/figure-html/KrigPlot-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the elevation patterns show up clearly in our kriged air temperature output. Furthermore, you can see that our certainty of Kriging predictions drops on the 04/01/1995 in comparison to the preceding days. However, do keep in mind that a maximum standard error of 0.131, 0.143, 0.154, 0.264 (for each layer of our output respectively) on a total range of data of 5.688, 6.684, 6.298, 8.816 (again, for each layer in the output respectively) is evident of a downscaling result we can be confident in. We also demonstrated reliability of kriging in 
&lt;a href=&#34;https://iopscience.iop.org/article/10.1088/1748-9326/ac39bf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this publication (Figure 3)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, this &lt;code&gt;SpatialPolygons&lt;/code&gt;-informed downscaling took roughly 57 minutes on my machine (this may vary drastically on other devices).&lt;/p&gt;
&lt;h3 id=&#34;spatial-limitation&#34;&gt;Spatial Limitation&lt;/h3&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Kriging can be sped up tremendously by limiting downscaling efforts to smaller regions.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To demonstrate how spatial limitation affects computational time, we downscale all of our remaining 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/download//#climate-data&#34;&gt;target data&lt;/a&gt; (i.e., &lt;code&gt;extent&lt;/code&gt; and &lt;code&gt;data.frame&lt;/code&gt; time-series specifications).&lt;/p&gt;
&lt;details&gt;&lt;summary&gt; Click here for kriging calls &lt;/summary&gt;
&lt;h4 id=&#34;extent-data&#34;&gt;&lt;code&gt;extent&lt;/code&gt; Data&lt;/h4&gt;
&lt;h4 id=&#34;point-data-dataframe&#34;&gt;Point-Data (&lt;code&gt;data.frame&lt;/code&gt;)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;PtsRaw &amp;lt;- stack(file.path(Dir.Data, &amp;quot;PointsRaw.nc&amp;quot;))
Covs_ls &amp;lt;- download_DEM(Train_ras = PtsRaw,
                        Target_res = .02,
                        Shape = Mountains_df,
                        Buffer = 0.5,
                        ID = &amp;quot;Mountain&amp;quot;,
                        Dir = Dir.Covariates,
                        Keep_Temporary = TRUE)
PtsKrig &amp;lt;- krigR(Data = PtsRaw, 
      Covariates_coarse = Covs_ls[[1]], 
      Covariates_fine = Covs_ls[[2]], 
      Keep_Temporary = FALSE, 
      Cores = 1, 
      FileName = &amp;quot;PointsKrig&amp;quot;,
      Dir = Dir.Exports
      )
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;How long did the kriging for each data set take? Let me list these out to highlight just how much of a difference the spatial limitation makes here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;extent&lt;/code&gt; specification (7344 data cells in training resolution) - roughly 30 minutes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpatialPolygons&lt;/code&gt; specification (3752 data cells in training resolution) - roughly 4 minutes&lt;/li&gt;
&lt;li&gt;Point (&lt;code&gt;data.frame&lt;/code&gt;) specification (1908 data cells in training resolution) - roughly 30 seconds&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you can see, there is a huge benefit to reducing the cells containing data to speed up computation. But what is the impact of doing so for our 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/prep/#points-of-interest-dataframe&#34;&gt;points of interest&lt;/a&gt;?&lt;/p&gt;
&lt;details&gt;&lt;summary&gt; Click here for data extraction and plotting &lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Extract_df &amp;lt;- data.frame(
  AirTemp = c(
    raster::extract(
      x = SpatialPolygonsKrig[[1]][[1]],
      y = Mountains_df[, c(&amp;quot;Lon&amp;quot;, &amp;quot;Lat&amp;quot;)]), 
    raster::extract(
      x = ExtKrig[[1]][[1]],
      y = Mountains_df[, c(&amp;quot;Lon&amp;quot;, &amp;quot;Lat&amp;quot;)]), 
    raster::extract(
      x = PtsKrig[[1]][[1]],
      y = Mountains_df[, c(&amp;quot;Lon&amp;quot;, &amp;quot;Lat&amp;quot;)])
  ), 
  Uncertainty = c(
    raster::extract(
      x = SpatialPolygonsKrig[[2]][[1]],
      y = Mountains_df[, c(&amp;quot;Lon&amp;quot;, &amp;quot;Lat&amp;quot;)]), 
    raster::extract(
      x = ExtKrig[[2]][[1]],
      y = Mountains_df[, c(&amp;quot;Lon&amp;quot;, &amp;quot;Lat&amp;quot;)]), 
    raster::extract(
      x = PtsKrig[[2]][[1]],
      y = Mountains_df[, c(&amp;quot;Lon&amp;quot;, &amp;quot;Lat&amp;quot;)])
  ), 
  Mountain = rep(Mountains_df$Mountain, 3),
  Spatial = rep(c(&amp;quot;Polygons&amp;quot;, &amp;quot;Extent&amp;quot;, &amp;quot;Points&amp;quot;), 
                each = nrow(Mountains_df))
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = Extract_df, aes(y = Mountain, x = AirTemp, col = Spatial)) +
  geom_point(cex = 5, pch = 18) +
  geom_errorbar(aes(xmin = AirTemp - Uncertainty/2, 
                    xmax = AirTemp + Uncertainty/2)) +
  theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;&lt;img src=&#34;krigr-downscaling_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the differences between the different data sets at our points of interest are noticeable and often times not negligible (as far as statistical interpolation uncertainty, i.e., error bars) are concerned.&lt;/p&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;When statistically downscaling data products it is &lt;strong&gt;vital you inspect the output data&lt;/strong&gt; for inconsistencies or other issues.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kriging is not a one-size-fits all solution to spatial resolution needs!&lt;/strong&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;localisation-of-results&#34;&gt;Localisation of Results&lt;/h3&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    By default Kriging of the &lt;code&gt;krigR()&lt;/code&gt; function uses all cells in a spatial product to downscale individual cells of rasters.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    The &lt;code&gt;nmax&lt;/code&gt; argument can circumvent this.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Letâs build further on our above example by adding the &lt;code&gt;nmax&lt;/code&gt; argument (passed on to &lt;code&gt;gstat::krige()&lt;/code&gt;) to our &lt;code&gt;krigR()&lt;/code&gt; function call. This argument controls how many of the closest cells the Kriging algorithm should consider in the downscaling of individual coarse, training cells.&lt;/p&gt;
&lt;p&gt;First, we need to re-establish our covariate data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Covs_ls &amp;lt;- download_DEM(Train_ras = SpatialPolygonsRaw,
                        Target_res = .02,
                        Shape = Shape_shp,
                        Dir = Dir.Covariates,
                        Keep_Temporary = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we may use locally weighted kriging:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;SpatialPolygonsLocalKrig &amp;lt;- krigR(Data = SpatialPolygonsRaw,
      Covariates_coarse = Covs_ls[[1]],
      Covariates_fine = Covs_ls[[2]],
      Keep_Temporary = FALSE,
      Cores = 1, 
      nmax = 10,
      FileName = &amp;quot;SpatialPolygonsLocalKrig&amp;quot;,
      Dir = Dir.Exports
      )
Plot_Krigs(SpatialPolygonsLocalKrig, 
           Shp = Shape_shp,
           Dates = c(&amp;quot;01-1995&amp;quot;, &amp;quot;02-1995&amp;quot;, &amp;quot;03-1995&amp;quot;, &amp;quot;04-1995&amp;quot;)
           )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-downscaling_files/figure-html/KrigShpLocal-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The air temperature prediction/downscaling results look just like the ones that we obtained above (we will investigate this claim in a second here). However, we seriously improved our localised understanding of Kriging uncertainties (i.e., we see much more localised patterns of Kriging standard error). In the case of our study region, uncertainties seem to be highest for areas where the landscape is dominated by large, abrupt changes in elevation (e.g. around the mountainous areas) and water-dominated areas such as streams and lakes (e.g. the lakes around Leipzig in the North of Saxony).&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Using the &lt;code&gt;nmax&lt;/code&gt; argument helps to identify highly localised patterns in the Kriging uncertainty as well as predictions!
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now let&amp;rsquo;s investigate how much of a difference there is between our two predictions of statistically downscaled air temperature when using locally weighted kriging or domain-average kriging as before:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Raw(SpatialPolygonsLocalKrig[[1]]-SpatialPolygonsKrig[[1]], 
         Shp = Shape_shp,
         Dates = c(&amp;quot;01-1995&amp;quot;, &amp;quot;02-1995&amp;quot;, &amp;quot;03-1995&amp;quot;, &amp;quot;04-1995&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-downscaling_files/figure-html/KrigShpLocalDiff-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Again, limiting the number of data points that the Kriging algorithm has access to changes the data we obtain. Therefore, let me reiterate:&lt;/p&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;When statistically downscaling data products it is &lt;strong&gt;vital you inspect the output data&lt;/strong&gt; for inconsistencies or other issues.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kriging is not a one-size-fits all solution to spatial resolution needs!&lt;/strong&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;considerations-for-krigr&#34;&gt;Considerations for &lt;code&gt;krigR()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;krigR()&lt;/code&gt; is a complex function with many things happening under the hood. To make sure you have the best experience with this function, I have compiled a few bits of &lt;em&gt;good-to-know&lt;/em&gt; information about the workings of &lt;code&gt;krigR()&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;cores&#34;&gt;&lt;code&gt;Cores&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Kriging is computationally expensive and can be a time-consuming exercise first and foremost. However, the &lt;code&gt;gstat::krige()&lt;/code&gt; function which &lt;code&gt;krigR()&lt;/code&gt; makes calls to, and which carries out the kriging itself, does not support multi-core processing. Conclusively, we can hand separate kriging jobs to separate cores in our machines and drastically reduce computation time. We do so via the &lt;code&gt;Cores&lt;/code&gt; argument.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    Using the &lt;code&gt;Cores&lt;/code&gt; argument, &lt;code&gt;krigR()&lt;/code&gt; carries out parallel kriging of multi-layer rasters.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;nmax-and-maxdist&#34;&gt;&lt;code&gt;nmax&lt;/code&gt; and &lt;code&gt;maxdist&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Localised kriging is achieved through either &lt;code&gt;nmax&lt;/code&gt; or &lt;code&gt;maxdist&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    When using &lt;code&gt;nmax&lt;/code&gt; or &lt;code&gt;maxdist&lt;/code&gt;, we recommend you ensure that the distance represented by these arguments approximates the area of typical weather system (around 150km).
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For the purpose of showing clear patterns in the localisation of uncertainty patterns, we did not to so in the above.&lt;/p&gt;
&lt;h4 id=&#34;keep_temporary-1&#34;&gt;&lt;code&gt;Keep_Temporary&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Kriging is time-consuming. Particularly for multi-layer rasters with many layers. To make it so you can interrupt kriging of multi-layer rasters and resume the process at a later time, we have implemented temporary file saving. &lt;code&gt;krigR()&lt;/code&gt; checks for presence of temporary files and only loads already kriged layers rather than kriging them again. Upon completion and saving of the final output, you may choose to delete the temporary files or keep them.&lt;/p&gt;
&lt;h4 id=&#34;krigingequation&#34;&gt;&lt;code&gt;KrigingEquation&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;krigR()&lt;/code&gt; can accommodate any covariate pair (training and target resolution) you supply. However, when using 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/third-party/#third-party-data-covariates&#34;&gt;third-party covariates&lt;/a&gt; in non-linear combinations, you will need to use the &lt;code&gt;KrigingEquation&lt;/code&gt; argument to do so.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    With the &lt;code&gt;KrigingEquation&lt;/code&gt; argument, you may specify non-linear combinations of covariates for your call to &lt;code&gt;krigR()&lt;/code&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;kriging-reliability&#34;&gt;Kriging Reliability&lt;/h4&gt;
&lt;p&gt;Kriging reliability and robustness is largely dependant on the statistical link between your target variable and covariates of your choice.&lt;/p&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;Elevation will not be a useful covariate for all climate variables!&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We demonstrate that Kriging is a reliable interpolation method when carefully choosing covariates in 
&lt;a href=&#34;https://iopscience.iop.org/article/10.1088/1748-9326/ac39bf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this publication (Figure 3)&lt;/a&gt;. One large factor in reliability of kriging is the change in resolution between training and target resolutions - as a rule of thumb, we do not recommend downscaling representing more than roughly one order of magnitude. If you attempt to do so &lt;code&gt;krigR()&lt;/code&gt; will throw a warning message, but proceed regardless.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Kriging is a very flexible tool for statistical interpolation. Consider your choice of covariates and change in resolutions carefully. &lt;strong&gt;Always inspect your data&lt;/strong&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;call-list&#34;&gt;Call List&lt;/h4&gt;
&lt;p&gt;So far, we have only ever looked at the first two elements in the list returned by &lt;code&gt;krigR()&lt;/code&gt;. A quick look at the help file, the code, or this guide reveals that there is a third list element - the &lt;em&gt;call list&lt;/em&gt;. When coding this feature into &lt;code&gt;krigR()&lt;/code&gt; I intended for this to be a neat, clean, storage-friendly way of keeping track of how the spatial product was created. It does so without storing additional spatial products. Let&amp;rsquo;s have a look at it:&lt;/p&gt;
&lt;details&gt;&lt;summary&gt; Click here for call list query and output &lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;SpatialPolygonsKrig[[3]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $Data
## $Data$Class
## [1] &amp;quot;RasterStack&amp;quot;
## attr(,&amp;quot;package&amp;quot;)
## [1] &amp;quot;raster&amp;quot;
## 
## $Data$Dimensions
## $Data$Dimensions$nrow
## [1] 34
## 
## $Data$Dimensions$ncol
## [1] 54
## 
## $Data$Dimensions$ncell
## [1] 1836
## 
## 
## $Data$Extent
## class      : Extent 
## xmin       : 9.726991 
## xmax       : 15.12801 
## ymin       : 49.75 
## ymax       : 53.15 
## 
## $Data$CRS
## Coordinate Reference System:
## Deprecated Proj.4 representation: +proj=longlat +datum=WGS84 +no_defs 
## WKT2 2019 representation:
## GEOGCRS[&amp;quot;unknown&amp;quot;,
##     DATUM[&amp;quot;World Geodetic System 1984&amp;quot;,
##         ELLIPSOID[&amp;quot;WGS 84&amp;quot;,6378137,298.257223563,
##             LENGTHUNIT[&amp;quot;metre&amp;quot;,1]],
##         ID[&amp;quot;EPSG&amp;quot;,6326]],
##     PRIMEM[&amp;quot;Greenwich&amp;quot;,0,
##         ANGLEUNIT[&amp;quot;degree&amp;quot;,0.0174532925199433],
##         ID[&amp;quot;EPSG&amp;quot;,8901]],
##     CS[ellipsoidal,2],
##         AXIS[&amp;quot;longitude&amp;quot;,east,
##             ORDER[1],
##             ANGLEUNIT[&amp;quot;degree&amp;quot;,0.0174532925199433,
##                 ID[&amp;quot;EPSG&amp;quot;,9122]]],
##         AXIS[&amp;quot;latitude&amp;quot;,north,
##             ORDER[2],
##             ANGLEUNIT[&amp;quot;degree&amp;quot;,0.0174532925199433,
##                 ID[&amp;quot;EPSG&amp;quot;,9122]]]] 
## 
## $Data$layers
## [1] &amp;quot;X1&amp;quot; &amp;quot;X2&amp;quot; &amp;quot;X3&amp;quot; &amp;quot;X4&amp;quot;
## 
## 
## $Covariates_coarse
## $Covariates_coarse$Class
## [1] &amp;quot;RasterLayer&amp;quot;
## attr(,&amp;quot;package&amp;quot;)
## [1] &amp;quot;raster&amp;quot;
## 
## $Covariates_coarse$Dimensions
## $Covariates_coarse$Dimensions$nrow
## [1] 34
## 
## $Covariates_coarse$Dimensions$ncol
## [1] 54
## 
## $Covariates_coarse$Dimensions$ncell
## [1] 1836
## 
## 
## $Covariates_coarse$Extent
## class      : Extent 
## xmin       : 9.726991 
## xmax       : 15.12801 
## ymin       : 49.75 
## ymax       : 53.15 
## 
## $Covariates_coarse$CRS
## Coordinate Reference System:
## Deprecated Proj.4 representation: +proj=longlat +datum=WGS84 +no_defs 
## WKT2 2019 representation:
## GEOGCRS[&amp;quot;unknown&amp;quot;,
##     DATUM[&amp;quot;World Geodetic System 1984&amp;quot;,
##         ELLIPSOID[&amp;quot;WGS 84&amp;quot;,6378137,298.257223563,
##             LENGTHUNIT[&amp;quot;metre&amp;quot;,1]],
##         ID[&amp;quot;EPSG&amp;quot;,6326]],
##     PRIMEM[&amp;quot;Greenwich&amp;quot;,0,
##         ANGLEUNIT[&amp;quot;degree&amp;quot;,0.0174532925199433],
##         ID[&amp;quot;EPSG&amp;quot;,8901]],
##     CS[ellipsoidal,2],
##         AXIS[&amp;quot;longitude&amp;quot;,east,
##             ORDER[1],
##             ANGLEUNIT[&amp;quot;degree&amp;quot;,0.0174532925199433,
##                 ID[&amp;quot;EPSG&amp;quot;,9122]]],
##         AXIS[&amp;quot;latitude&amp;quot;,north,
##             ORDER[2],
##             ANGLEUNIT[&amp;quot;degree&amp;quot;,0.0174532925199433,
##                 ID[&amp;quot;EPSG&amp;quot;,9122]]]] 
## 
## $Covariates_coarse$layers
## [1] &amp;quot;DEM&amp;quot;
## 
## 
## $Covariates_fine
## $Covariates_fine$Class
## [1] &amp;quot;RasterLayer&amp;quot;
## attr(,&amp;quot;package&amp;quot;)
## [1] &amp;quot;raster&amp;quot;
## 
## $Covariates_fine$Dimensions
## $Covariates_fine$Dimensions$nrow
## [1] 204
## 
## $Covariates_fine$Dimensions$ncol
## [1] 324
## 
## $Covariates_fine$Dimensions$ncell
## [1] 66096
## 
## 
## $Covariates_fine$Extent
## class      : Extent 
## xmin       : 9.72486 
## xmax       : 15.12486 
## ymin       : 49.74986 
## ymax       : 53.14986 
## 
## $Covariates_fine$CRS
## Coordinate Reference System:
## Deprecated Proj.4 representation: +proj=longlat +datum=WGS84 +no_defs 
## WKT2 2019 representation:
## GEOGCRS[&amp;quot;unknown&amp;quot;,
##     DATUM[&amp;quot;World Geodetic System 1984&amp;quot;,
##         ELLIPSOID[&amp;quot;WGS 84&amp;quot;,6378137,298.257223563,
##             LENGTHUNIT[&amp;quot;metre&amp;quot;,1]],
##         ID[&amp;quot;EPSG&amp;quot;,6326]],
##     PRIMEM[&amp;quot;Greenwich&amp;quot;,0,
##         ANGLEUNIT[&amp;quot;degree&amp;quot;,0.0174532925199433],
##         ID[&amp;quot;EPSG&amp;quot;,8901]],
##     CS[ellipsoidal,2],
##         AXIS[&amp;quot;longitude&amp;quot;,east,
##             ORDER[1],
##             ANGLEUNIT[&amp;quot;degree&amp;quot;,0.0174532925199433,
##                 ID[&amp;quot;EPSG&amp;quot;,9122]]],
##         AXIS[&amp;quot;latitude&amp;quot;,north,
##             ORDER[2],
##             ANGLEUNIT[&amp;quot;degree&amp;quot;,0.0174532925199433,
##                 ID[&amp;quot;EPSG&amp;quot;,9122]]]] 
## 
## $Covariates_fine$layers
## [1] &amp;quot;DEM&amp;quot;
## 
## 
## $KrigingEquation
## ERA ~ DEM
## &amp;lt;environment: 0x7fee0d4450e8&amp;gt;
## 
## $Cores
## [1] 1
## 
## $FileName
## [1] &amp;quot;SpatialPolygonsKrig&amp;quot;
## 
## $Keep_Temporary
## [1] FALSE
## 
## $nmax
## [1] Inf
## 
## $Data_Retrieval
## [1] &amp;quot;None needed. Data was not queried via krigR function, but supplied by user.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;This lengthy list should contain all information you need to trace how you created a certain data set using &lt;code&gt;krigR()&lt;/code&gt;. If you feel like anything is missing in this list, please contact us.&lt;/p&gt;
&lt;h2 id=&#34;aggregate-uncertainty&#34;&gt;Aggregate Uncertainty&lt;/h2&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    Every climate data product is subject to an error-rate / range of data uncertainty. Unfortunately, &lt;strong&gt;almost none&lt;/strong&gt; of the established climate data products &lt;strong&gt;communicate associated uncertainties&lt;/strong&gt;. This leads to a dangerous &lt;strong&gt;overestimation of data credibility&lt;/strong&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    With the &lt;code&gt;KrigR&lt;/code&gt; workflow, it is trivial to obtain uncertainty flags for all of your data - no matter the spatial or temporal resolution.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To understand the full certainty of our data obtained via the &lt;code&gt;KrigR&lt;/code&gt; workflow, we should combine 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/download/#dynamical-data-uncertainty&#34;&gt;dynamical uncertainty&lt;/a&gt; with the statistical uncertainty we obtained from the &lt;code&gt;krigR()&lt;/code&gt; function call above.&lt;/p&gt;
&lt;p&gt;To do so, we require two data sets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SpatialPoylgonsKrig&lt;/code&gt; - 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/kriging/#kriging&#34;&gt;created above&lt;/a&gt; containing statistical uncertainty in the second list position&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpatialPoylgonsEns&lt;/code&gt; - 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/download/#dynamical-data-uncertainty-1&#34;&gt;created here&lt;/a&gt;; 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/Data/SpatialPolygonsEns.nc&#34;&gt;download here&lt;/a&gt; containing dynamical uncertainty&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, we load the data and assign them to objects with shorter names:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;SpatialPolygonsEns &amp;lt;- stack(file.path(Dir.Data, &amp;quot;SpatialPolygonsEns.nc&amp;quot;))
DynUnc &amp;lt;- SpatialPolygonsEns
KrigUnc &amp;lt;- SpatialPolygonsKrig[[2]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we need to align the rasters of statistical uncertainty (resolution: 0.017) and dynamical uncertainty (resolution: 0.5). As you can see, these are of differing resolutions and so cannot easily be combined using raster math. Instead, we first disaggregate the coarser-resolution raster (&lt;code&gt;DynUnc&lt;/code&gt;) as disaggregation does not attempt any interpolation thus preserving the data, but representing it with smaller cells. To fix final remaining alignment issues, we allow for some resampling between the two raster:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;EnsDisagg &amp;lt;- disaggregate(DynUnc, fact=res(DynUnc)[1]/res(KrigUnc)[1])
DynUnc &amp;lt;- resample(EnsDisagg, KrigUnc)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we combine the two uncertainty data products to form an aggregate uncertainty product:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;FullUnc &amp;lt;- DynUnc + KrigUnc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we are ready to plot our aggregate uncertainty:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Raw(FullUnc, 
         Shp = Shape_shp, 
         Dates = c(&amp;quot;01-1995&amp;quot;, &amp;quot;02-1995&amp;quot;, &amp;quot;03-1995&amp;quot;, &amp;quot;04-1995&amp;quot;), 
         COL = rev(viridis(100)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-downscaling_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, at short time-scales dynamic uncertainty eclipses statistical uncertainty. However, this phenomenon reverses at longer time-scales as shown in 
&lt;a href=&#34;https://iopscience.iop.org/article/10.1088/1748-9326/ac39bf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this publication (Figure 1)&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;session-info&#34;&gt;Session Info&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.2.3 (2023-03-15)
## Platform: x86_64-apple-darwin17.0 (64-bit)
## Running under: macOS Big Sur ... 10.16
## 
## Matrix products: default
## BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] parallel  stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] mapview_2.11.0          rnaturalearthdata_0.1.0 rnaturalearth_0.3.2    
##  [4] gimms_1.2.1             ggmap_3.0.2             cowplot_1.1.1          
##  [7] viridis_0.6.2           viridisLite_0.4.1       ggplot2_3.4.1          
## [10] tidyr_1.3.0             KrigR_0.1.2             terra_1.7-21           
## [13] httr_1.4.5              stars_0.6-0             abind_1.4-5            
## [16] fasterize_1.0.4         sf_1.0-12               lubridate_1.9.2        
## [19] automap_1.1-9           doSNOW_1.0.20           snow_0.4-4             
## [22] doParallel_1.0.17       iterators_1.0.14        foreach_1.5.2          
## [25] rgdal_1.6-5             raster_3.6-20           sp_1.6-0               
## [28] stringr_1.5.0           keyring_1.3.1           ecmwfr_1.5.0           
## [31] ncdf4_1.21             
## 
## loaded via a namespace (and not attached):
##  [1] leafem_0.2.0             colorspace_2.1-0         class_7.3-21            
##  [4] leaflet_2.1.2            satellite_1.0.4          base64enc_0.1-3         
##  [7] rstudioapi_0.14          proxy_0.4-27             farver_2.1.1            
## [10] fansi_1.0.4              codetools_0.2-19         cachem_1.0.7            
## [13] knitr_1.42               jsonlite_1.8.4           png_0.1-8               
## [16] Kendall_2.2.1            compiler_4.2.3           assertthat_0.2.1        
## [19] fastmap_1.1.1            cli_3.6.0                htmltools_0.5.4         
## [22] tools_4.2.3              gtable_0.3.1             glue_1.6.2              
## [25] dplyr_1.1.0              Rcpp_1.0.10              jquerylib_0.1.4         
## [28] vctrs_0.6.1              blogdown_1.16            crosstalk_1.2.0         
## [31] lwgeom_0.2-11            xfun_0.37                timechange_0.2.0        
## [34] lifecycle_1.0.3          rnaturalearthhires_0.2.1 zoo_1.8-11              
## [37] scales_1.2.1             gstat_2.1-0              yaml_2.3.7              
## [40] curl_5.0.0               memoise_2.0.1            gridExtra_2.3           
## [43] sass_0.4.5               reshape_0.8.9            stringi_1.7.12          
## [46] highr_0.10               e1071_1.7-13             boot_1.3-28.1           
## [49] intervals_0.15.3         RgoogleMaps_1.4.5.3      rlang_1.1.0             
## [52] pkgconfig_2.0.3          bitops_1.0-7             evaluate_0.20           
## [55] lattice_0.20-45          purrr_1.0.1              htmlwidgets_1.6.1       
## [58] labeling_0.4.2           tidyselect_1.2.0         plyr_1.8.8              
## [61] magrittr_2.0.3           bookdown_0.33            R6_2.5.1                
## [64] generics_0.1.3           DBI_1.1.3                pillar_1.8.1            
## [67] withr_2.5.0              units_0.8-1              xts_0.13.0              
## [70] tibble_3.2.1             spacetime_1.2-8          KernSmooth_2.23-20      
## [73] utf8_1.2.3               rmarkdown_2.20           jpeg_0.1-10             
## [76] grid_4.2.3               zyp_0.11-1               FNN_1.1.3.2             
## [79] digest_0.6.31            classInt_0.4-9           webshot_0.5.4           
## [82] stats4_4.2.3             munsell_0.5.0            bslib_0.4.2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Bioclimatic Variables</title>
      <link>https://www.erikkusch.com/courses/krigr/bioclim/</link>
      <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/krigr/bioclim/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;&lt;code&gt;KrigR&lt;/code&gt; is currently undergoing development. As a result, this part of the workshop has become deprecated. Please refer to the &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/setup/&#34;&gt;setup&lt;/a&gt; &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/quickstart/&#34;&gt;quick guide&lt;/a&gt; portions of this material as these are up-to-date. &lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    This part of the workshop is dependant on set-up and preparation done previously &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/prep/&#34;&gt;here&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For bioclimatic variable calculation, this workshop makes use of the  &lt;code&gt;SpatialPolygons&lt;/code&gt; spatial preferences which we set up 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/prep/#shape-of-interest-spatialpolygons&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, we load &lt;code&gt;KrigR&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(KrigR)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    To obtain bioclimatic data with &lt;code&gt;KrigR&lt;/code&gt; we want to use the &lt;code&gt;BioClim()&lt;/code&gt; function.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the next sections, I will show you how to use it and how the resulting data objects may differ and why.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Bioclimatic variables are often treated as very robust metrics - I do not believe so and hope the following will demonstrate the nuance in bioclimatic metrics.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;our-first-bioclimatic-data-set&#34;&gt;Our First Bioclimatic Data Set&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with the most basic of bioclimatic data products. So what are the specifications? Well, we:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Query data for the period between 2010 (&lt;code&gt;Y_start&lt;/code&gt;) and 2020 (&lt;code&gt;Y_end&lt;/code&gt;, including 2020).&lt;/li&gt;
&lt;li&gt;Obtain data from the era5-land (&lt;code&gt;DataSet&lt;/code&gt;) catalogue of data.&lt;/li&gt;
&lt;li&gt;Approximate water availability through precipitation (&lt;code&gt;Water_Var&lt;/code&gt;) in keeping with typical practices.&lt;/li&gt;
&lt;li&gt;Extreme metrics for temperature minimum and maximum are calculated from daily (&lt;code&gt;T_res&lt;/code&gt;) aggregates of the underlying hourly temperature data.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    You will see function call to &lt;code&gt;BioClim()&lt;/code&gt; wrapped in if statements which check for whether the output is already present or not. &lt;code&gt;BioClim&lt;/code&gt; compilation can take significant time and I do this here to avoid recompilation on changes to the text of the blogpost on my end.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    Setting the argument &lt;code&gt; Keep_Monthly = TRUE&lt;/code&gt; will prompt the function to retain monthly aggregates of temperature and water availability alongside the final output. When &lt;code&gt;BioClim()&lt;/code&gt; recognises that any of the underlying data is already present, it will skip the steps necessary to create this data.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file if download &amp; processing takes too long:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/Present_BC.nc&#34;&gt;Present_BC.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if(!file.exists(file.path(Dir.Data, &amp;quot;Present_BC.nc&amp;quot;))){
  BC2010_ras &amp;lt;- BioClim(
      Water_Var = &amp;quot;total_precipitation&amp;quot;,
      Y_start = 2010,
      Y_end = 2020,
      DataSet = &amp;quot;era5-land&amp;quot;,
      T_res = &amp;quot;day&amp;quot;,
      Extent = Shape_shp,
      Dir = Dir.Data,
      Keep_Monthly = FALSE,
      FileName = &amp;quot;Present_BC&amp;quot;,
      API_User = API_User,
      API_Key = API_Key,
      Cores = numberOfCores,
      TimeOut = 60^2*48,
      SingularDL = TRUE,
      verbose = TRUE,
      Keep_Raw = FALSE,
      TryDown = 5
    )
}else{
  BC2010_ras &amp;lt;- stack(file.path(Dir.Data, &amp;quot;Present_BC.nc&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s plot our results. Note that temperature is recorded in Kelvin and precipitation in cubic metres (i.e. litres). To do so, we use one of our 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/prep/#visualising-our-study-setting&#34;&gt;user-defined plotting functions&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_BC(BC2010_ras, Shp = Shape_shp)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/BC1b-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s not much commenting on the output above as the output should look familiar to most macroecologists.&lt;/p&gt;
&lt;h2 id=&#34;time-frames&#34;&gt;Time-Frames&lt;/h2&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Time window of baseline climate data (e.g; climatology time frames) ought to be adjusted to the specific needs of each study. This is true also for bioclimatic data. &lt;strong&gt;Pre-made data sets do not deliver on this need!&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    With &lt;code&gt;KrigR&lt;/code&gt;, you can build the bioclimatic data sets you need for your study.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s move on to the first important functionality of the &lt;code&gt;KrigR::BioClim()&lt;/code&gt; function: &lt;strong&gt;selection of time-frames&lt;/strong&gt;. With this, you can obtain bioclimatic data for exactly the duration that your study requires. Here, we query data for the period between 1951 and 1960:&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file if download &amp; processing takes too long:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/Past_BC.nc&#34;&gt;Past_BC.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if(!file.exists(file.path(Dir.Data, &amp;quot;Past_BC.nc&amp;quot;))){
  BC1951_ras &amp;lt;- BioClim(
      Water_Var = &amp;quot;total_precipitation&amp;quot;,
      Y_start = 1951,
      Y_end = 1960,
      DataSet = &amp;quot;era5-land&amp;quot;,
      T_res = &amp;quot;day&amp;quot;,
      Extent = Shape_shp,
      Dir = Dir.Data,
      Keep_Monthly = FALSE,
      FileName = &amp;quot;Past_BC&amp;quot;,
      API_User = API_User,
      API_Key = API_Key,
      Cores = numberOfCores,
      TimeOut = 60^2*48,
      SingularDL = TRUE,
      verbose = TRUE
    )
}else{
  BC1951_ras &amp;lt;- stack(file.path(Dir.Data, &amp;quot;Past_BC.nc&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I will forego plotting the data itself and instead plot the difference between our bioclimatic data of the present which we created prior and the newly created bioclimatic product of the past. Let me walk you through them 1 by 1.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    The below plots show the differences in bioclimatic data products of the 2010-2020 and 1951-1960.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;annual-temperature&#34;&gt;Annual Temperature&lt;/h3&gt;
&lt;p&gt;As you can see below, the time period of 2010 to 2020 was about 1.5-1.9 Kelvin warmer than the period of 1951 to 1960:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_BC(BC2010_ras-BC1951_ras, Shp = Shape_shp, which = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/BC_Early1-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;temperatures&#34;&gt;Temperatures&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s bundle the differences for all remaining temperature-related bioclimatic variables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_BC(BC2010_ras-BC1951_ras, Shp = Shape_shp, which = 2:11)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/BC_Early2-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Again, you should easily identify just how much the data changes when setting different calculation time frames for bioclimatic variables.&lt;/p&gt;
&lt;h3 id=&#34;water-availability&#34;&gt;Water Availability&lt;/h3&gt;
&lt;p&gt;Now for the water-related bioclimatic variables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_BC(BC2010_ras-BC1951_ras, Shp = Shape_shp, which = 12:19)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/BC_Early8-1.png&#34; width=&#34;1440&#34; /&gt;
Clearly, my home area turned much drier with more pronounced seasonality and extreme precipitation events.&lt;/p&gt;
&lt;p&gt;I hope that the above has clearly demonstrated on thing:&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;Appropriate use of bioclimatic variables is largely dependant on data retrieval for relevant time frames.&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;water-availability-variables&#34;&gt;Water-Availability Variables&lt;/h2&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;Precipitation&lt;/strong&gt; might not be the most useful or appropriate water availability metric for your study region or requirements.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    With &lt;code&gt;KrigR&lt;/code&gt;, you can decide which water availability variable from the ERA5(-Land) catalogue to use for calculation of bioclimatic data sets.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Contrary to current practices in macroecology, I have gripes with the use of precipitation data in bioclimatic variable computation. Why is that? I strongly believe that other water availability variables are much better suited for our analyses for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bioclimatic products are usually derived from observation-based climate products (such as WorldClim) which do not do a terrific job at accurately representing precipitation to begin with.&lt;/li&gt;
&lt;li&gt;Further downscaling of bioclimatic products containing precipitation information is terribly difficult.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both issues are related to one central problem: &lt;strong&gt;Statistical interpolation of precipitation data is difficult and usually done insufficiently&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Luckily, with ERA5(-Land), we aren&amp;rsquo;t tied to precipitation and can instead use other water availability metrics such as volumetric soil water content - also known as soil moisture. What&amp;rsquo;s more, this data is available in four distinct depth layers which can be linked to root depth and growth forms.&lt;/p&gt;
&lt;p&gt;Here, I demonstrate the use of the shallowest layer of soil moisture data. As you can see, we are using the same specification as for our basic bioclimatic product with the exception for the &lt;code&gt;Water_Var&lt;/code&gt; argument:&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file if download &amp; processing takes too long:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/Qsoil_BC.nc&#34;&gt;Qsoil_BC.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if(file.exists(file.path(Dir.Data, &amp;quot;Qsoil_BC.nc&amp;quot;))){
  BCq_ras &amp;lt;- stack(file.path(Dir.Data, &amp;quot;Qsoil_BC.nc&amp;quot;))
}else{
  BCq_ras &amp;lt;- BioClim(
      Water_Var = &amp;quot;volumetric_soil_water_layer_1&amp;quot;,
      Y_start = 2010,
      Y_end = 2020,
      Extent = Shape_shp,
      Dir = Dir.Data,
      Keep_Monthly = FALSE,
      FileName = &amp;quot;Qsoil_BC&amp;quot;,
      API_User = API_User,
      API_Key = API_Key,
      Cores = numberOfCores,
      TimeOut = Inf,
      SingularDL = TRUE
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s how easy it is to obtain different bioclimatic products with &lt;code&gt;KrigR&lt;/code&gt;. Let&amp;rsquo;s plot this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_BC(BCq_ras, Shp = Shape_shp, Water_Var = &amp;quot;Soil Moisture&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/BC_QsoilB-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Again, I would like to investigate the changes in how we understand the climatic regimes across our study area now that we are using soil moisture for our water availability as compared to when we used precipitation data.&lt;/p&gt;
&lt;h3 id=&#34;temperatures-1&#34;&gt;Temperatures&lt;/h3&gt;
&lt;p&gt;As is hardly surprising, there are no differences in annual temperature data or any other temperature variable except for BIO8 and BIO9. Since we change by what we quantify dryness and wetness, there is tremendous potential in quantifying temperature of driest and wettest quarter differently:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_BC(BC2010_ras-BCq_ras, Shp = Shape_shp, which = 8:9)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/BC_Q1-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Changing water availability metric in bioclimatic considerations can drastically change even &lt;em&gt;temperature&lt;/em&gt; metrics.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Volumetric soil moisture exhibits more pronounced spatial patterns than precipitation records do thus supplying bioclimatic modelling exercises with more pronounced information.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;water-availability-1&#34;&gt;Water Availability&lt;/h3&gt;
&lt;p&gt;Now for the water-related bioclimatic variables. This is where the rubber meets the road! Aside from the quantitative differences in water availability estimates when using soil moisture over precipitation records, please take note of the much more pronounced spatial patterns (particularly along the river throughout Saxony-Anhalt in the north-western region of our study area) when using soil moisture data. This is much more likely to accurately represent bioclimatic envelopes than the smooth patterns you can see for precipitation records.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_BC(BC2010_ras-BCq_ras, Shp = Shape_shp, which = 12:19)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/BC_Q2-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I hope that the above has clearly demonstrated on thing:&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;Choice of water availability variable has strong implications for how we quantify bioclimatic envelopes.&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;extreme-value-calculations&#34;&gt;Extreme Value Calculations&lt;/h2&gt;
&lt;p&gt;Lastly, let us concern ourselves with the retrieval of extreme climate metrics which will affect almost all of our temperature-reliant bioclimatic variables.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Extreme event calculation is highly relevant for our understanding of bioclimatic envelopes and often turns into a blackbox exercise.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    With &lt;code&gt;KrigR&lt;/code&gt;, you can decide how to calculate extreme metrics.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So far, we have calculated monthly minimum and maximum temperatures from daily aggregates. However, with &lt;code&gt;KrigR::BioClim()&lt;/code&gt; we can also obtain these extremes from hourly records simply by changing &lt;code&gt;T_res&lt;/code&gt;:&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file if download &amp; processing takes too long:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/Hourly_BC.nc&#34;&gt;Hourly_BC.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if(file.exists(file.path(Dir.Data, &amp;quot;Hourly_BC.nc&amp;quot;))){
  BCh_ras &amp;lt;- stack(file.path(Dir.Data, &amp;quot;Hourly_BC.nc&amp;quot;))
}else{
  BCh_ras &amp;lt;- BioClim(
    Water_Var = &amp;quot;volumetric_soil_water_layer_1&amp;quot;,
    Y_start = 2010,
    Y_end = 2020,
    T_res = &amp;quot;hour&amp;quot;,
    Extent = Shape_shp,
    Dir = Dir.Data,
    Keep_Monthly = FALSE,
    FileName = &amp;quot;Hourly_BC&amp;quot;,
    API_User = API_User,
    API_Key = API_Key,
    Cores = numberOfCores,
    TimeOut = Inf,
    SingularDL = TRUE
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once again, let me plot the outcome of this.&lt;/p&gt;
&lt;h3 id=&#34;annual-temperature-1&#34;&gt;Annual Temperature&lt;/h3&gt;
&lt;p&gt;The differences in annual temperature are negligible and only arise through slight deviations in hourly aggregates to monthly aggregates and daily aggregates.&lt;/p&gt;
&lt;details&gt;&lt;summary&gt; Click here for the plot &lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_BC(BCq_ras - BCh_ras, Shp = Shape_shp, Water_Var = &amp;quot;Soil Moisture&amp;quot;, which = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/BC_Diff1-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;h3 id=&#34;temperatures-2&#34;&gt;Temperatures&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s bundle the differences for all remaining temperature-related bioclimatic variables.&lt;/p&gt;
&lt;p&gt;You will immediately see that all metrics reliant of mean values such as BIO4 and BIO8-BIO11 remain almost completely unaltered when using hourly aggregates. The stark differences manifest in all temperature-extreme variables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_BC(BCq_ras - BCh_ras, Shp = Shape_shp, Water_Var = &amp;quot;Soil Moisture&amp;quot;, which = 2:11)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/BC_Diff2-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Extraction of extremes at an hourly resolution amplifies said extremes.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;water-availability-2&#34;&gt;Water Availability&lt;/h3&gt;
&lt;p&gt;Unsurprisingly, there are no changes to our quantification of water availability metrics. You may plot this for yourself if you are interested.&lt;/p&gt;
&lt;p&gt;I hope that the above has clearly demonstrated on thing:&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;Choice of temporal resolution of extreme metrics changes how we quantify bioclimatic envelopes drastically.&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;kriging-bioclimatic-products&#34;&gt;Kriging Bioclimatic Products&lt;/h2&gt;
&lt;p&gt;You might be unhappy with the spatial resolution of the bioclimatic data products generated through &lt;code&gt;KrigR::BioClim()&lt;/code&gt;. You can remedy this through statistical interpolation which is conveniently built into &lt;code&gt;KrigR&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you do so, you do it at your own risk as I can not guarantee that the results will always be sensible. Investigate them before using them. It would be wiser to downscale the underlying data rather than the finished product, but I don&amp;rsquo;t feel like spending days on end kriging the underlying data so instead I show you how kriging can be performed, but I do so for the entire product.&lt;/p&gt;
&lt;p&gt;Since I mentioned earlier that statistical interpolation of precipitation data is fraught with errors, I am demonstrating how to downscale the soil moisture product (&lt;code&gt;BCq_ras&lt;/code&gt;). We have demonstrated capability of downscaling soil moisture data reliably using Kriging in this 
&lt;a href=&#34;https://iopscience.iop.org/article/10.1088/1748-9326/ac39bf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this publication (Figure 3)&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;temperatures-3&#34;&gt;Temperatures&lt;/h3&gt;
&lt;p&gt;Here, we follow the same basic kriging steps as demonstrated 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/kriging/&#34;&gt;previously&lt;/a&gt; in this workshop material.&lt;/p&gt;
&lt;p&gt;First, we create our DEM covariate rasters:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Covs_ls &amp;lt;- download_DEM(Train_ras = BCq_ras,
                        Target_res = .02,
                        Shape = Shape_shp,
                        Dir = Dir.Covariates,
                        Keep_Temporary = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we carry out the interpolation. A few things of note here: (1) I only hand the first 11 layers to the kriging call because those are the temperature data, (2) I leave out the &lt;code&gt;Cores&lt;/code&gt; argument, so that &lt;code&gt;krigR()&lt;/code&gt; determines how many cores your machine has and uses all of them to speed up the computation of the multi-layer raster, and (3) I set &lt;code&gt;nmax&lt;/code&gt; to 80 to approximate a typical weather system in size:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;BC_Temperature_Krig &amp;lt;- krigR(Data = BCq_ras[[1:11]],
      Covariates_coarse = Covs_ls[[1]],
      Covariates_fine = Covs_ls[[2]],
      Keep_Temporary = FALSE,
      nmax = 80,
      FileName = &amp;quot;BC_Temperature_Krig&amp;quot;,
      Dir = Dir.Exports
      )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Commencing Kriging
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
  |                                                                                      
  |                                                                                |   0%
  |                                                                                      
  |=======                                                                         |   9%
  |                                                                                      
  |===============                                                                 |  18%
  |                                                                                      
  |======================                                                          |  27%
  |                                                                                      
  |=============================                                                   |  36%
  |                                                                                      
  |====================================                                            |  45%
  |                                                                                      
  |============================================                                    |  55%
  |                                                                                      
  |===================================================                             |  64%
  |                                                                                      
  |==========================================================                      |  73%
  |                                                                                      
  |=================================================================               |  82%
  |                                                                                      
  |=========================================================================       |  91%
  |                                                                                      
  |================================================================================| 100%
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: [writeCDF] for better results use file extension &#39;.nc&#39; or &#39;.cdf&#39;
## see: https://stackoverflow.com/a/65398262/635245
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: [rast] unknown extent
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: [writeCDF] for better results use file extension &#39;.nc&#39; or &#39;.cdf&#39;
## see: https://stackoverflow.com/a/65398262/635245
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: [rast] unknown extent
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we analyse the outputs of our plotting exercise. I break these up into smaller chunks for easier digestion.&lt;/p&gt;
&lt;h4 id=&#34;bio1---annual-mean-temperature&#34;&gt;BIO1 - Annual Mean Temperature&lt;/h4&gt;
&lt;div class=&#34;alert alert-normal&#34;&gt;
  &lt;div&gt;
    Interpolating this data is just like statistically downscaling any other temperature product and can be done without any problems.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for plotting call and plot:&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(lapply(BC_Temperature_Krig[-3], &amp;quot;[[&amp;quot;, 1), 
           Shp = Shape_shp,
           Dates = &amp;quot;BIO1 - Annual Mean Temperature&amp;quot;
           )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;/details&gt; 
&lt;h4 id=&#34;bio2---mean-diurnal-range&#34;&gt;BIO2 - Mean Diurnal Range&lt;/h4&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    This data product is calculated from extreme values and would be interpolated better by first statistically downscaling the underlying data rather than the final bioclimatic variable.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for plotting call and plot:&lt;/summary&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    The smooth patterns in this plot clearly highlight the issue with using &lt;code&gt;krigr()&lt;/code&gt; on the final bioclimatic product.
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(lapply(BC_Temperature_Krig[-3], &amp;quot;[[&amp;quot;, 2), 
           Shp = Shape_shp,
           Dates = &amp;quot;BIO2 - Mean Diurnal Range&amp;quot;
           )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&#34;bio3---isothermality&#34;&gt;BIO3 - Isothermality&lt;/h4&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    This data product is calculated from BIO2 and BIO7 and thus relies on extreme values. Conclusively, it would be interpolated better by first statistically downscaling the underlying data rather than the final bioclimatic variable.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for plotting call and plot:&lt;/summary&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    The smooth patterns in this plot clearly highlight the issue with using &lt;code&gt;krigr()&lt;/code&gt; on the final bioclimatic product.
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(lapply(BC_Temperature_Krig[-3], &amp;quot;[[&amp;quot;, 3), 
           Shp = Shape_shp,
           Dates = &amp;quot;BIO3 - Isothermality&amp;quot;
           )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&#34;bio4---temperature-seasonality&#34;&gt;BIO4 - Temperature Seasonality&lt;/h4&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    This data product is calculated using the standard deviation of mean values throughout our time frame. Conclusively, it would be interpolated better by first statistically downscaling the underlying data rather than the final bioclimatic variable.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for plotting call and plot:&lt;/summary&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    The smooth patterns in this plot clearly highlight the issue with using &lt;code&gt;krigr()&lt;/code&gt; on the final bioclimatic product.
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(lapply(BC_Temperature_Krig[-3], &amp;quot;[[&amp;quot;, 4), 
           Shp = Shape_shp,
           Dates = &amp;quot;BIO4 - Temperature Seasonality&amp;quot;
           )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&#34;bio5---max-temperature-of-warmest-month&#34;&gt;BIO5 - Max Temperature of Warmest Month&lt;/h4&gt;
&lt;div class=&#34;alert alert-normal&#34;&gt;
  &lt;div&gt;
    Interpolating this data is just like statistically downscaling any other temperature product and can be done without any problems.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for plotting call and plot:&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(lapply(BC_Temperature_Krig[-3], &amp;quot;[[&amp;quot;, 5), 
           Shp = Shape_shp,
           Dates = c(&amp;quot;BIO5 - Max Temperature of Warmest Month&amp;quot;)
           )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&#34;bio6---min-temperature-of-coldest-month&#34;&gt;BIO6 - Min Temperature of Coldest Month&lt;/h4&gt;
&lt;div class=&#34;alert alert-normal&#34;&gt;
  &lt;div&gt;
    Interpolating this data is just like statistically downscaling any other temperature product and can be done without any problems.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for plotting call and plot:&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(lapply(BC_Temperature_Krig[-3], &amp;quot;[[&amp;quot;, 6), 
           Shp = Shape_shp,
           Dates = &amp;quot;BIO6 - Min Temperature of Coldest Month&amp;quot;
           )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&#34;bio7---temperature-annual-range-bio5-bio6&#34;&gt;BIO7 - Temperature Annual Range (BIO5-BIO6)&lt;/h4&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    This data product is calculated from BIO5 and BIO6 and thus relies on extreme values. Conclusively, it would be interpolated better by first statistically downscaling the underlying data rather than the final bioclimatic variable.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for plotting call and plot:&lt;/summary&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    The smooth patterns in this plot clearly highlight the issue with using &lt;code&gt;krigr()&lt;/code&gt; on the final bioclimatic product.
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(lapply(BC_Temperature_Krig[-3], &amp;quot;[[&amp;quot;, 7), 
           Shp = Shape_shp,
           Dates = &amp;quot;BIO7 - Temperature Annual Range (BIO5-BIO6)&amp;quot;
           )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Since BIO5 and BIO6 can be interpolated well themselves, one may chose to use the downscaled versions of BIO5 and BIO6 to create a downscaled version of BIO7.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Doing so, however, raises the question of how to integrate the downscaling uncertainty associated with BIO5 and BIO6 into the product for BIO7. I have submitted a research proposal to assess best practice for issues like these.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for calculation, plotting call, and plot:&lt;/summary&gt;
&lt;p&gt;Here, I visualise the differences between the interpolated BIO7 and the recalculated BIO7 (from interpolated BIO5 and BIO6):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;BIO7 &amp;lt;- lapply(BC_Temperature_Krig[1], &amp;quot;[[&amp;quot;, 5)[[1]] - lapply(BC_Temperature_Krig[1], &amp;quot;[[&amp;quot;, 6)[[1]]
Plot_Raw(lapply(BC_Temperature_Krig[1], &amp;quot;[[&amp;quot;, 7)[[1]]-BIO7, 
         Shp = Shape_shp,
         Dates = &amp;quot;BIO7 - Temperature Annual Range (BIO5-BIO6)&amp;quot;
         )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To be fair, these differences are rather small when compared to the data range in BIO7.&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&#34;bio8--bio9---temperatures-of-wettest-and-driest-quarter&#34;&gt;BIO8 &amp;amp; BIO9 - Temperatures of Wettest and Driest Quarter&lt;/h4&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;I do not recommend you use these kriging outputs!&lt;/strong&gt; They rely on water availability data which is not being interpolated here. Subsequently, the patchiness of the underlying data is lost and with it: information.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for plotting call and plot:&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(lapply(BC_Temperature_Krig[-3], &amp;quot;[[&amp;quot;, 8:9), 
           Shp = Shape_shp,
           Dates = c(&amp;quot;BIO8 - Mean Temperature of Wettest Quarter&amp;quot;, 
                     &amp;quot;BIO9 - Mean Temperature of Driest Quarter&amp;quot;)
           )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&#34;bio10--bio11---temperatures-of-warmest-and-coldest-quarter&#34;&gt;BIO10 &amp;amp; BIO11 - Temperatures of Warmest and Coldest Quarter&lt;/h4&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;I do not recommend you use these kriging outputs!&lt;/strong&gt; They rely on mean quarterly temperature data which is not being interpolated here. Subsequently, the patchiness of the underlying data is lost and with it: information.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for plotting call and plot:&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(lapply(BC_Temperature_Krig[-3], &amp;quot;[[&amp;quot;, 10:11), 
           Shp = Shape_shp,
           Dates = c(&amp;quot;BIO10 - Mean Temperature of Warmest Quarter&amp;quot;, 
                     &amp;quot;BIO11 - Mean Temperature of Coldest Quarter&amp;quot;)
           )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-bioclim_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;h3 id=&#34;water-availability-3&#34;&gt;Water Availability&lt;/h3&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Statistical downscaling of non-temperature data usually requires more than just elevation covariates.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    With &lt;code&gt;KrigR&lt;/code&gt;, you can use different sets of covariates. I demonstrate this in the workshop material regarding &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/third-party/#third-party-data-covariates&#34;&gt;third-party covariates&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;session-info&#34;&gt;Session Info&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.2.3 (2023-03-15)
## Platform: x86_64-apple-darwin17.0 (64-bit)
## Running under: macOS Big Sur ... 10.16
## 
## Matrix products: default
## BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] parallel  stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] mapview_2.11.0          rnaturalearthdata_0.1.0 rnaturalearth_0.3.2    
##  [4] gimms_1.2.1             ggmap_3.0.2             cowplot_1.1.1          
##  [7] viridis_0.6.2           viridisLite_0.4.1       ggplot2_3.4.1          
## [10] tidyr_1.3.0             KrigR_0.1.2             terra_1.7-21           
## [13] httr_1.4.5              stars_0.6-0             abind_1.4-5            
## [16] fasterize_1.0.4         sf_1.0-12               lubridate_1.9.2        
## [19] automap_1.1-9           doSNOW_1.0.20           snow_0.4-4             
## [22] doParallel_1.0.17       iterators_1.0.14        foreach_1.5.2          
## [25] rgdal_1.6-5             raster_3.6-20           sp_1.6-0               
## [28] stringr_1.5.0           keyring_1.3.1           ecmwfr_1.5.0           
## [31] ncdf4_1.21             
## 
## loaded via a namespace (and not attached):
##  [1] leafem_0.2.0             colorspace_2.1-0         class_7.3-21            
##  [4] leaflet_2.1.2            satellite_1.0.4          base64enc_0.1-3         
##  [7] rstudioapi_0.14          proxy_0.4-27             farver_2.1.1            
## [10] fansi_1.0.4              codetools_0.2-19         cachem_1.0.7            
## [13] knitr_1.42               jsonlite_1.8.4           png_0.1-8               
## [16] Kendall_2.2.1            compiler_4.2.3           assertthat_0.2.1        
## [19] fastmap_1.1.1            cli_3.6.0                htmltools_0.5.4         
## [22] tools_4.2.3              gtable_0.3.1             glue_1.6.2              
## [25] dplyr_1.1.0              Rcpp_1.0.10              jquerylib_0.1.4         
## [28] vctrs_0.6.1              blogdown_1.16            crosstalk_1.2.0         
## [31] lwgeom_0.2-11            xfun_0.37                timechange_0.2.0        
## [34] lifecycle_1.0.3          rnaturalearthhires_0.2.1 zoo_1.8-11              
## [37] scales_1.2.1             gstat_2.1-0              yaml_2.3.7              
## [40] curl_5.0.0               memoise_2.0.1            gridExtra_2.3           
## [43] sass_0.4.5               reshape_0.8.9            stringi_1.7.12          
## [46] highr_0.10               e1071_1.7-13             boot_1.3-28.1           
## [49] intervals_0.15.3         RgoogleMaps_1.4.5.3      rlang_1.1.0             
## [52] pkgconfig_2.0.3          bitops_1.0-7             evaluate_0.20           
## [55] lattice_0.20-45          purrr_1.0.1              htmlwidgets_1.6.1       
## [58] labeling_0.4.2           tidyselect_1.2.0         plyr_1.8.8              
## [61] magrittr_2.0.3           bookdown_0.33            R6_2.5.1                
## [64] generics_0.1.3           DBI_1.1.3                pillar_1.8.1            
## [67] withr_2.5.0              units_0.8-1              xts_0.13.0              
## [70] tibble_3.2.1             spacetime_1.2-8          KernSmooth_2.23-20      
## [73] utf8_1.2.3               rmarkdown_2.20           jpeg_0.1-10             
## [76] grid_4.2.3               zyp_0.11-1               FNN_1.1.3.2             
## [79] digest_0.6.31            classInt_0.4-9           webshot_0.5.4           
## [82] stats4_4.2.3             munsell_0.5.0            bslib_0.4.2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Third-Party Data</title>
      <link>https://www.erikkusch.com/courses/krigr/third-party/</link>
      <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/krigr/third-party/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;&lt;code&gt;KrigR&lt;/code&gt; is currently undergoing development. As a result, this part of the workshop has become deprecated. Please refer to the &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/setup/&#34;&gt;setup&lt;/a&gt; &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/quickstart/&#34;&gt;quick guide&lt;/a&gt; portions of this material as these are up-to-date. &lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    This part of the workshop is dependant on set-up and preparation done previously &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/prep/&#34;&gt;here&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First, we load &lt;code&gt;KrigR&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(KrigR)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;matching-third-party-data&#34;&gt;Matching Third-Party Data&lt;/h2&gt;
&lt;p&gt;I expect that you won&amp;rsquo;t want to downscale to specific resolutions most of the time, but rather, match an already existing spatial data set in terms of spatial resolution and extent. Again, the &lt;code&gt;KrigR&lt;/code&gt; package got you covered!&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Usually, you probably want to downscale data to match a certain pre-existing data set rather than a certain resolution.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here, we illustrate this with an NDVI-based example. The NDVI is a satellite-derived vegetation index which tells us how green the Earth is. It comes in bi-weekly intervals and at a spatial resolution of &lt;code&gt;.08333&lt;/code&gt; (roughly 9km). Here, we download all NDVI data for the year 2015 and then create the annual mean. This time, we do so for all of Germany because of its size and topographical variety.&lt;/p&gt;
&lt;h3 id=&#34;third-party-data&#34;&gt;Third-Party Data&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Shape_shp &amp;lt;- ne_countries(country = &amp;quot;Germany&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## downloading gimms data
gimms_files &amp;lt;- downloadGimms(x = as.Date(&amp;quot;2015-01-01&amp;quot;), # download from January 1982
                             y = as.Date(&amp;quot;2015-12-31&amp;quot;), # download to December 1982
                             dsn = Dir.Data, # save downloads in data folder
                             quiet = FALSE # show download progress
                             )
## prcoessing gimms data
gimms_raster &amp;lt;- rasterizeGimms(x = gimms_files, # the data we rasterize
                               remove_header = TRUE # we don&#39;t need the header of the data
                               )
indices &amp;lt;- monthlyIndices(gimms_files) # generate month indices from the data
gimms_raster_mvc &amp;lt;- monthlyComposite(gimms_raster, # the data
                                     indices = indices # the indices
                                     )
Negatives &amp;lt;- which(values(gimms_raster_mvc) &amp;lt; 0) # identify all negative values
values(gimms_raster_mvc)[Negatives] &amp;lt;- 0 # set threshold for barren land (NDVI&amp;lt;0)
gimms_raster_mvc &amp;lt;- crop(gimms_raster_mvc, extent(Shape_shp)) # crop to extent
gimms_mask &amp;lt;- KrigR::mask_Shape(gimms_raster_mvc[[1]], Shape = Shape_shp) # create mask ith KrigR-internal function to ensure all edge cells are contained
NDVI_ras &amp;lt;- mask(gimms_raster_mvc, gimms_mask) # mask out shape
NDVI_ras &amp;lt;- calc(NDVI_ras, fun = mean, na.rm = TRUE) # annual mean
writeRaster(NDVI_ras, format = &amp;quot;CDF&amp;quot;, file = file.path(Dir.Data, &amp;quot;NDVI&amp;quot;)) # save file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what does this raster look like?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;NDVI_ras
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class      : RasterStack 
## dimensions : 92, 108, 9936, 1  (nrow, ncol, ncell, nlayers)
## resolution : 0.08333333, 0.08333333  (x, y)
## extent     : 6, 15, 47.33333, 55  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## names      :     layer 
## min values : 0.2430333 
## max values : 0.8339083
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And a visualisation of the same:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Raw(NDVI_ras, 
         Shp = Shape_shp,
         Dates = &amp;quot;Mean NDVI 2015&amp;quot;, 
         COL = viridis(100, begin = 0.5, direction = -1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-third-party_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;1440&#34; /&gt;
As stated above, we want to match this with our output.&lt;/p&gt;
&lt;h3 id=&#34;krigr-workflow&#34;&gt;&lt;code&gt;KrigR&lt;/code&gt; Workflow&lt;/h3&gt;
&lt;p&gt;We could do this whole analysis in our three steps as outlined above, but why bother when the 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/quickstart/#the-pipeline&#34;&gt;pipeline&lt;/a&gt; gets the job done just as well?&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    Matching Kriging outputs with a pre-existing data set is as easy as plugging the pre-existing raster into the &lt;code&gt;Target_res&lt;/code&gt; argument of the &lt;code&gt;krigR()&lt;/code&gt; or the &lt;code&gt;download_DEM()&lt;/code&gt; function.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This time we want to downscale from ERA5 resolution (roughly 30km) because the ERA5-Land data already matches the NDVI resolution (roughly 9km). Here&amp;rsquo;s how we do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;NDVI_Krig &amp;lt;- krigR(
  ## download_ERA block
  Variable = &#39;2m_temperature&#39;,
  Type = &#39;reanalysis&#39;,
  DataSet = &#39;era5&#39;,
  DateStart = &#39;2015-01-01&#39;,
  DateStop = &#39;2015-12-31&#39;,
  TResolution = &#39;year&#39;,
  TStep = 1,
  Extent = Shape_shp,
  API_User = API_User,
  API_Key = API_Key,
  SingularDL = TRUE,
  ## download_DEM block
  Target_res = NDVI_ras,
  Source = &amp;quot;Drive&amp;quot;,
  ## krigR block
  Cores = 1,
  FileName = &amp;quot;AirTemp_NDVI.nc&amp;quot;,
  nmax = 80, 
  Dir = Dir.Exports)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## download_ERA() is starting. Depending on your specifications, this can take a significant time.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## User 39340 for cds service added successfully in keychain
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Staging 1 download(s).
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Staging your request as a singular download now. This can take a long time due to size of required product.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0001_2m_temperature_2015-01-01_2015-12-31_year.nc download queried
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Requesting data to the cds service with username 39340
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - staging data transfer at url endpoint or request id:
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   4d24fc1f-2be1-4b65-b588-be3ba2b5938b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - timeout set to 10.0 hours
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - polling server for a data transfer
\ polling server for a data transfer
| polling server for a data transfer
/ polling server for a data transfer
- polling server for a data transfer
\ polling server for a data transfer
| polling server for a data transfer
/ polling server for a data transfer
- polling server for a data transfer
\ polling server for a data transfer
| polling server for a data transfer
/ polling server for a data transfer
- polling server for a data transfer
\ polling server for a data transfer
| polling server for a data transfer
/ polling server for a data transfer
- polling server for a data transfer
\ polling server for a data transfer
| polling server for a data transfer
/ polling server for a data transfer
- polling server for a data transfer
\ polling server for a data transfer
| polling server for a data transfer
/ polling server for a data transfer
- polling server for a data transfer
## Downloading file
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
  |                                                                                      
  |                                                                                |   0%
  |                                                                                      
  |================================================================================| 100%
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## - moved temporary file to -&amp;gt; /Users/erikkus/Documents/HomePage/content/courses/krigr/Exports/0001_2m_temperature_2015-01-01_2015-12-31_year.nc
## - Delete data from queue for url endpoint or request id:
##   https://cds.climate.copernicus.eu/api/v2/tasks/4d24fc1f-2be1-4b65-b588-be3ba2b5938b
## 
## Checking for known data issues.
## Loading downloaded data for masking and aggregation.
## Masking according to shape/buffer polygon
## Aggregating to temporal resolution of choice
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
  |                                                                                      
  |                                                                                |   0%
  |                                                                                      
  |===========================                                                     |  33%
  |                                                                                      
  |=====================================================                           |  67%
  |                                                                                      
  |================================================================================| 100%
## 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Commencing Kriging
## Kriging of remaining 0 data layers should finish around: 2023-04-03 16:54:51
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
  |                                                                                      
  |                                                                                |   0%
  |                                                                                      
  |================================================================================| 100%
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So? Did we match the pre-existing data?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;NDVI_Krig[[1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class      : RasterBrick 
## dimensions : 92, 108, 9936, 1  (nrow, ncol, ncell, nlayers)
## resolution : 0.08333333, 0.08333333  (x, y)
## extent     : 6, 15, 47.33333, 55  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## source     : memory
## names      : var1.pred 
## min values :  275.9705 
## max values :  285.7357
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We nailed this!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take one final look at our (A) raw ERA5 data, (B) NDVI data, (C) Kriged ERA5 data, and (D) standard error of our Kriging output:&lt;/p&gt;
&lt;details&gt;&lt;summary&gt; Click here for download plotting calls &lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;### ERA-Plot
ERA_df &amp;lt;- as.data.frame(raster(file.path(Dir.Exports, &amp;quot;2m_temperature_2015-01-01_2015-12-31_year.nc&amp;quot;)), xy = TRUE) # turn raster into dataframe
colnames(ERA_df)[c(-1,-2)] &amp;lt;- &amp;quot;Air Temperature 2015 (ERA5)&amp;quot;
ERA_df &amp;lt;- gather(data = ERA_df, key = Values, value = &amp;quot;value&amp;quot;, colnames(ERA_df)[c(-1,-2)]) #  make ggplot-ready
Raw_plot &amp;lt;- ggplot() + # create a plot
  geom_raster(data = ERA_df , aes(x = x, y = y, fill = value)) + # plot the raw data
  facet_wrap(~Values) + # split raster layers up
  theme_bw() + labs(x = &amp;quot;Longitude&amp;quot;, y = &amp;quot;Latitude&amp;quot;) + # make plot more readable
  scale_fill_gradientn(name = &amp;quot;Air Temperature [K]&amp;quot;, colours = inferno(100)) + # add colour and legend
  geom_polygon(data = Shape_shp, aes(x = long, y = lat, group = group), colour = &amp;quot;black&amp;quot;, fill = &amp;quot;NA&amp;quot;) # add shape
### NDVI-Plot
NDVI_df &amp;lt;- as.data.frame(NDVI_ras, xy = TRUE) # turn raster into dataframe
colnames(NDVI_df)[c(-1,-2)] &amp;lt;- &amp;quot;NDVI 2015&amp;quot;
NDVI_df &amp;lt;- gather(data = NDVI_df, key = Values, value = &amp;quot;value&amp;quot;, colnames(NDVI_df)[c(-1,-2)]) #  make ggplot-ready
NDVI_plot &amp;lt;- ggplot() + # create a plot
  geom_raster(data = NDVI_df , aes(x = x, y = y, fill = value)) + # plot the raw data
  facet_wrap(~Values) + # split raster layers up
  theme_bw() + labs(x = &amp;quot;Longitude&amp;quot;, y = &amp;quot;Latitude&amp;quot;) + # make plot more readable
  scale_fill_gradientn(name = &amp;quot;NDVI&amp;quot;, colours = rev(terrain.colors(100))) + # add colour and legend
  geom_polygon(data = Shape_shp, aes(x = long, y = lat, group = group), colour = &amp;quot;black&amp;quot;, fill = &amp;quot;NA&amp;quot;) # add shape
### KRIGED-Plots
Dates = c(&amp;quot;Kriged Air Temperature 2015 (NDVI Resolution)&amp;quot;)
Type_vec &amp;lt;- c(&amp;quot;Prediction&amp;quot;, &amp;quot;Standard Error&amp;quot;) # these are the output types of krigR
Colours_ls &amp;lt;- list(inferno(100), rev(viridis(100))) # we want separate colours for the types
Plots_ls &amp;lt;- as.list(NA, NA) # this list will be filled with the output plots
KrigDF_ls &amp;lt;- as.list(NA, NA) # this list will be filled with the output data
for(Plot in 1:2){ # loop over both output types
  Krig_df &amp;lt;- as.data.frame(NDVI_Krig[[Plot]], xy = TRUE) # turn raster into dataframe
  colnames(Krig_df)[c(-1,-2)] &amp;lt;- paste(Type_vec[Plot], Dates) # set colnames
  Krig_df &amp;lt;- gather(data = Krig_df, key = Values, value = &amp;quot;value&amp;quot;, colnames(Krig_df)[c(-1,-2)]) # make ggplot-ready
  Plots_ls[[Plot]] &amp;lt;- ggplot() + # create plot
    geom_raster(data = Krig_df , aes(x = x, y = y, fill = value)) + # plot the kriged data
    facet_wrap(~Values) + # split raster layers up
    theme_bw() + labs(x = &amp;quot;Longitude&amp;quot;, y = &amp;quot;Latitude&amp;quot;) + # make plot more readable
    scale_fill_gradientn(name = &amp;quot;Air Temperature [K]&amp;quot;, colours = Colours_ls[[Plot]]) + # add colour and legend
    theme(plot.margin = unit(c(0, 0, 0, 0), &amp;quot;cm&amp;quot;)) + # reduce margins (for fusing of plots)
    geom_polygon(data = Shape_shp, aes(x = long, y = lat, group = group), colour = &amp;quot;black&amp;quot;, fill = &amp;quot;NA&amp;quot;) # add shape
  KrigDF_ls[[Plot]] &amp;lt;- Krig_df
} # end of type-loop
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot_grid(plotlist = list(Raw_plot, NDVI_plot, Plots_ls[[1]], Plots_ls[[2]]), 
          nrow = 2, labels = &amp;quot;AUTO&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-third-party_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So what can we learn from this? Let&amp;rsquo;s plot the relation between temperature and NDVI:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot_df &amp;lt;- as.data.frame(cbind(KrigDF_ls[[1]][,4], 
                               KrigDF_ls[[2]][,4],
                               NDVI_df[,4]))
colnames(plot_df) &amp;lt;- c(&amp;quot;Temperature&amp;quot;, &amp;quot;Uncertainty&amp;quot;, &amp;quot;NDVI&amp;quot;)
ggplot(plot_df,
       aes(x = Temperature, y = NDVI, size = Uncertainty)) + 
  geom_point(alpha = 0.15) + 
  theme_bw()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-third-party_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Looks like NDVI increases as mean annual temperatures rise, but reaches a peak around 281-282 Kelvin with a subsequent decrease as mean annual temperatures rise higher.&lt;/p&gt;
&lt;h2 id=&#34;using-third-party-data&#34;&gt;Using Third-Party Data&lt;/h2&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;ATTENTION:&lt;/strong&gt; Kriging only works on &lt;strong&gt;square-cell spatial products&lt;/strong&gt;!
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;krigR()&lt;/code&gt; function is designed to work with non-ERA5(-Land) data as well as non-GMTED2010 covariate data. To downscale your own spatial products using different covariate data than the GMTED2010 DEM we use as a default, you need to step into the three-step workflow.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Most spatial products won&amp;rsquo;t be reliably downscaled using only elevation covariate data.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;krigR()&lt;/code&gt; supports any combination of ERA5-family reanalysis, GMTED2010, third-party climate data, and third-party covariate data. Here, we just demonstrate the use of other covariates than the GMTED2010 used by &lt;code&gt;KrigR&lt;/code&gt; by default.&lt;/p&gt;
&lt;p&gt;The product we will focus on here is the soil moisture data contained in our &lt;code&gt;BCq_ras&lt;/code&gt; product established 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/bioclim/#water-availability-variables&#34;&gt;here&lt;/a&gt;. With this data set, we also revert back to our original 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/prep/#shape-of-interest-spatialpolygons&#34;&gt;study region&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;The reason we focus on soil moisture for this exercise? In 
&lt;a href=&#34;https://iopscience.iop.org/article/10.1088/1748-9326/ac39bf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this publication (Figure 3)&lt;/a&gt;, we demonstrate that soil moisture data can be statistically downscales using kriging with some third-party covariates. As such, we pick up from where we left off when we discussed 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/bioclim/#water-availability-3&#34;&gt;kriging of bioclimatic products&lt;/a&gt;.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file:&lt;/summary&gt;
      Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/Qsoil_BC.nc&#34;&gt;Qsoil_BC.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;BCq_ras &amp;lt;- stack(file.path(Dir.Data, &amp;quot;Qsoil_BC.nc&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;third-party-data-covariates&#34;&gt;Third-Party Data Covariates&lt;/h3&gt;
&lt;p&gt;In 
&lt;a href=&#34;https://iopscience.iop.org/article/10.1088/1748-9326/ac39bf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this publication&lt;/a&gt;, we demonstrate how soil moisture data can be reliably statistically downscaled using soil property data which we obtain from the 
&lt;a href=&#34;http://globalchange.bnu.edu.cn/research/soil4.jsp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Land-Atmosphere Interaction Research Group at Sun Yat-sen University&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Below, you will find the code needed to obtain the data of global coverage at roughly 1km spatial resolution. The code chunk below also crops and masks the data according to our study region and subsequently deletes the storage-heavy global files (3.5GB each in size). This process takes a long time due to download speeds.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for the covariate file to save yourself downloading and processing of global data:&lt;/summary&gt;
      Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Covariates/SoilCovs.nc&#34;&gt;SoilCovs.nc&lt;/a&gt; and place it into your covariates directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# documentation of these can be found here http://globalchange.bnu.edu.cn/research/soil4.jsp
SoilCovs_vec &amp;lt;- c(&amp;quot;tkdry&amp;quot;, &amp;quot;tksat&amp;quot;, &amp;quot;csol&amp;quot;, &amp;quot;k_s&amp;quot;, &amp;quot;lambda&amp;quot;, &amp;quot;psi&amp;quot;, &amp;quot;theta_s&amp;quot;) # need these names for addressing soil covariates
if(!file.exists(file.path(Dir.Covariates, &amp;quot;SoilCovs.nc&amp;quot;))){
  print(&amp;quot;#### Loading SOIL PROPERTY covariate data. ####&amp;quot;) 
  # create lists to combine soil data into one
  SoilCovs_ls &amp;lt;- as.list(rep(NA, length(SoilCovs_vec)))
  names(SoilCovs_ls) &amp;lt;- c(SoilCovs_vec)
  ## Downloading, unpacking, and loading
  for(Soil_Iter in SoilCovs_vec){
    if(!file.exists(file.path(Dir.Covariates, paste0(Soil_Iter, &amp;quot;.nc&amp;quot;)))) { # if not downloaded and processed yet
      print(paste(&amp;quot;Handling&amp;quot;, Soil_Iter, &amp;quot;data.&amp;quot;))
      Dir.Soil &amp;lt;- file.path(Dir.Covariates, Soil_Iter)
      dir.create(Dir.Soil)
      download.file(paste0(&amp;quot;http://globalchange.bnu.edu.cn/download/data/worldptf/&amp;quot;, Soil_Iter,&amp;quot;.zip&amp;quot;),
                    destfile = file.path(Dir.Soil, paste0(Soil_Iter, &amp;quot;.zip&amp;quot;))
      ) # download data
      unzip(file.path(Dir.Soil, paste0(Soil_Iter, &amp;quot;.zip&amp;quot;)), exdir = Dir.Soil) # unzip data
      File &amp;lt;- list.files(Dir.Soil, pattern = &amp;quot;.nc&amp;quot;)[1] # only keep first soil layer
      Soil_ras &amp;lt;- raster(file.path(Dir.Soil, File)) # load data
      SoilCovs_ls[[which(names(SoilCovs_ls) == Soil_Iter)]] &amp;lt;- Soil_ras # save to list
      writeRaster(x = Soil_ras, filename = file.path(Dir.Covariates, Soil_Iter), format = &amp;quot;CDF&amp;quot;)
      unlink(Dir.Soil, recursive = TRUE)
    }else{
      print(paste(Soil_Iter, &amp;quot;already downloaded and processed.&amp;quot;))
      SoilCovs_ls[[which(names(SoilCovs_ls) == Soil_Iter)]] &amp;lt;- raster(file.path(Dir.Covariates, paste0(Soil_Iter, &amp;quot;.nc&amp;quot;)))
    }
  }
  ## data handling and manipulation
  SoilCovs_stack &amp;lt;- stack(SoilCovs_ls) # stacking raster layers from list
  SoilCovs_stack &amp;lt;- crop(SoilCovs_stack, extent(BCq_ras)) # cropping to extent of data we have
  SoilCovs_mask &amp;lt;- KrigR::mask_Shape(SoilCovs_stack[[1]], Shape = Shape_shp) # create mask with KrigR-internal function to ensure all edge cells are contained
  SoilCovs_stack &amp;lt;- mask(SoilCovs_stack, SoilCovs_mask) # mask out shape
  ## writing the data
  writeRaster(x = SoilCovs_stack, filename = file.path(Dir.Covariates, &amp;quot;SoilCovs&amp;quot;), format = &amp;quot;CDF&amp;quot;)
  ## removing the global files due to their size
  unlink(file.path(Dir.Covariates, paste0(SoilCovs_vec, &amp;quot;.nc&amp;quot;)))
}
SoilCovs_stack &amp;lt;- stack(file.path(Dir.Covariates, &amp;quot;SoilCovs.nc&amp;quot;))
names(SoilCovs_stack) &amp;lt;- SoilCovs_vec
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s have a look at these data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;SoilCovs_stack
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class      : RasterStack 
## dimensions : 408, 648, 264384, 7  (nrow, ncol, ncell, nlayers)
## resolution : 0.008333333, 0.008333333  (x, y)
## extent     : 9.725, 15.125, 49.75, 53.15  (xmin, xmax, ymin, ymax)
## crs        : +proj=longlat +datum=WGS84 +no_defs 
## names      :         tkdry,         tksat,          csol,           k_s,        lambda,           psi,       theta_s 
## min values :  5.200000e-02,  1.337000e+00,  2.141000e+06,  5.212523e+00,  8.600000e-02, -5.307258e+01,  3.230000e-01 
## max values :  2.070000e-01,  2.862000e+00,  2.346400e+06,  2.461686e+02,  3.330000e-01, -5.205317e+00,  5.320000e-01
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to establish target and training resolution of our covariate data.&lt;/p&gt;
&lt;p&gt;First, we focus on the training resolution covariate data. We match our covariate data to our spatial product which we wish to downscale by resampling the covariate data to the coarser resolution:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Coarsecovs &amp;lt;- resample(x = SoilCovs_stack, y = BCq_ras)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Second, we aggregate the covariate data to our desired resolution. In this case, 0.02 as done previously 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/bioclim/#kriging-bioclimatic-products&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Finecovs &amp;lt;- aggregate(SoilCovs_stack, fact = 0.02/res(SoilCovs_stack)[1])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we combine these into a list like the output of &lt;code&gt;download_DEM()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Covs_ls &amp;lt;- list(Coarsecovs, Finecovs)
Plot_Covs(Covs = Covs_ls, Shape_shp)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-third-party_files/figure-html/SoilCovs-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    Our &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/outlook/&#34;&gt;development goals&lt;/a&gt; include creating a function that automatically carries out all of the above for you with a specification alike to &lt;code&gt;download_DEM()&lt;/code&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;kriging-third-party-data&#34;&gt;Kriging Third-Party Data&lt;/h3&gt;
&lt;p&gt;Finally, we can statistically downscale our soil moisture data using the soil property covariates. For this, we need to specify a new &lt;code&gt;KrigingEquation&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    With the &lt;code&gt;KrigingEquation&lt;/code&gt; argument, you may specify non-linear combinations of covariates for your call to &lt;code&gt;krigR()&lt;/code&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    If you don&amp;rsquo;t specify a &lt;code&gt;KrigingEquation&lt;/code&gt; in &lt;code&gt;krigR()&lt;/code&gt; and your covariates do not contain a layer called &lt;code&gt;&amp;quot;DEM&amp;quot;&lt;/code&gt;, &lt;code&gt;krigR()&lt;/code&gt; will notify you that its default formula cannot be executed and will attempt to build an additive formula from the data it can find. &lt;code&gt;krigr()&lt;/code&gt; will inform you of this and ask for your approval before proceeding.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This auto-generated formula would be the same as the one we specify here - an additive combination of all covariates found both at coarse and fine resolutions. Of course, this formula can also be specified to reflect interactive effects.&lt;/p&gt;
&lt;p&gt;Here, I automate the generation of our &lt;code&gt;KrigingEquation&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;KrigingEquation &amp;lt;- paste0(&amp;quot;ERA ~ &amp;quot;, paste(SoilCovs_vec, collapse = &amp;quot; + &amp;quot;))
KrigingEquation
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;ERA ~ tkdry + tksat + csol + k_s + lambda + psi + theta_s&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In accordance with our 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/bioclim/#temperatures-3&#34;&gt;downscaling of the temperature-portion of the bioclimatic data&lt;/a&gt;, (1) I only hand the last 8 layers to the kriging call because those are the soil moisture data, (2) I leave out the &lt;code&gt;Cores&lt;/code&gt; argument, so that &lt;code&gt;krigR()&lt;/code&gt; determines how many cores your machine has and uses all of them to speed up the computation of the multi-layer raster, and (3) I set &lt;code&gt;nmax&lt;/code&gt; to 80 to approximate a typical weather system in size:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;BC_Water_Krig  &amp;lt;- krigR(Data = BCq_ras[[12:19]], 
                    Covariates_coarse = Covs_ls[[1]], 
                    Covariates_fine = Covs_ls[[2]],
                    KrigingEquation = KrigingEquation, 
                    FileName = &amp;quot;BC_Water_Krig&amp;quot;,
                    Dir = Dir.Covariates,
                    nmax = 80
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: [writeCDF] for better results use file extension &#39;.nc&#39; or &#39;.cdf&#39;
## see: https://stackoverflow.com/a/65398262/635245
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: [rast] unknown extent
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: [writeCDF] for better results use file extension &#39;.nc&#39; or &#39;.cdf&#39;
## see: https://stackoverflow.com/a/65398262/635245
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: [rast] unknown extent
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;bio12---annual-mean-soil-moisture&#34;&gt;BIO12 - Annual Mean Soil Moisture&lt;/h4&gt;
&lt;div class=&#34;alert alert-normal&#34;&gt;
  &lt;div&gt;
    Interpolating this data is just like statistically downscaling any other soil moisture product and can be done without any problems.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for plotting call and plot:&lt;/summary&gt;
&lt;div class=&#34;alert alert-normal&#34;&gt;
  &lt;div&gt;
    Look at how well the river Elbe sows up in this!
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(lapply(BC_Water_Krig[-3], &amp;quot;[[&amp;quot;, 1), 
           Shp = Shape_shp,
           Dates = &amp;quot;BIO12 - Annual Mean Soil Moisture&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-third-party_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&#34;bio13---soil-moisture-of-wettest-month&#34;&gt;BIO13 - Soil Moisture of Wettest Month&lt;/h4&gt;
&lt;div class=&#34;alert alert-normal&#34;&gt;
  &lt;div&gt;
    Interpolating this data is just like statistically downscaling any other soil moisture product and can be done without any problems.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for plotting call and plot:&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(lapply(BC_Water_Krig[-3], &amp;quot;[[&amp;quot;, 2), 
           Shp = Shape_shp,
           Dates = &amp;quot;BIO13 - Soil Moisture of Wettest Month&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-third-party_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&#34;bio14---soil-moisture-of-driest-month&#34;&gt;BIO14 - Soil Moisture of Driest Month&lt;/h4&gt;
&lt;div class=&#34;alert alert-normal&#34;&gt;
  &lt;div&gt;
    Interpolating this data is just like statistically downscaling any other soil moisture product and can be done without any problems.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for plotting call and plot:&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(lapply(BC_Water_Krig[-3], &amp;quot;[[&amp;quot;, 3), 
           Shp = Shape_shp,
           Dates = &amp;quot;BIO13 - Soil Moisture of Driest Month&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-third-party_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&#34;bio15---soil-moisture-seasonality&#34;&gt;BIO15 - Soil Moisture Seasonality&lt;/h4&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    This data product is calculated using the standard deviation of mean values throughout our time frame. Conclusively, it would be interpolated better by first statistically downscaling the underlying data rather than the final bioclimatic variable.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for plotting call and plot:&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(lapply(BC_Water_Krig[-3], &amp;quot;[[&amp;quot;, 4), 
           Shp = Shape_shp,
           Dates = &amp;quot;BIO15 - Precipitation Seasonality&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-third-party_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&#34;bio16--bio17---soil-moisture-of-wettest-and-driest-quarter&#34;&gt;BIO16 &amp;amp; BIO17 - Soil Moisture of Wettest and Driest Quarter&lt;/h4&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;I do not recommend you use these kriging outputs!&lt;/strong&gt; They rely on mean quarterly soil moisture data which is not being interpolated here. Subsequently, the patchiness of the underlying data is lost and with it: information.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for plotting call and plot:&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(lapply(BC_Water_Krig[-3], &amp;quot;[[&amp;quot;, 5:6), 
           Shp = Shape_shp,
           Dates = c(&amp;quot;BIO16 - Soil Moisture of Wettest Quarter&amp;quot;, 
                     &amp;quot;BIO17 - Soil Moisture of Driest Quarter&amp;quot;)
           )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-third-party_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&#34;bio18--bio19---precipitation-of-warmest-and-coldest-quarter&#34;&gt;BIO18 &amp;amp; BIO19 - Precipitation of Warmest and Coldest Quarter&lt;/h4&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;I do not recommend you use these kriging outputs!&lt;/strong&gt; They rely on mean quarterly temperature data which is not being interpolated here. Subsequently, the patchiness of the underlying data is lost and with it: information.
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for plotting call and plot:&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(lapply(BC_Water_Krig[-3], &amp;quot;[[&amp;quot;, 7:8), 
           Shp = Shape_shp,
           Dates = c(&amp;quot;BIO16 - Soil Moisture of Warmest Quarter&amp;quot;, 
                     &amp;quot;BIO17 - Soil Moisture of Coldest Quarter&amp;quot;)
           )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-third-party_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;This concludes our exercise for using third-party data in &lt;code&gt;KrigR&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;session-info&#34;&gt;Session Info&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.2.3 (2023-03-15)
## Platform: x86_64-apple-darwin17.0 (64-bit)
## Running under: macOS Big Sur ... 10.16
## 
## Matrix products: default
## BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] parallel  stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] mapview_2.11.0          rnaturalearthdata_0.1.0 rnaturalearth_0.3.2    
##  [4] gimms_1.2.1             ggmap_3.0.2             cowplot_1.1.1          
##  [7] viridis_0.6.2           viridisLite_0.4.1       ggplot2_3.4.1          
## [10] tidyr_1.3.0             KrigR_0.1.2             terra_1.7-21           
## [13] httr_1.4.5              stars_0.6-0             abind_1.4-5            
## [16] fasterize_1.0.4         sf_1.0-12               lubridate_1.9.2        
## [19] automap_1.1-9           doSNOW_1.0.20           snow_0.4-4             
## [22] doParallel_1.0.17       iterators_1.0.14        foreach_1.5.2          
## [25] rgdal_1.6-5             raster_3.6-20           sp_1.6-0               
## [28] stringr_1.5.0           keyring_1.3.1           ecmwfr_1.5.0           
## [31] ncdf4_1.21             
## 
## loaded via a namespace (and not attached):
##  [1] leafem_0.2.0             colorspace_2.1-0         class_7.3-21            
##  [4] leaflet_2.1.2            satellite_1.0.4          base64enc_0.1-3         
##  [7] rstudioapi_0.14          proxy_0.4-27             farver_2.1.1            
## [10] fansi_1.0.4              codetools_0.2-19         cachem_1.0.7            
## [13] knitr_1.42               jsonlite_1.8.4           png_0.1-8               
## [16] Kendall_2.2.1            compiler_4.2.3           assertthat_0.2.1        
## [19] fastmap_1.1.1            cli_3.6.0                htmltools_0.5.4         
## [22] tools_4.2.3              gtable_0.3.1             glue_1.6.2              
## [25] dplyr_1.1.0              Rcpp_1.0.10              jquerylib_0.1.4         
## [28] vctrs_0.6.1              blogdown_1.16            crosstalk_1.2.0         
## [31] lwgeom_0.2-11            xfun_0.37                timechange_0.2.0        
## [34] lifecycle_1.0.3          rnaturalearthhires_0.2.1 zoo_1.8-11              
## [37] scales_1.2.1             gstat_2.1-0              yaml_2.3.7              
## [40] curl_5.0.0               memoise_2.0.1            gridExtra_2.3           
## [43] sass_0.4.5               reshape_0.8.9            stringi_1.7.12          
## [46] highr_0.10               e1071_1.7-13             boot_1.3-28.1           
## [49] intervals_0.15.3         RgoogleMaps_1.4.5.3      rlang_1.1.0             
## [52] pkgconfig_2.0.3          bitops_1.0-7             evaluate_0.20           
## [55] lattice_0.20-45          purrr_1.0.1              htmlwidgets_1.6.1       
## [58] labeling_0.4.2           tidyselect_1.2.0         plyr_1.8.8              
## [61] magrittr_2.0.3           bookdown_0.33            R6_2.5.1                
## [64] generics_0.1.3           DBI_1.1.3                pillar_1.8.1            
## [67] withr_2.5.0              units_0.8-1              xts_0.13.0              
## [70] tibble_3.2.1             spacetime_1.2-8          KernSmooth_2.23-20      
## [73] utf8_1.2.3               rmarkdown_2.20           jpeg_0.1-10             
## [76] grid_4.2.3               zyp_0.11-1               FNN_1.1.3.2             
## [79] digest_0.6.31            classInt_0.4-9           webshot_0.5.4           
## [82] stats4_4.2.3             munsell_0.5.0            bslib_0.4.2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Projection Downscaling</title>
      <link>https://www.erikkusch.com/courses/krigr/projections/</link>
      <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/krigr/projections/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;&lt;code&gt;KrigR&lt;/code&gt; is currently undergoing development. As a result, this part of the workshop has become deprecated. Please refer to the &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/setup/&#34;&gt;setup&lt;/a&gt; &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/quickstart/&#34;&gt;quick guide&lt;/a&gt; portions of this material as these are up-to-date. &lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    This part of the workshop is dependant on set-up and preparation done previously &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/prep/&#34;&gt;here&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First, we load &lt;code&gt;KrigR&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(KrigR)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I expect that you will often be interested not just in past and current climatic conditions, but also in future projections of climate data at high spatial resolutions.&lt;/p&gt;
&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;div&gt;
    The &lt;code&gt;KrigR&lt;/code&gt; workflow can be used to establish high-resolution, bias-corrected climate projection products.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This time, we run our exercise for all of Germany because of its size and topographical variety.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Shape_shp &amp;lt;- ne_countries(country = &amp;quot;Germany&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;krigr-process-for-projections&#34;&gt;&lt;code&gt;KrigR&lt;/code&gt; Process for Projections&lt;/h2&gt;
&lt;p&gt;We published the the &lt;code&gt;KrigR&lt;/code&gt; workflow for downscaled climate projections in 
&lt;a href=&#34;https://iopscience.iop.org/article/10.1088/1748-9326/ac48b3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this publication (Section 3.5)&lt;/a&gt; and I will walk you through the contents thereof here.&lt;/p&gt;
&lt;p&gt;To achieve downscaled projection products we require three data products:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Historical climate data from ERA5(-Land)&lt;/li&gt;
&lt;li&gt;Historical climate data from projection source&lt;/li&gt;
&lt;li&gt;Future climate data from projection source&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Subsequently, the data products are downscaled to the desired spatial resolution using &lt;code&gt;krigR()&lt;/code&gt;. Finally, the difference between the downscaled projection-sourced data are added to the historical baseline obtained from (downscaled) ERA5(-Land) data. This achieves bias correction.&lt;/p&gt;
&lt;h3 id=&#34;obtaining-era5-land-data&#34;&gt;Obtaining ERA5(-Land) Data&lt;/h3&gt;
&lt;p&gt;Now, let&amp;rsquo;s obtain the historical baseline from ERA5-Land for the same time-period as our CMIP6 historical data.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file if download takes too long:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/Germany_Hist_ERA.nc&#34;&gt;Germany_Hist_ERA.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if(!file.exists(file.path(Dir.Data, &amp;quot;Germany_Hist_ERA.nc&amp;quot;))){
  Hist_ERA_ras &amp;lt;- download_ERA(Variable = &amp;quot;2m_temperature&amp;quot;,
                               DateStart = &amp;quot;1981-01-01&amp;quot;,
                               DateStop = &amp;quot;1999-12-31&amp;quot;,
                               TResolution = &amp;quot;month&amp;quot;,
                               TStep = 1,
                               Extent = Shape_shp,
                               Dir = Dir.Data,
                               FileName = &amp;quot;Germany_Hist_ERA&amp;quot;, 
                               API_Key = API_Key,
                               API_User = API_User,
                               SingularDL = TRUE)
  Index &amp;lt;- rep(1:12, length = nlayers(Hist_ERA_ras))
  Hist_ERA_ras &amp;lt;- stackApply(Hist_ERA_ras, indices = Index, fun = mean)
  writeRaster(Hist_ERA_ras, filename = file.path(Dir.Data, &amp;quot;Germany_Hist_ERA&amp;quot;), format = &amp;quot;CDF&amp;quot;)
}
Hist_ERA_ras &amp;lt;- mean(stack(file.path(Dir.Data, &amp;quot;Germany_Hist_ERA.nc&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;obtaining-projection-data&#34;&gt;Obtaining Projection Data&lt;/h3&gt;
&lt;p&gt;Here, we use CMIP6 projection data manually sourced from the 
&lt;a href=&#34;https://cds.climate.copernicus.eu/cdsapp#!/dataset/projections-cmip6?tab=overview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ECMWF CDS distribution&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;div&gt;
    Our &lt;a href=&#34;https://www.erikkusch.com/courses/krigr/outlook/&#34;&gt;development goals&lt;/a&gt; include development of &lt;code&gt;download_ERA()&lt;/code&gt; to work with other ECWMF CDS data sets aside from ERA5(-Land). This includes this CMIP6 data set.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;historical-baseline&#34;&gt;Historical Baseline&lt;/h4&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/historical_tas_1981-2000.nc&#34;&gt;historical_tas_1981-2000.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;train_HIST &amp;lt;- mean(stack(file.path(Dir.Data, &amp;quot;historical_tas_1981-2000.nc&amp;quot;)))
train_HIST &amp;lt;- crop(train_HIST,extent(Hist_ERA_ras))
train_mask &amp;lt;- KrigR::mask_Shape(train_HIST, Shape_shp)
train_HIST &amp;lt;- mask(train_HIST, train_mask)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;future-projection&#34;&gt;Future Projection&lt;/h4&gt;
&lt;details&gt;
  &lt;summary&gt;Click here for file:&lt;/summary&gt;
    Download 
&lt;a href=&#34;https://github.com/ErikKusch/Homepage/raw/master/content/courses/krigr/Data/ssp585_tas_2041-2060.nc&#34;&gt;ssp585_tas_2041-2060.nc&lt;/a&gt; and place it into your data directory.
&lt;/details&gt; 
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;train_SSP &amp;lt;- mean(stack(file.path(Dir.Data, &amp;quot;ssp585_tas_2041-2060.nc&amp;quot;)))
train_SSP &amp;lt;- crop(train_SSP,extent(Hist_ERA_ras))
train_mask &amp;lt;- KrigR::mask_Shape(train_SSP, Shape_shp)
train_SSP &amp;lt;- mask(train_SSP, train_mask)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;visualisation-of-cmip6-data&#34;&gt;Visualisation of CMIP6 Data&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Raw(stack(train_HIST, train_SSP), 
         Shp = Shape_shp,
         Dates = c(&amp;quot;Historic CMIP6&amp;quot;, &amp;quot;Future CMIP6&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-projections_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Already, we can see that quite a bit of warming is projected to happen all across Germany. However, we want to know about this at higher spatial resolutions. That&amp;rsquo;s where &lt;code&gt;KrigR&lt;/code&gt; comes in.&lt;/p&gt;
&lt;h3 id=&#34;establishing-kriged-products&#34;&gt;Establishing Kriged Products&lt;/h3&gt;
&lt;p&gt;For the first time in this workshop material, we will push our spatial resolution to the finest scale supported by our default GMTED 2010 DEM covariate data: 0.008333 / ~1km.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    These operations take quite some time - grab a tea or coffee, go for a walk, or stretch a bit.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The downscaling calls should be familiar by now so I will forego explaining them. In case, the following code snippets do not make sense to you, please consult the portion of this workshop concerned with 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/kriging/&#34;&gt;statistical downscaling&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;historical-cmip6&#34;&gt;Historical CMIP6&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Covariate Data
GMTED_DE &amp;lt;- download_DEM(
  Train_ras = train_HIST,
  Target_res = 0.008334,
  Shape = Shape_shp,
  Keep_Temporary = TRUE,
  Dir = Dir.Covariates
)
## Kriging
Output_HIST &amp;lt;- krigR(
  Data = train_HIST,
  Covariates_coarse = GMTED_DE[[1]], 
  Covariates_fine = GMTED_DE[[2]],  
  Keep_Temporary = FALSE,
  Cores = 1,
  Dir = Dir.Exports,  
  FileName = &amp;quot;DE_CMIP-HIST&amp;quot;, 
  nmax = 40
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(Output_HIST,
           Shp = Shape_shp,
           Dates = &amp;quot;CMIP6 Historical&amp;quot;, columns = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-projections_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;future-cmip6&#34;&gt;Future CMIP6&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Covariate Data
GMTED_DE &amp;lt;- download_DEM(
  Train_ras = train_SSP,
  Target_res = 0.008334,
  Shape = Shape_shp,
  Keep_Temporary = TRUE,
  Dir = Dir.Covariates
)
## Kriging
Output_SSP &amp;lt;- krigR(
  Data = train_SSP,
  Covariates_coarse = GMTED_DE[[1]], 
  Covariates_fine = GMTED_DE[[2]],   
  Keep_Temporary = FALSE,
  Cores = 1,
  Dir = Dir.Exports,  
  FileName = &amp;quot;DE_SSP585_2041-2060&amp;quot;, 
  nmax = 40
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(Output_SSP,
           Shp = Shape_shp,
           Dates = &amp;quot;CMIP6 Future&amp;quot;, columns = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-projections_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;historical-era5-land&#34;&gt;Historical ERA5-Land&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Covariate Data
GMTED_DE &amp;lt;- download_DEM(
  Train_ras = Hist_ERA_ras,
  Target_res = 0.008334,
  Shape = Shape_shp,
  Keep_Temporary = TRUE,
  Dir = Dir.Covariates
)
## Kriging
Output_ERA &amp;lt;- krigR(
  Data = Hist_ERA_ras,
  Covariates_coarse = GMTED_DE[[1]], 
  Covariates_fine = GMTED_DE[[2]],   
  Keep_Temporary = FALSE,
  Cores = 1,
  Dir = Dir.Exports,  
  FileName = &amp;quot;DE_hist&amp;quot;, 
  nmax = 40
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Plot_Krigs(Output_ERA,
           Shp = Shape_shp,
           Dates = &amp;quot;ERA5-Land Historical&amp;quot;, columns = 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-projections_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;putting-it-all-together&#34;&gt;Putting It All Together&lt;/h3&gt;
&lt;p&gt;To establish a final product of high-resolution climate projection data, we simply add the difference between the kriged CMIP6 products to the kriged ERA5-Land product:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Creating Difference and Projection raster
Difference_ras &amp;lt;- Output_SSP[[1]] - Output_HIST[[1]]
Projection_ras &amp;lt;- Output_ERA[[1]] + Difference_ras
## Adding min and max values to ocean cells to ensure same colour scale
Output_ERA[[1]][10] &amp;lt;- maxValue(Projection_ras)
Output_ERA[[1]][12] &amp;lt;- minValue(Projection_ras)
Projection_ras[10] &amp;lt;- maxValue(Output_ERA[[1]])
Projection_ras[12] &amp;lt;- minValue(Output_ERA[[1]])
## Individual plots
A_gg &amp;lt;- Plot_Raw(Output_ERA[[1]], Shp = Shape_shp, 
                 Dates = &amp;quot;Historical ERA5-Land (1981-2000)&amp;quot;)
B_gg &amp;lt;- Plot_Raw(Difference_ras[[1]], Shp = Shape_shp, 
                 Dates = &amp;quot;Anomalies of SSP585 - Historical CMIP-6&amp;quot;,
                 COL = rev(viridis(100)))
C_gg &amp;lt;- Plot_Raw(Projection_ras[[1]], Shp = Shape_shp, 
                 Dates = &amp;quot;Future Projection (ERA5-Land + Anomalies)&amp;quot;)
## Fuse the plots into one big plot
ggPlot &amp;lt;- plot_grid(plotlist = list(A_gg, B_gg, C_gg), 
                    ncol = 3, labels = &amp;quot;AUTO&amp;quot;) 
ggPlot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;krigr-projections_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And there we have it - a downscaled, bias-corrected projection of air temperature across Germany.&lt;/p&gt;
&lt;h2 id=&#34;considerations-for-projection-kriging&#34;&gt;Considerations for Projection Kriging&lt;/h2&gt;
&lt;p&gt;Projection kriging is easily the most flexible exercise you can undertake with &lt;code&gt;KrigR&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    I have submitted a research proposal to establish best practice for projection kriging.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So far, two particular aspects stand out to me and should be considered by you when using &lt;code&gt;KrigR&lt;/code&gt; to obtain high-resolution projection data.&lt;/p&gt;
&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;Do not statistically downscale precipitation data and do not use products that do so!&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;reliability&#34;&gt;Reliability&lt;/h3&gt;
&lt;p&gt;Just like with all statistical downscaling exercises, it is pivotal to consider variables interpolated and consistency of statistical relationships with covariates across spatial resolutions.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Kriging is a very flexible tool for statistical interpolation. Consider your choice of covariates and change in resolutions carefully. &lt;strong&gt;Always inspect your data&lt;/strong&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;uncertainty&#34;&gt;Uncertainty&lt;/h3&gt;
&lt;p&gt;Integration of multiple kriged data sets with statistical uncertainty and each of which comes with its own underlying dynamical data uncertainty raises the question of how to combine uncertainties for meaningful uncertainty flags.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    I have submitted a research proposal to assess best practice for uncertainty integration across data products.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;session-info&#34;&gt;Session Info&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.2.3 (2023-03-15)
## Platform: x86_64-apple-darwin17.0 (64-bit)
## Running under: macOS Big Sur ... 10.16
## 
## Matrix products: default
## BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] parallel  stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] mapview_2.11.0          rnaturalearthdata_0.1.0 rnaturalearth_0.3.2    
##  [4] gimms_1.2.1             ggmap_3.0.2             cowplot_1.1.1          
##  [7] viridis_0.6.2           viridisLite_0.4.1       ggplot2_3.4.1          
## [10] tidyr_1.3.0             KrigR_0.1.2             terra_1.7-21           
## [13] httr_1.4.5              stars_0.6-0             abind_1.4-5            
## [16] fasterize_1.0.4         sf_1.0-12               lubridate_1.9.2        
## [19] automap_1.1-9           doSNOW_1.0.20           snow_0.4-4             
## [22] doParallel_1.0.17       iterators_1.0.14        foreach_1.5.2          
## [25] rgdal_1.6-5             raster_3.6-20           sp_1.6-0               
## [28] stringr_1.5.0           keyring_1.3.1           ecmwfr_1.5.0           
## [31] ncdf4_1.21             
## 
## loaded via a namespace (and not attached):
##  [1] leafem_0.2.0             colorspace_2.1-0         class_7.3-21            
##  [4] leaflet_2.1.2            satellite_1.0.4          base64enc_0.1-3         
##  [7] rstudioapi_0.14          proxy_0.4-27             farver_2.1.1            
## [10] fansi_1.0.4              codetools_0.2-19         cachem_1.0.7            
## [13] knitr_1.42               jsonlite_1.8.4           png_0.1-8               
## [16] Kendall_2.2.1            compiler_4.2.3           assertthat_0.2.1        
## [19] fastmap_1.1.1            cli_3.6.0                htmltools_0.5.4         
## [22] tools_4.2.3              gtable_0.3.1             glue_1.6.2              
## [25] dplyr_1.1.0              Rcpp_1.0.10              jquerylib_0.1.4         
## [28] vctrs_0.6.1              blogdown_1.16            crosstalk_1.2.0         
## [31] lwgeom_0.2-11            xfun_0.37                timechange_0.2.0        
## [34] lifecycle_1.0.3          rnaturalearthhires_0.2.1 zoo_1.8-11              
## [37] scales_1.2.1             gstat_2.1-0              yaml_2.3.7              
## [40] curl_5.0.0               memoise_2.0.1            gridExtra_2.3           
## [43] sass_0.4.5               reshape_0.8.9            stringi_1.7.12          
## [46] highr_0.10               e1071_1.7-13             boot_1.3-28.1           
## [49] intervals_0.15.3         RgoogleMaps_1.4.5.3      rlang_1.1.0             
## [52] pkgconfig_2.0.3          bitops_1.0-7             evaluate_0.20           
## [55] lattice_0.20-45          purrr_1.0.1              htmlwidgets_1.6.1       
## [58] labeling_0.4.2           tidyselect_1.2.0         plyr_1.8.8              
## [61] magrittr_2.0.3           bookdown_0.33            R6_2.5.1                
## [64] generics_0.1.3           DBI_1.1.3                pillar_1.8.1            
## [67] withr_2.5.0              units_0.8-1              xts_0.13.0              
## [70] tibble_3.2.1             spacetime_1.2-8          KernSmooth_2.23-20      
## [73] utf8_1.2.3               rmarkdown_2.20           jpeg_0.1-10             
## [76] grid_4.2.3               zyp_0.11-1               FNN_1.1.3.2             
## [79] digest_0.6.31            classInt_0.4-9           webshot_0.5.4           
## [82] stats4_4.2.3             munsell_0.5.0            bslib_0.4.2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>KrigR Workshop</title>
      <link>https://www.erikkusch.com/courses/krigr/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://www.erikkusch.com/courses/krigr/</guid>
      <description>&lt;p&gt;If you are seeing this page, something went awry in the build of the website. Please find the first course material for this course 
&lt;a href=&#34;https://www.erikkusch.com/courses/krigr/setup/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
